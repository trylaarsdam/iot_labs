
c:/Users/Nerdom/Desktop/lab7/target/lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f18  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016fc8  2**0
                  CONTENTS
  3 .data         0000006c  2003e300  000d6f30  0000e300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000484  2003e36c  2003e36c  0001e36c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6f9c  000d6f9c  00016f9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6fc4  000d6fc4  00016fc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000eaca4  00000000  00000000  00016fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00012d7f  00000000  00000000  00101c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001ab95  00000000  00000000  001149eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002508  00000000  00000000  0012f580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004388  00000000  00000000  00131a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00039c3e  00000000  00000000  00135e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002e2ed  00000000  00000000  0016fa4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0010898c  00000000  00000000  0019dd3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c7cc  00000000  00000000  002a66c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	cc 65 0d 00                                         .e..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f9db 	bl	d63e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f9e0 	bl	d63fe <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e300 	.word	0x2003e300
   d4048:	000d6f30 	.word	0x000d6f30
   d404c:	2003e36c 	.word	0x2003e36c
   d4050:	2003e36c 	.word	0x2003e36c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f92d 	bl	d52b8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6f30 	.word	0x000d6f30
   d4080:	000d6ee8 	.word	0x000d6ee8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bbf6 	b.w	d4874 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fcf7 	bl	d4a7c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b8df 	b.w	d5254 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bf79 	b.w	d4f8c <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bf7f 	b.w	d4f9c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bf7d 	b.w	d4f9c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
   d40b4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d40b6:	f000 fdbd 	bl	d4c34 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d40ba:	4b03      	ldr	r3, [pc, #12]	; (d40c8 <_ZN10CloudClass7processEv+0x14>)
   d40bc:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d40be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d40c2:	f000 bf53 	b.w	d4f6c <spark_process>
   d40c6:	bf00      	nop
   d40c8:	2003e734 	.word	0x2003e734

000d40cc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40cc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ce:	6984      	ldr	r4, [r0, #24]
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN9TCPClientD1Ev+0x30>)
   d40d2:	6003      	str	r3, [r0, #0]
   d40d4:	4605      	mov	r5, r0
   d40d6:	b17c      	cbz	r4, d40f8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40d8:	6863      	ldr	r3, [r4, #4]
   d40da:	3b01      	subs	r3, #1
   d40dc:	6063      	str	r3, [r4, #4]
   d40de:	b95b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40e0:	6823      	ldr	r3, [r4, #0]
   d40e2:	4620      	mov	r0, r4
   d40e4:	689b      	ldr	r3, [r3, #8]
   d40e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e8:	68a3      	ldr	r3, [r4, #8]
   d40ea:	3b01      	subs	r3, #1
   d40ec:	60a3      	str	r3, [r4, #8]
   d40ee:	b91b      	cbnz	r3, d40f8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40f0:	6823      	ldr	r3, [r4, #0]
   d40f2:	4620      	mov	r0, r4
   d40f4:	68db      	ldr	r3, [r3, #12]
   d40f6:	4798      	blx	r3
   d40f8:	4628      	mov	r0, r5
   d40fa:	bd38      	pop	{r3, r4, r5, pc}
   d40fc:	000d6cbc 	.word	0x000d6cbc

000d4100 <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
   d4104:	f7ff ffe2 	bl	d40cc <_ZN9TCPClientD1Ev>
   d4108:	4620      	mov	r0, r4
   d410a:	bd10      	pop	{r4, pc}

000d410c <_ZN9TCPClientD0Ev>:
   d410c:	b510      	push	{r4, lr}
   d410e:	4604      	mov	r4, r0
   d4110:	f7ff ffdc 	bl	d40cc <_ZN9TCPClientD1Ev>
   d4114:	4620      	mov	r0, r4
   d4116:	211c      	movs	r1, #28
   d4118:	f002 f805 	bl	d6126 <_ZdlPvj>
   d411c:	4620      	mov	r0, r4
   d411e:	bd10      	pop	{r4, pc}

000d4120 <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4120:	6803      	ldr	r3, [r0, #0]
   d4122:	b12b      	cbz	r3, d4130 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d4124:	6842      	ldr	r2, [r0, #4]
   d4126:	4293      	cmp	r3, r2
   d4128:	d202      	bcs.n	d4130 <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d412a:	4618      	mov	r0, r3
   d412c:	f002 b946 	b.w	d63bc <atoi>
   d4130:	2000      	movs	r0, #0
   d4132:	4770      	bx	lr

000d4134 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d4134:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4136:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d4138:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d413a:	b145      	cbz	r5, d414e <_ZN10BlynkParam8iteratorppEv+0x1a>
   d413c:	6843      	ldr	r3, [r0, #4]
   d413e:	429d      	cmp	r5, r3
   d4140:	d205      	bcs.n	d414e <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   d4142:	4628      	mov	r0, r5
   d4144:	f002 f996 	bl	d6474 <strlen>
   d4148:	3001      	adds	r0, #1
   d414a:	4405      	add	r5, r0
   d414c:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   d414e:	4620      	mov	r0, r4
   d4150:	bd38      	pop	{r3, r4, r5, pc}

000d4152 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   d4152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4154:	4604      	mov	r4, r0
    if (str == NULL) {
   d4156:	460f      	mov	r7, r1
   d4158:	6846      	ldr	r6, [r0, #4]
   d415a:	b921      	cbnz	r1, d4166 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   d415c:	6803      	ldr	r3, [r0, #0]
   d415e:	1c72      	adds	r2, r6, #1
   d4160:	6042      	str	r2, [r0, #4]
   d4162:	5599      	strb	r1, [r3, r6]
        return;
   d4164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
   d4166:	4608      	mov	r0, r1
   d4168:	f002 f984 	bl	d6474 <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d416c:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d416e:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d4170:	19aa      	adds	r2, r5, r6
   d4172:	429a      	cmp	r2, r3
   d4174:	d808      	bhi.n	d4188 <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
   d4176:	6820      	ldr	r0, [r4, #0]
   d4178:	462a      	mov	r2, r5
   d417a:	4639      	mov	r1, r7
   d417c:	4430      	add	r0, r6
   d417e:	f002 f933 	bl	d63e8 <memcpy>
    len += l;
   d4182:	6863      	ldr	r3, [r4, #4]
   d4184:	441d      	add	r5, r3
   d4186:	6065      	str	r5, [r4, #4]
   d4188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d418c <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d418c:	b570      	push	{r4, r5, r6, lr}
   d418e:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d4190:	6840      	ldr	r0, [r0, #4]
   d4192:	68a6      	ldr	r6, [r4, #8]
   d4194:	6825      	ldr	r5, [r4, #0]
   d4196:	4a05      	ldr	r2, [pc, #20]	; (d41ac <_ZN10BlynkParam3addEi+0x20>)
   d4198:	460b      	mov	r3, r1
   d419a:	1a31      	subs	r1, r6, r0
   d419c:	4428      	add	r0, r5
   d419e:	f000 ff05 	bl	d4fac <snprintf>
   d41a2:	6863      	ldr	r3, [r4, #4]
   d41a4:	3001      	adds	r0, #1
   d41a6:	4418      	add	r0, r3
   d41a8:	6060      	str	r0, [r4, #4]
   d41aa:	bd70      	pop	{r4, r5, r6, pc}
   d41ac:	000d6633 	.word	0x000d6633

000d41b0 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d41b0:	b570      	push	{r4, r5, r6, lr}
   d41b2:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d41b4:	6840      	ldr	r0, [r0, #4]
   d41b6:	68a6      	ldr	r6, [r4, #8]
   d41b8:	6825      	ldr	r5, [r4, #0]
   d41ba:	4a05      	ldr	r2, [pc, #20]	; (d41d0 <_ZN10BlynkParam3addEl+0x20>)
   d41bc:	460b      	mov	r3, r1
   d41be:	1a31      	subs	r1, r6, r0
   d41c0:	4428      	add	r0, r5
   d41c2:	f000 fef3 	bl	d4fac <snprintf>
   d41c6:	6863      	ldr	r3, [r4, #4]
   d41c8:	3001      	adds	r0, #1
   d41ca:	4418      	add	r0, r3
   d41cc:	6060      	str	r0, [r4, #4]
   d41ce:	bd70      	pop	{r4, r5, r6, pc}
   d41d0:	000d6636 	.word	0x000d6636

000d41d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d41d4:	b508      	push	{r3, lr}
        state = CONNECTING;
   d41d6:	2300      	movs	r3, #0
   d41d8:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d41da:	6800      	ldr	r0, [r0, #0]
   d41dc:	f001 fd0b 	bl	d5bf6 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d41e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
   d41e4:	f000 bc96 	b.w	d4b14 <BlynkNoOpCbk>

000d41e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d41e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d41ec:	188e      	adds	r6, r1, r2
   d41ee:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d41f0:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d41f2:	4680      	mov	r8, r0
   d41f4:	460d      	mov	r5, r1
   d41f6:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d41f8:	9105      	str	r1, [sp, #20]
   d41fa:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d41fc:	f080 80ec 	bcs.w	d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
   d4200:	880b      	ldrh	r3, [r1, #0]
   d4202:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
   d4206:	a805      	add	r0, sp, #20
   d4208:	f7ff ff94 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d420c:	6803      	ldr	r3, [r0, #0]
   d420e:	429e      	cmp	r6, r3
   d4210:	f240 80e2 	bls.w	d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
   d4214:	a805      	add	r0, sp, #20
   d4216:	f7ff ff83 	bl	d4120 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d421a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d421e:	f247 2276 	movw	r2, #29302	; 0x7276
   d4222:	4293      	cmp	r3, r2
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
   d4224:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
   d4226:	f000 809e 	beq.w	d4366 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x17e>
   d422a:	d80d      	bhi.n	d4248 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
   d422c:	f247 2261 	movw	r2, #29281	; 0x7261
   d4230:	4293      	cmp	r3, r2
   d4232:	d064      	beq.n	d42fe <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d4234:	f247 2264 	movw	r2, #29284	; 0x7264
   d4238:	4293      	cmp	r3, r2
   d423a:	d039      	beq.n	d42b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc8>
   d423c:	f646 5270 	movw	r2, #28016	; 0x6d70
   d4240:	4293      	cmp	r3, r2
   d4242:	f040 80bb 	bne.w	d43bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d4>
   d4246:	e02f      	b.n	d42a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
   d4248:	f247 7264 	movw	r2, #30564	; 0x7764
   d424c:	4293      	cmp	r3, r2
   d424e:	d041      	beq.n	d42d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xec>
   d4250:	f247 7276 	movw	r2, #30582	; 0x7776
   d4254:	4293      	cmp	r3, r2
   d4256:	f000 8097 	beq.w	d4388 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a0>
   d425a:	f247 7261 	movw	r2, #30561	; 0x7761
   d425e:	4293      	cmp	r3, r2
   d4260:	f040 80ac 	bne.w	d43bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d4>
   d4264:	e06c      	b.n	d4340 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x158>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            pin = BLYNK_DECODE_PIN(it);
   d4266:	a805      	add	r0, sp, #20
   d4268:	f7ff ff5a 	bl	d4120 <_ZNK10BlynkParam8iterator5asIntEv>
   d426c:	b2c5      	uxtb	r5, r0
            ++it;
   d426e:	a805      	add	r0, sp, #20
   d4270:	f7ff ff60 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d4274:	9c05      	ldr	r4, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   d4276:	495a      	ldr	r1, [pc, #360]	; (d43e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d4278:	4620      	mov	r0, r4
   d427a:	f002 f8f1 	bl	d6460 <strcmp>
   d427e:	4601      	mov	r1, r0
   d4280:	2800      	cmp	r0, #0
   d4282:	f000 80a5 	beq.w	d43d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4286:	4957      	ldr	r1, [pc, #348]	; (d43e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>)
   d4288:	4620      	mov	r0, r4
   d428a:	f002 f8e9 	bl	d6460 <strcmp>
   d428e:	2800      	cmp	r0, #0
   d4290:	f000 809d 	beq.w	d43ce <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e6>
   d4294:	4954      	ldr	r1, [pc, #336]	; (d43e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>)
   d4296:	4620      	mov	r0, r4
   d4298:	f002 f8e2 	bl	d6460 <strcmp>
   d429c:	2800      	cmp	r0, #0
   d429e:	f000 8096 	beq.w	d43ce <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e6>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d42a2:	a805      	add	r0, sp, #20
   d42a4:	f7ff ff46 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
   d42a8:	9b05      	ldr	r3, [sp, #20]
   d42aa:	429e      	cmp	r6, r3
   d42ac:	d8db      	bhi.n	d4266 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x7e>
   d42ae:	e093      	b.n	d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d42b0:	ab0a      	add	r3, sp, #40	; 0x28
   d42b2:	9307      	str	r3, [sp, #28]
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
   d42b4:	a807      	add	r0, sp, #28
   d42b6:	2310      	movs	r3, #16
   d42b8:	2500      	movs	r5, #0
   d42ba:	494c      	ldr	r1, [pc, #304]	; (d43ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x204>)
   d42bc:	9309      	str	r3, [sp, #36]	; 0x24
   d42be:	9508      	str	r5, [sp, #32]
   d42c0:	f7ff ff47 	bl	d4152 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d42c4:	a807      	add	r0, sp, #28
   d42c6:	4621      	mov	r1, r4
   d42c8:	f7ff ff60 	bl	d418c <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d42cc:	4620      	mov	r0, r4
   d42ce:	f001 fe93 	bl	d5ff8 <digitalRead>
   d42d2:	e025      	b.n	d4320 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x138>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d42d4:	a805      	add	r0, sp, #20
   d42d6:	f7ff ff2d 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d42da:	6803      	ldr	r3, [r0, #0]
   d42dc:	429e      	cmp	r6, r3
   d42de:	d97b      	bls.n	d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d42e0:	b2a4      	uxth	r4, r4
   d42e2:	2101      	movs	r1, #1
   d42e4:	4620      	mov	r0, r4
   d42e6:	f001 fe5d 	bl	d5fa4 <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d42ea:	a805      	add	r0, sp, #20
   d42ec:	f7ff ff18 	bl	d4120 <_ZNK10BlynkParam8iterator5asIntEv>
   d42f0:	1c01      	adds	r1, r0, #0
   d42f2:	bf18      	it	ne
   d42f4:	2101      	movne	r1, #1
   d42f6:	4620      	mov	r0, r4
   d42f8:	f001 fe65 	bl	d5fc6 <digitalWrite>
    } break;
   d42fc:	e06c      	b.n	d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
   d42fe:	ab0a      	add	r3, sp, #40	; 0x28
   d4300:	9307      	str	r3, [sp, #28]
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
   d4302:	493b      	ldr	r1, [pc, #236]	; (d43f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x208>)
   d4304:	2310      	movs	r3, #16
   d4306:	a807      	add	r0, sp, #28
   d4308:	2500      	movs	r5, #0
   d430a:	9309      	str	r3, [sp, #36]	; 0x24
   d430c:	9508      	str	r5, [sp, #32]
   d430e:	f7ff ff20 	bl	d4152 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d4312:	a807      	add	r0, sp, #28
   d4314:	4621      	mov	r1, r4
   d4316:	f7ff ff39 	bl	d418c <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d431a:	4620      	mov	r0, r4
   d431c:	f001 fe7f 	bl	d601e <analogRead>
   d4320:	4601      	mov	r1, r0
   d4322:	a807      	add	r0, sp, #28
   d4324:	f7ff ff44 	bl	d41b0 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d4328:	9b08      	ldr	r3, [sp, #32]
   d432a:	9502      	str	r5, [sp, #8]
   d432c:	3b01      	subs	r3, #1
   d432e:	9300      	str	r3, [sp, #0]
   d4330:	9b07      	ldr	r3, [sp, #28]
   d4332:	9501      	str	r5, [sp, #4]
   d4334:	462a      	mov	r2, r5
   d4336:	2114      	movs	r1, #20
   d4338:	4640      	mov	r0, r8
   d433a:	f000 fabb 	bl	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
   d433e:	e04b      	b.n	d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d4340:	a805      	add	r0, sp, #20
   d4342:	f7ff fef7 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d4346:	6803      	ldr	r3, [r0, #0]
   d4348:	429e      	cmp	r6, r3
   d434a:	d945      	bls.n	d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d434c:	b2a4      	uxth	r4, r4
   d434e:	2101      	movs	r1, #1
   d4350:	4620      	mov	r0, r4
   d4352:	f001 fe27 	bl	d5fa4 <pinMode>
#endif
        analogWrite(pin, it.asInt());
   d4356:	a805      	add	r0, sp, #20
   d4358:	f7ff fee2 	bl	d4120 <_ZNK10BlynkParam8iterator5asIntEv>
   d435c:	4601      	mov	r1, r0
   d435e:	4620      	mov	r0, r4
   d4360:	f001 fe74 	bl	d604c <_Z11analogWritetm>
    } break;
   d4364:	e038      	b.n	d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d4366:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
   d4368:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d436a:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
   d436e:	f000 fbd3 	bl	d4b18 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d4372:	4603      	mov	r3, r0
            handler(req);
   d4374:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
   d4376:	b123      	cbz	r3, d4382 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19a>
   d4378:	4a1e      	ldr	r2, [pc, #120]	; (d43f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>)
   d437a:	4293      	cmp	r3, r2
   d437c:	d001      	beq.n	d4382 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19a>
            handler(req);
   d437e:	4798      	blx	r3
   d4380:	e02a      	b.n	d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        } else {
            BlynkWidgetReadDefault(req);
   d4382:	f000 fbc5 	bl	d4b10 <BlynkWidgetRead>
        }
    } break;
   d4386:	e027      	b.n	d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
    case BLYNK_HW_VW: {
        ++it;
   d4388:	a805      	add	r0, sp, #20
   d438a:	f7ff fed3 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d438e:	9b05      	ldr	r3, [sp, #20]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d4390:	930a      	str	r3, [sp, #40]	; 0x28
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
   d4392:	1b5d      	subs	r5, r3, r5
   d4394:	1b7d      	subs	r5, r7, r5
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d4396:	4620      	mov	r0, r4
   d4398:	950b      	str	r5, [sp, #44]	; 0x2c
   d439a:	950c      	str	r5, [sp, #48]	; 0x30
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
   d439c:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d43a0:	f000 fbc4 	bl	d4b2c <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d43a4:	4603      	mov	r3, r0
            handler(req, param2);
   d43a6:	a90a      	add	r1, sp, #40	; 0x28
   d43a8:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
   d43aa:	b123      	cbz	r3, d43b6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ce>
   d43ac:	4a12      	ldr	r2, [pc, #72]	; (d43f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x210>)
   d43ae:	4293      	cmp	r3, r2
   d43b0:	d001      	beq.n	d43b6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ce>
            handler(req, param2);
   d43b2:	4798      	blx	r3
   d43b4:	e010      	b.n	d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        } else {
            BlynkWidgetWriteDefault(req, param2);
   d43b6:	f000 fbac 	bl	d4b12 <BlynkWidgetWrite>
        }
    } break;
   d43ba:	e00d      	b.n	d43d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d43bc:	2300      	movs	r3, #0
   d43be:	2102      	movs	r1, #2
   d43c0:	9100      	str	r1, [sp, #0]
   d43c2:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d43c6:	9302      	str	r3, [sp, #8]
   d43c8:	9301      	str	r3, [sp, #4]
   d43ca:	4619      	mov	r1, r3
   d43cc:	e7b4      	b.n	d4338 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x150>
            pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d43ce:	2101      	movs	r1, #1
   d43d0:	4628      	mov	r0, r5
   d43d2:	f001 fde7 	bl	d5fa4 <pinMode>
   d43d6:	e764      	b.n	d42a2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
   d43d8:	b00e      	add	sp, #56	; 0x38
   d43da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d43de:	bf00      	nop
   d43e0:	000d663a 	.word	0x000d663a
   d43e4:	000d663d 	.word	0x000d663d
   d43e8:	000d6641 	.word	0x000d6641
   d43ec:	000d6645 	.word	0x000d6645
   d43f0:	000d6648 	.word	0x000d6648
   d43f4:	000d4b11 	.word	0x000d4b11
   d43f8:	000d4b13 	.word	0x000d4b13

000d43fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d43fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4400:	b08e      	sub	sp, #56	; 0x38
   d4402:	af04      	add	r7, sp, #16
   d4404:	4605      	mov	r5, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d4406:	2205      	movs	r2, #5
   d4408:	f107 010c 	add.w	r1, r7, #12
   d440c:	6800      	ldr	r0, [r0, #0]
   d440e:	f000 febc 	bl	d518a <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d4412:	2800      	cmp	r0, #0
   d4414:	f000 8119 	beq.w	d464a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d4418:	2805      	cmp	r0, #5
   d441a:	d001      	beq.n	d4420 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
   d441c:	2000      	movs	r0, #0
   d441e:	e119      	b.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4420:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d4424:	f8b7 400f 	ldrh.w	r4, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4428:	0a13      	lsrs	r3, r2, #8
   d442a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d442e:	0a23      	lsrs	r3, r4, #8
   d4430:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4434:	b292      	uxth	r2, r2
    hdr.length = ntohs(hdr.length);
   d4436:	b2a4      	uxth	r4, r4
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d4438:	f8a7 200d 	strh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d443c:	f8a7 400f 	strh.w	r4, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
   d4440:	2a00      	cmp	r2, #0
   d4442:	d0eb      	beq.n	d441c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d4444:	7b3b      	ldrb	r3, [r7, #12]
   d4446:	b9f3      	cbnz	r3, d4486 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
        lastActivityIn = BlynkMillis();
   d4448:	f000 fb5e 	bl	d4b08 <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d444c:	7f6b      	ldrb	r3, [r5, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
   d444e:	60e8      	str	r0, [r5, #12]
   d4450:	f8b7 200f 	ldrh.w	r2, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d4454:	b99b      	cbnz	r3, d447e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   d4456:	f8b7 100d 	ldrh.w	r1, [r7, #13]
   d445a:	2901      	cmp	r1, #1
   d445c:	d10f      	bne.n	d447e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
            switch (hdr.length) {
   d445e:	2a04      	cmp	r2, #4
   d4460:	d001      	beq.n	d4466 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   d4462:	2ac8      	cmp	r2, #200	; 0xc8
   d4464:	d1da      	bne.n	d441c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
                state = CONNECTED;
   d4466:	2401      	movs	r4, #1
        if (state == CONNECTING && (1 == hdr.msg_id)) {
            switch (hdr.length) {
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
   d4468:	6168      	str	r0, [r5, #20]
                state = CONNECTED;
   d446a:	776c      	strb	r4, [r5, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
   d446c:	4628      	mov	r0, r5
   d446e:	f000 fad9 	bl	d4a24 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d4472:	f7ff fe1f 	bl	d40b4 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d4476:	f000 fb4d 	bl	d4b14 <BlynkNoOpCbk>
                return true;
   d447a:	4620      	mov	r0, r4
   d447c:	e0ea      	b.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d447e:	1f50      	subs	r0, r2, #5
   d4480:	bf18      	it	ne
   d4482:	2001      	movne	r0, #1
   d4484:	e0e6      	b.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
   d4486:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   d448a:	d903      	bls.n	d4494 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
        // TODO: Flush
        internalReconnect();
   d448c:	4628      	mov	r0, r5
   d448e:	f7ff fea1 	bl	d41d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4492:	e0da      	b.n	d464a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d4494:	f104 0308 	add.w	r3, r4, #8
   d4498:	f023 0307 	bic.w	r3, r3, #7
   d449c:	46e8      	mov	r8, sp
   d449e:	ebad 0d03 	sub.w	sp, sp, r3
   d44a2:	ae04      	add	r6, sp, #16
   d44a4:	4622      	mov	r2, r4
   d44a6:	4631      	mov	r1, r6
   d44a8:	6828      	ldr	r0, [r5, #0]
   d44aa:	f000 fe6e 	bl	d518a <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d44ae:	4284      	cmp	r4, r0
   d44b0:	f04f 0400 	mov.w	r4, #0
   d44b4:	f040 80c4 	bne.w	d4640 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x244>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
   d44b8:	f8b7 300f 	ldrh.w	r3, [r7, #15]
   d44bc:	54f4      	strb	r4, [r6, r3]

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d44be:	f000 fb23 	bl	d4b08 <_Z11BlynkMillisv>

    switch (hdr.type)
   d44c2:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d44c4:	60e8      	str	r0, [r5, #12]

    switch (hdr.type)
   d44c6:	2b11      	cmp	r3, #17
   d44c8:	d072      	beq.n	d45b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
   d44ca:	d806      	bhi.n	d44da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xde>
   d44cc:	2b06      	cmp	r3, #6
   d44ce:	d020      	beq.n	d4512 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x116>
   d44d0:	2b0f      	cmp	r3, #15
   d44d2:	d060      	beq.n	d4596 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
   d44d4:	2b02      	cmp	r3, #2
   d44d6:	d009      	beq.n	d44ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf0>
   d44d8:	e0ae      	b.n	d4638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d44da:	2b29      	cmp	r3, #41	; 0x29
   d44dc:	d025      	beq.n	d452a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
   d44de:	2b37      	cmp	r3, #55	; 0x37
   d44e0:	f000 80b0 	beq.w	d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
   d44e4:	2b14      	cmp	r3, #20
   d44e6:	f040 80a7 	bne.w	d4638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d44ea:	e054      	b.n	d4596 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
   d44ec:	7f6b      	ldrb	r3, [r5, #29]
   d44ee:	b943      	cbnz	r3, d4502 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x106>
            BLYNK_LOG1(BLYNK_F("Ready"));
            state = CONNECTED;
   d44f0:	2301      	movs	r3, #1
   d44f2:	776b      	strb	r3, [r5, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
            }
#endif
            this->sendInfo();
   d44f4:	4628      	mov	r0, r5
   d44f6:	f000 fa95 	bl	d4a24 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d44fa:	f7ff fddb 	bl	d40b4 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d44fe:	f000 fb09 	bl	d4b14 <BlynkNoOpCbk>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d4502:	2300      	movs	r3, #0
   d4504:	21c8      	movs	r1, #200	; 0xc8
   d4506:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d450a:	9302      	str	r3, [sp, #8]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	9100      	str	r1, [sp, #0]
   d4510:	e006      	b.n	d4520 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x124>
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d4512:	23c8      	movs	r3, #200	; 0xc8
   d4514:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d4518:	9300      	str	r3, [sp, #0]
   d451a:	9402      	str	r4, [sp, #8]
   d451c:	9401      	str	r4, [sp, #4]
   d451e:	4623      	mov	r3, r4
   d4520:	4619      	mov	r1, r3
   d4522:	4628      	mov	r0, r5
   d4524:	f000 f9c6 	bl	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d4528:	e08c      	b.n	d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
   d452a:	68ab      	ldr	r3, [r5, #8]
   d452c:	b91b      	cbnz	r3, d4536 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13a>
             redir_serv = (char*)malloc(32);
   d452e:	2020      	movs	r0, #32
   d4530:	f000 fd2c 	bl	d4f8c <malloc>
   d4534:	60a8      	str	r0, [r5, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d4536:	f8b7 400f 	ldrh.w	r4, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d453a:	61fe      	str	r6, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d453c:	4434      	add	r4, r6
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d453e:	42a6      	cmp	r6, r4
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4540:	623c      	str	r4, [r7, #32]
   d4542:	d301      	bcc.n	d4548 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14c>
            return false;
   d4544:	2000      	movs	r0, #0
   d4546:	e07e      	b.n	d4646 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        strncpy(redir_serv, it.asStr(), 32);
   d4548:	2220      	movs	r2, #32
   d454a:	4631      	mov	r1, r6
   d454c:	68a8      	ldr	r0, [r5, #8]
   d454e:	f001 ff99 	bl	d6484 <strncpy>
        if (++it < param.end())
   d4552:	f107 001c 	add.w	r0, r7, #28
   d4556:	f7ff fded 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d455a:	6803      	ldr	r3, [r0, #0]
   d455c:	42a3      	cmp	r3, r4
   d455e:	d207      	bcs.n	d4570 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4560:	69f8      	ldr	r0, [r7, #28]
   d4562:	b118      	cbz	r0, d456c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d4564:	6a3b      	ldr	r3, [r7, #32]
   d4566:	4298      	cmp	r0, r3
   d4568:	d371      	bcc.n	d464e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x252>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d456a:	2000      	movs	r0, #0
            redir_port = it.asLong();
   d456c:	b284      	uxth	r4, r0
   d456e:	e000      	b.n	d4572 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x176>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d4570:	2450      	movs	r4, #80	; 0x50
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4572:	6828      	ldr	r0, [r5, #0]
   d4574:	f001 fb3f 	bl	d5bf6 <_ZN9TCPClient4stopEv>
        strncpy(redir_serv, it.asStr(), 32);
        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
   d4578:	682b      	ldr	r3, [r5, #0]
   d457a:	68aa      	ldr	r2, [r5, #8]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d457c:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d457e:	871c      	strh	r4, [r3, #56]	; 0x38
        state = CONNECTING;
   d4580:	2300      	movs	r3, #0
   d4582:	776b      	strb	r3, [r5, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4584:	f000 fac0 	bl	d4b08 <_Z11BlynkMillisv>
   d4588:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d458c:	3808      	subs	r0, #8
   d458e:	6128      	str	r0, [r5, #16]
   d4590:	60e8      	str	r0, [r5, #12]
   d4592:	6168      	str	r0, [r5, #20]
   d4594:	e056      	b.n	d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d4596:	68fb      	ldr	r3, [r7, #12]
        this->processCmd(inputBuffer, hdr.length);
   d4598:	f8b7 200f 	ldrh.w	r2, [r7, #15]
        state = CONNECTING;
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d459c:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d45a0:	836b      	strh	r3, [r5, #26]
        this->processCmd(inputBuffer, hdr.length);
   d45a2:	4631      	mov	r1, r6
   d45a4:	4628      	mov	r0, r5
   d45a6:	f7ff fe1f 	bl	d41e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d45aa:	2300      	movs	r3, #0
   d45ac:	836b      	strh	r3, [r5, #26]
   d45ae:	e049      	b.n	d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d45b0:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
   d45b4:	713c      	strb	r4, [r7, #4]
   d45b6:	4433      	add	r3, r6
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d45b8:	429e      	cmp	r6, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d45ba:	617e      	str	r6, [r7, #20]
   d45bc:	61bb      	str	r3, [r7, #24]
   d45be:	d241      	bcs.n	d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
   d45c0:	6830      	ldr	r0, [r6, #0]
   d45c2:	60b8      	str	r0, [r7, #8]

        ++it;
   d45c4:	f107 0014 	add.w	r0, r7, #20
   d45c8:	f7ff fdb4 	bl	d4134 <_ZN10BlynkParam8iteratorppEv>
   d45cc:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d45ce:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d45d2:	61fa      	str	r2, [r7, #28]
   d45d4:	1b96      	subs	r6, r2, r6
   d45d6:	1b9e      	subs	r6, r3, r6
        BlynkParam param2(start, length);

        switch (cmd32) {
   d45d8:	4a20      	ldr	r2, [pc, #128]	; (d465c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>)
   d45da:	68bb      	ldr	r3, [r7, #8]
   d45dc:	623e      	str	r6, [r7, #32]
   d45de:	4293      	cmp	r3, r2
   d45e0:	627e      	str	r6, [r7, #36]	; 0x24
   d45e2:	d01d      	beq.n	d4620 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   d45e4:	d80b      	bhi.n	d45fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x202>
   d45e6:	f102 32fd 	add.w	r2, r2, #4261281277	; 0xfdfdfdfd
   d45ea:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   d45ee:	4293      	cmp	r3, r2
   d45f0:	d128      	bne.n	d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d45f2:	f107 011c 	add.w	r1, r7, #28
   d45f6:	1d38      	adds	r0, r7, #4
   d45f8:	f000 fa8b 	bl	d4b12 <BlynkWidgetWrite>
   d45fc:	e022      	b.n	d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
   d45fe:	4a18      	ldr	r2, [pc, #96]	; (d4660 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x264>)
   d4600:	4293      	cmp	r3, r2
   d4602:	d013      	beq.n	d462c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
   d4604:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
   d4608:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d460c:	f502 7280 	add.w	r2, r2, #256	; 0x100
   d4610:	4293      	cmp	r3, r2
   d4612:	d117      	bne.n	d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d4614:	f107 011c 	add.w	r1, r7, #28
   d4618:	1d38      	adds	r0, r7, #4
   d461a:	f000 fa7a 	bl	d4b12 <BlynkWidgetWrite>
   d461e:	e011      	b.n	d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d4620:	f107 011c 	add.w	r1, r7, #28
   d4624:	1d38      	adds	r0, r7, #4
   d4626:	f000 fa74 	bl	d4b12 <BlynkWidgetWrite>
   d462a:	e00b      	b.n	d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d462c:	f107 011c 	add.w	r1, r7, #28
   d4630:	1d38      	adds	r0, r7, #4
   d4632:	f000 fa6e 	bl	d4b12 <BlynkWidgetWrite>
   d4636:	e005      	b.n	d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
   d4638:	4628      	mov	r0, r5
   d463a:	f7ff fdcb 	bl	d41d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d463e:	e001      	b.n	d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
   d4640:	4620      	mov	r0, r4
   d4642:	e000      	b.n	d4646 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
   d4644:	2001      	movs	r0, #1
   d4646:	46c5      	mov	sp, r8
   d4648:	e004      	b.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
   d464a:	2001      	movs	r0, #1
   d464c:	e002      	b.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d464e:	f001 feb9 	bl	d63c4 <atol>
   d4652:	e78b      	b.n	d456c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
        internalReconnect();
    } break;
    }

    return true;
}
   d4654:	3728      	adds	r7, #40	; 0x28
   d4656:	46bd      	mov	sp, r7
   d4658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d465c:	00637472 	.word	0x00637472
   d4660:	6e6f6361 	.word	0x6e6f6361

000d4664 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
   d4664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4668:	4604      	mov	r4, r0
   d466a:	b08a      	sub	sp, #40	; 0x28
   d466c:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
   d466e:	f7ff fd21 	bl	d40b4 <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
   d4672:	7f63      	ldrb	r3, [r4, #29]
   d4674:	2b02      	cmp	r3, #2
   d4676:	f000 809d 	beq.w	d47b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x150>
      avg -= 1;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d467a:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
   d467c:	8b62      	ldrh	r2, [r4, #26]
   d467e:	3301      	adds	r3, #1
   d4680:	b2db      	uxtb	r3, r3
   d4682:	7723      	strb	r3, [r4, #28]
   d4684:	2a00      	cmp	r2, #0
   d4686:	d141      	bne.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d4688:	2b02      	cmp	r3, #2
   d468a:	d83f      	bhi.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d468c:	6820      	ldr	r0, [r4, #0]
   d468e:	f001 f8de 	bl	d584e <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
   d4692:	b140      	cbz	r0, d46a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x42>
        while (avail || conn.available() > 0) {
   d4694:	2d00      	cmp	r5, #0
   d4696:	f040 808f 	bne.w	d47b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
    int available() { return client.available(); }
   d469a:	6820      	ldr	r0, [r4, #0]
   d469c:	f001 fac2 	bl	d5c24 <_ZN9TCPClient9availableEv>
   d46a0:	2800      	cmp	r0, #0
   d46a2:	f300 8089 	bgt.w	d47b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
   d46a6:	f000 fa2f 	bl	d4b08 <_Z11BlynkMillisv>
   d46aa:	4606      	mov	r6, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d46ac:	6820      	ldr	r0, [r4, #0]
   d46ae:	f001 f8ce 	bl	d584e <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
   d46b2:	7f67      	ldrb	r7, [r4, #29]
   d46b4:	2f01      	cmp	r7, #1
   d46b6:	4605      	mov	r5, r0
   d46b8:	d12a      	bne.n	d4710 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xac>
        if (!tconn) {
   d46ba:	b920      	cbnz	r0, d46c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
   d46bc:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d46be:	4620      	mov	r0, r4
   d46c0:	f7ff fd88 	bl	d41d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d46c4:	e072      	b.n	d47ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d46c6:	68e3      	ldr	r3, [r4, #12]
   d46c8:	f644 2238 	movw	r2, #19000	; 0x4a38
   d46cc:	1af3      	subs	r3, r6, r3
   d46ce:	4293      	cmp	r3, r2
   d46d0:	d904      	bls.n	d46dc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x78>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
   d46d2:	4620      	mov	r0, r4
   d46d4:	f7ff fd7e 	bl	d41d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d46d8:	2500      	movs	r5, #0
   d46da:	e067      	b.n	d47ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d46dc:	f242 7210 	movw	r2, #10000	; 0x2710
   d46e0:	4293      	cmp	r3, r2
   d46e2:	d803      	bhi.n	d46ec <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x88>
   d46e4:	6923      	ldr	r3, [r4, #16]
   d46e6:	1af3      	subs	r3, r6, r3
   d46e8:	4293      	cmp	r3, r2
   d46ea:	d90f      	bls.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d46ec:	6963      	ldr	r3, [r4, #20]
   d46ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d46f2:	1af3      	subs	r3, r6, r3
   d46f4:	4293      	cmp	r3, r2
   d46f6:	d909      	bls.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
   d46f8:	2300      	movs	r3, #0
   d46fa:	9302      	str	r3, [sp, #8]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	9300      	str	r3, [sp, #0]
   d4700:	461a      	mov	r2, r3
   d4702:	2106      	movs	r1, #6
   d4704:	4620      	mov	r0, r4
   d4706:	f000 f8d5 	bl	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d470a:	6166      	str	r6, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
   d470c:	2501      	movs	r5, #1
   d470e:	e04d      	b.n	d47ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
   d4710:	2f00      	cmp	r7, #0
   d4712:	d1fb      	bne.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d4714:	6962      	ldr	r2, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d4716:	b150      	cbz	r0, d472e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
   d4718:	1ab6      	subs	r6, r6, r2
   d471a:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d471e:	429e      	cmp	r6, r3
   d4720:	d9f4      	bls.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4722:	6820      	ldr	r0, [r4, #0]
   d4724:	f001 fa67 	bl	d5bf6 <_ZN9TCPClient4stopEv>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
            return false;
   d4728:	463d      	mov	r5, r7
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
   d472a:	7767      	strb	r7, [r4, #29]
            return false;
   d472c:	e03e      	b.n	d47ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d472e:	1ab2      	subs	r2, r6, r2
   d4730:	f241 3388 	movw	r3, #5000	; 0x1388
   d4734:	429a      	cmp	r2, r3
   d4736:	d9e9      	bls.n	d470c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d4738:	6820      	ldr	r0, [r4, #0]
   d473a:	f001 fa5c 	bl	d5bf6 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
   d473e:	f8d4 e000 	ldr.w	lr, [r4]
        domain = d;
        port = p;
    }

    bool connect() {
        if (domain) {
   d4742:	f8de c034 	ldr.w	ip, [lr, #52]	; 0x34
   d4746:	f8be 8038 	ldrh.w	r8, [lr, #56]	; 0x38
   d474a:	f1bc 0f00 	cmp.w	ip, #0
   d474e:	d006      	beq.n	d475e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xfa>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
            return (1 == client.connect(domain, port));
   d4750:	462b      	mov	r3, r5
   d4752:	4642      	mov	r2, r8
   d4754:	4661      	mov	r1, ip
   d4756:	4670      	mov	r0, lr
   d4758:	f001 f8a6 	bl	d58a8 <_ZN9TCPClient7connectEPKctm>
   d475c:	e00e      	b.n	d477c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x118>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d475e:	4b1f      	ldr	r3, [pc, #124]	; (d47dc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x178>)
   d4760:	9304      	str	r3, [sp, #16]
   d4762:	f10e 0720 	add.w	r7, lr, #32
   d4766:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4768:	ad05      	add	r5, sp, #20
   d476a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d476c:	683b      	ldr	r3, [r7, #0]
   d476e:	702b      	strb	r3, [r5, #0]
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            return (1 == client.connect(addr, port));
   d4770:	4642      	mov	r2, r8
   d4772:	4663      	mov	r3, ip
   d4774:	a904      	add	r1, sp, #16
   d4776:	4670      	mov	r0, lr
   d4778:	f001 f9c0 	bl	d5afc <_ZN9TCPClient7connectE9IPAddresstm>
   d477c:	1e43      	subs	r3, r0, #1
   d477e:	425d      	negs	r5, r3
   d4780:	415d      	adcs	r5, r3
   d4782:	b90d      	cbnz	r5, d4788 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x124>
                lastLogin = t;
   d4784:	6166      	str	r6, [r4, #20]
                return false;
   d4786:	e011      	b.n	d47ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d4788:	6867      	ldr	r7, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
   d478a:	2601      	movs	r6, #1
   d478c:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d478e:	4638      	mov	r0, r7
   d4790:	f001 fe70 	bl	d6474 <strlen>
   d4794:	2300      	movs	r3, #0
   d4796:	e88d 0009 	stmia.w	sp, {r0, r3}
   d479a:	9302      	str	r3, [sp, #8]
   d479c:	4632      	mov	r2, r6
   d479e:	463b      	mov	r3, r7
   d47a0:	2102      	movs	r1, #2
   d47a2:	4620      	mov	r0, r4
   d47a4:	f000 f886 	bl	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d47a8:	6923      	ldr	r3, [r4, #16]
   d47aa:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
   d47ac:	7f23      	ldrb	r3, [r4, #28]
   d47ae:	3b01      	subs	r3, #1
   d47b0:	7723      	strb	r3, [r4, #28]
   d47b2:	e00e      	b.n	d47d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
   d47b4:	2500      	movs	r5, #0
   d47b6:	e00c      	b.n	d47d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
   d47b8:	4620      	mov	r0, r4
   d47ba:	f7ff fe1f 	bl	d43fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d47be:	4605      	mov	r5, r0
   d47c0:	2800      	cmp	r0, #0
   d47c2:	f47f af6a 	bne.w	d469a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x36>
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d47c6:	6820      	ldr	r0, [r4, #0]
   d47c8:	f001 fa15 	bl	d5bf6 <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
   d47cc:	f000 f9a2 	bl	d4b14 <BlynkNoOpCbk>
                return false;
   d47d0:	e7ec      	b.n	d47ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            return true;
        }
#endif
    }
    return true;
}
   d47d2:	4628      	mov	r0, r5
   d47d4:	b00a      	add	sp, #40	; 0x28
   d47d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d47da:	bf00      	nop
   d47dc:	000d6bd0 	.word	0x000d6bd0

000d47e0 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d47e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d47e4:	4614      	mov	r4, r2
   d47e6:	b08c      	sub	sp, #48	; 0x30
   d47e8:	4605      	mov	r5, r0
   d47ea:	3404      	adds	r4, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d47ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d47f0:	460f      	mov	r7, r1
   d47f2:	4698      	mov	r8, r3
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d47f4:	f000 f986 	bl	d4b04 <_Z10BlynkDelaym>
   d47f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d47fa:	ae01      	add	r6, sp, #4
   d47fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d47fe:	6823      	ldr	r3, [r4, #0]
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
   d4800:	606f      	str	r7, [r5, #4]
   d4802:	7033      	strb	r3, [r6, #0]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4804:	f000 f980 	bl	d4b08 <_Z11BlynkMillisv>
   d4808:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d480c:	3808      	subs	r0, #8
   d480e:	af01      	add	r7, sp, #4
   d4810:	6128      	str	r0, [r5, #16]
   d4812:	60e8      	str	r0, [r5, #12]
   d4814:	6168      	str	r0, [r5, #20]
   d4816:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4818:	ae07      	add	r6, sp, #28
   d481a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d481c:	683b      	ldr	r3, [r7, #0]
   d481e:	7033      	strb	r3, [r6, #0]
   d4820:	af07      	add	r7, sp, #28
   d4822:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    void config(const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(addr, port);
   d4824:	682c      	ldr	r4, [r5, #0]
    BlynkTransportParticle()
        : domain(NULL), port(0)
    {}

    void begin(IPAddress a, uint16_t p) {
        domain = NULL;
   d4826:	f04f 0e00 	mov.w	lr, #0
   d482a:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
        port = p;
   d482e:	f8a4 8038 	strh.w	r8, [r4, #56]	; 0x38
   d4832:	3420      	adds	r4, #32
   d4834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4836:	6833      	ldr	r3, [r6, #0]
   d4838:	7023      	strb	r3, [r4, #0]

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d483a:	f242 3627 	movw	r6, #8999	; 0x2327

    bool connected() { return state == CONNECTED; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
   d483e:	4674      	mov	r4, lr
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4840:	6828      	ldr	r0, [r5, #0]
   d4842:	f001 f9d8 	bl	d5bf6 <_ZN9TCPClient4stopEv>
   d4846:	776c      	strb	r4, [r5, #29]
        millis_time_t started = BlynkMillis();
   d4848:	f000 f95e 	bl	d4b08 <_Z11BlynkMillisv>
   d484c:	4607      	mov	r7, r0
        while ((state != CONNECTED) &&
   d484e:	7f6b      	ldrb	r3, [r5, #29]
   d4850:	2b01      	cmp	r3, #1
   d4852:	d009      	beq.n	d4868 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
               (BlynkMillis() - started < timeout))
   d4854:	f000 f958 	bl	d4b08 <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d4858:	1bc0      	subs	r0, r0, r7
   d485a:	42b0      	cmp	r0, r6
   d485c:	d804      	bhi.n	d4868 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
               (BlynkMillis() - started < timeout))
        {
            run();
   d485e:	2100      	movs	r1, #0
   d4860:	4628      	mov	r0, r5
   d4862:	f7ff feff 	bl	d4664 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4866:	e7f2      	b.n	d484e <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
        config(auth, addr, port);
        while(this->connect() != true) {}
   d4868:	7f6b      	ldrb	r3, [r5, #29]
   d486a:	2b01      	cmp	r3, #1
   d486c:	d1e8      	bne.n	d4840 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d486e:	b00c      	add	sp, #48	; 0x30
   d4870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4874 <setup>:
#include <blynk.h>
void setup() {
   d4874:	b500      	push	{lr}
   d4876:	b089      	sub	sp, #36	; 0x24
  Blynk.begin("f337d291e55f486baed34896ab9c65d5",IPAddress(167,99,150,124),8080);
   d4878:	237c      	movs	r3, #124	; 0x7c
   d487a:	9300      	str	r3, [sp, #0]
   d487c:	2263      	movs	r2, #99	; 0x63
   d487e:	2396      	movs	r3, #150	; 0x96
   d4880:	21a7      	movs	r1, #167	; 0xa7
   d4882:	a802      	add	r0, sp, #8
   d4884:	f000 fdb0 	bl	d53e8 <_ZN9IPAddressC1Ehhhh>
   d4888:	f641 7390 	movw	r3, #8080	; 0x1f90
   d488c:	aa02      	add	r2, sp, #8
   d488e:	4907      	ldr	r1, [pc, #28]	; (d48ac <setup+0x38>)
   d4890:	4807      	ldr	r0, [pc, #28]	; (d48b0 <setup+0x3c>)
   d4892:	f7ff ffa5 	bl	d47e0 <_ZN13BlynkParticle5beginEPKc9IPAddresst>
  pinMode(D8,INPUT);
   d4896:	2100      	movs	r1, #0
   d4898:	2008      	movs	r0, #8
   d489a:	f001 fb83 	bl	d5fa4 <pinMode>
  pinMode(D6,OUTPUT);
   d489e:	2101      	movs	r1, #1
   d48a0:	2006      	movs	r0, #6
   d48a2:	f001 fb7f 	bl	d5fa4 <pinMode>
}
   d48a6:	b009      	add	sp, #36	; 0x24
   d48a8:	f85d fb04 	ldr.w	pc, [sp], #4
   d48ac:	000d664b 	.word	0x000d664b
   d48b0:	2003e370 	.word	0x2003e370

000d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d48b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d48b8:	b083      	sub	sp, #12
   d48ba:	af00      	add	r7, sp, #0
   d48bc:	4604      	mov	r4, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d48be:	6800      	ldr	r0, [r0, #0]
   d48c0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d48c2:	4689      	mov	r9, r1
   d48c4:	4616      	mov	r6, r2
   d48c6:	469b      	mov	fp, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d48c8:	46ea      	mov	sl, sp
   d48ca:	f000 ffc0 	bl	d584e <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
   d48ce:	2800      	cmp	r0, #0
   d48d0:	d060      	beq.n	d4994 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
   d48d2:	f019 0ffd 	tst.w	r9, #253	; 0xfd
   d48d6:	f000 80a0 	beq.w	d4a1a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x166>
   d48da:	f1b9 0f06 	cmp.w	r9, #6
   d48de:	f000 809c 	beq.w	d4a1a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x166>
   d48e2:	7f63      	ldrb	r3, [r4, #29]
   d48e4:	2b01      	cmp	r3, #1
   d48e6:	d155      	bne.n	d4994 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d48e8:	b916      	cbnz	r6, d48f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d48ea:	8b66      	ldrh	r6, [r4, #26]
   d48ec:	2e00      	cmp	r6, #0
   d48ee:	d056      	beq.n	d499e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d48f0:	f1a9 030c 	sub.w	r3, r9, #12
   d48f4:	2b08      	cmp	r3, #8
   d48f6:	d95a      	bls.n	d49ae <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xfa>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
   d48f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d48fa:	f1bb 0f00 	cmp.w	fp, #0
   d48fe:	bf14      	ite	ne
   d4900:	46a8      	movne	r8, r5
   d4902:	f04f 0800 	moveq.w	r8, #0
   d4906:	2a00      	cmp	r2, #0
   d4908:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d490a:	f108 0305 	add.w	r3, r8, #5
   d490e:	bf14      	ite	ne
   d4910:	4690      	movne	r8, r2
   d4912:	f04f 0800 	moveq.w	r8, #0
   d4916:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d4918:	f108 0307 	add.w	r3, r8, #7
   d491c:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d4920:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d4922:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d4926:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
   d492a:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d492c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d4930:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
   d4934:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
   d4938:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d493c:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
   d4940:	f1bb 0f00 	cmp.w	fp, #0
   d4944:	d052      	beq.n	d49ec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x138>
   d4946:	2d00      	cmp	r5, #0
   d4948:	d050      	beq.n	d49ec <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x138>
        memcpy(buff + pos, data, length);
   d494a:	462a      	mov	r2, r5
   d494c:	4659      	mov	r1, fp
   d494e:	f10d 0005 	add.w	r0, sp, #5
   d4952:	f001 fd49 	bl	d63e8 <memcpy>
        pos += length;
   d4956:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
   d4958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d495a:	2b00      	cmp	r3, #0
   d495c:	d148      	bne.n	d49f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13c>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d495e:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d4960:	4545      	cmp	r5, r8
   d4962:	d251      	bcs.n	d4a08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4964:	ebc5 0208 	rsb	r2, r5, r8
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
   d4968:	687b      	ldr	r3, [r7, #4]
   d496a:	6820      	ldr	r0, [r4, #0]
   d496c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4970:	bf28      	it	cs
   d4972:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4976:	1959      	adds	r1, r3, r5
   d4978:	f000 ff53 	bl	d5822 <_ZN9TCPClient5writeEPKhj>
   d497c:	4606      	mov	r6, r0
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d497e:	2000      	movs	r0, #0
   d4980:	f000 f8c0 	bl	d4b04 <_Z10BlynkDelaym>
        if (w == 0) {
   d4984:	2e00      	cmp	r6, #0
   d4986:	d13d      	bne.n	d4a04 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4988:	6820      	ldr	r0, [r4, #0]
   d498a:	f001 f934 	bl	d5bf6 <_ZN9TCPClient4stopEv>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
#endif
            conn.disconnect();
            state = CONNECTING;
   d498e:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4990:	f000 f8c0 	bl	d4b14 <BlynkNoOpCbk>
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d4994:	370c      	adds	r7, #12
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
   d4996:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d4998:	46bd      	mov	sp, r7
   d499a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d499e:	8b23      	ldrh	r3, [r4, #24]
   d49a0:	3301      	adds	r3, #1
   d49a2:	b29b      	uxth	r3, r3
   d49a4:	b903      	cbnz	r3, d49a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf4>
        msgIdOut = 1;
   d49a6:	2301      	movs	r3, #1
   d49a8:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d49aa:	8b26      	ldrh	r6, [r4, #24]
   d49ac:	e7a0      	b.n	d48f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d49ae:	68e3      	ldr	r3, [r4, #12]
   d49b0:	6922      	ldr	r2, [r4, #16]
   d49b2:	4293      	cmp	r3, r2
   d49b4:	bf38      	it	cc
   d49b6:	4613      	movcc	r3, r2
   d49b8:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d49bc:	f000 f8a4 	bl	d4b08 <_Z11BlynkMillisv>
        if (wait_time >= 0) {
   d49c0:	ebc0 0008 	rsb	r0, r0, r8
   d49c4:	2800      	cmp	r0, #0
   d49c6:	db0a      	blt.n	d49de <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12a>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
   d49c8:	2100      	movs	r1, #0
   d49ca:	4620      	mov	r0, r4
   d49cc:	f7ff fe4a 	bl	d4664 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d49d0:	f000 f89a 	bl	d4b08 <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
   d49d4:	ebc0 0008 	rsb	r0, r0, r8
   d49d8:	2800      	cmp	r0, #0
   d49da:	daf5      	bge.n	d49c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x114>
   d49dc:	e78c      	b.n	d48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
   d49de:	7f21      	ldrb	r1, [r4, #28]
   d49e0:	2900      	cmp	r1, #0
   d49e2:	d189      	bne.n	d48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
            run();
   d49e4:	4620      	mov	r0, r4
   d49e6:	f7ff fe3d 	bl	d4664 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d49ea:	e785      	b.n	d48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d49ec:	2005      	movs	r0, #5
   d49ee:	e7b3      	b.n	d4958 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa4>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
   d49f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d49f2:	2b00      	cmp	r3, #0
   d49f4:	d0b3      	beq.n	d495e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
        memcpy(buff + pos, data2, length2);
   d49f6:	461a      	mov	r2, r3
   d49f8:	687b      	ldr	r3, [r7, #4]
   d49fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d49fc:	4418      	add	r0, r3
   d49fe:	f001 fcf3 	bl	d63e8 <memcpy>
   d4a02:	e7ac      	b.n	d495e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
   d4a04:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d4a06:	e7ab      	b.n	d4960 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        }
    }

#endif

    if (wlen != full_length) {
   d4a08:	d003      	beq.n	d4a12 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15e>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
   d4a0a:	4620      	mov	r0, r4
   d4a0c:	f7ff fbe2 	bl	d41d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4a10:	e7c0      	b.n	d4994 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
    }

    lastActivityOut = BlynkMillis();
   d4a12:	f000 f879 	bl	d4b08 <_Z11BlynkMillisv>
   d4a16:	6120      	str	r0, [r4, #16]
   d4a18:	e7bc      	b.n	d4994 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d4a1a:	2e00      	cmp	r6, #0
   d4a1c:	f47f af6c 	bne.w	d48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
   d4a20:	e763      	b.n	d48ea <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
	...

000d4a24 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
   d4a24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len);
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len);
   d4a26:	2200      	movs	r2, #0
   d4a28:	2349      	movs	r3, #73	; 0x49
   d4a2a:	9300      	str	r3, [sp, #0]
   d4a2c:	9202      	str	r2, [sp, #8]
   d4a2e:	9201      	str	r2, [sp, #4]
   d4a30:	4b03      	ldr	r3, [pc, #12]	; (d4a40 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x1c>)
   d4a32:	2111      	movs	r1, #17
   d4a34:	f7ff ff3e 	bl	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
   d4a38:	b005      	add	sp, #20
   d4a3a:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a3e:	bf00      	nop
   d4a40:	000d65e8 	.word	0x000d65e8

000d4a44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA17_cEEvRKT_>:
     * Sends a push notification to the App
     *
     * @param msg Text of the message
     */
    template<typename T>
    void notify(const T& msg) {
   d4a44:	b530      	push	{r4, r5, lr}
   d4a46:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4a4a:	ab08      	add	r3, sp, #32
   d4a4c:	2400      	movs	r4, #0
   d4a4e:	4605      	mov	r5, r0
   d4a50:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
   d4a52:	a805      	add	r0, sp, #20
   d4a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4a58:	9307      	str	r3, [sp, #28]
   d4a5a:	9406      	str	r4, [sp, #24]
   d4a5c:	f7ff fb79 	bl	d4152 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4a60:	9b06      	ldr	r3, [sp, #24]
   d4a62:	9402      	str	r4, [sp, #8]
   d4a64:	3b01      	subs	r3, #1
   d4a66:	9300      	str	r3, [sp, #0]
   d4a68:	9401      	str	r4, [sp, #4]
   d4a6a:	9b05      	ldr	r3, [sp, #20]
   d4a6c:	4622      	mov	r2, r4
   d4a6e:	210e      	movs	r1, #14
   d4a70:	4628      	mov	r0, r5
   d4a72:	f7ff ff1f 	bl	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4a76:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4a7a:	bd30      	pop	{r4, r5, pc}

000d4a7c <loop>:

void loop() {
   d4a7c:	b508      	push	{r3, lr}
  Blynk.run();
   d4a7e:	2100      	movs	r1, #0
   d4a80:	4809      	ldr	r0, [pc, #36]	; (d4aa8 <loop+0x2c>)
   d4a82:	f7ff fdef 	bl	d4664 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  if(digitalRead(D8) == LOW){
   d4a86:	2008      	movs	r0, #8
   d4a88:	f001 fab6 	bl	d5ff8 <digitalRead>
   d4a8c:	b928      	cbnz	r0, d4a9a <loop+0x1e>
    Blynk.notify("Motion Detected!");
   d4a8e:	4907      	ldr	r1, [pc, #28]	; (d4aac <loop+0x30>)
   d4a90:	4805      	ldr	r0, [pc, #20]	; (d4aa8 <loop+0x2c>)
   d4a92:	f7ff ffd7 	bl	d4a44 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA17_cEEvRKT_>
    digitalWrite(D6, HIGH);
   d4a96:	2101      	movs	r1, #1
   d4a98:	e000      	b.n	d4a9c <loop+0x20>
  }
  else{
    digitalWrite(D6, LOW);
   d4a9a:	2100      	movs	r1, #0
   d4a9c:	2006      	movs	r0, #6
  }
   d4a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if(digitalRead(D8) == LOW){
    Blynk.notify("Motion Detected!");
    digitalWrite(D6, HIGH);
  }
  else{
    digitalWrite(D6, LOW);
   d4aa2:	f001 ba90 	b.w	d5fc6 <digitalWrite>
   d4aa6:	bf00      	nop
   d4aa8:	2003e370 	.word	0x2003e370
   d4aac:	000d666c 	.word	0x000d666c

000d4ab0 <_GLOBAL__sub_I_Blynk>:
  }
   d4ab0:	b538      	push	{r3, r4, r5, lr}

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d4ab2:	4d0f      	ldr	r5, [pc, #60]	; (d4af0 <_GLOBAL__sub_I_Blynk+0x40>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4ab4:	f000 f856 	bl	d4b64 <HAL_Pin_Map>
   d4ab8:	4628      	mov	r0, r5
   d4aba:	f001 f94f 	bl	d5d5c <_ZN9TCPClientC1Ev>
   d4abe:	f105 001c 	add.w	r0, r5, #28
   d4ac2:	2400      	movs	r4, #0
   d4ac4:	f000 fc4c 	bl	d5360 <_ZN9IPAddressC1Ev>
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4ac8:	4a0a      	ldr	r2, [pc, #40]	; (d4af4 <_GLOBAL__sub_I_Blynk+0x44>)
   d4aca:	490b      	ldr	r1, [pc, #44]	; (d4af8 <_GLOBAL__sub_I_Blynk+0x48>)
   d4acc:	636c      	str	r4, [r5, #52]	; 0x34
   d4ace:	4628      	mov	r0, r5
   d4ad0:	872c      	strh	r4, [r5, #56]	; 0x38
   d4ad2:	f001 fb23 	bl	d611c <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d4ad6:	4b09      	ldr	r3, [pc, #36]	; (d4afc <_GLOBAL__sub_I_Blynk+0x4c>)
   d4ad8:	601d      	str	r5, [r3, #0]
   d4ada:	605c      	str	r4, [r3, #4]
   d4adc:	609c      	str	r4, [r3, #8]
   d4ade:	60dc      	str	r4, [r3, #12]
   d4ae0:	611c      	str	r4, [r3, #16]
   d4ae2:	615c      	str	r4, [r3, #20]
   d4ae4:	831c      	strh	r4, [r3, #24]
   d4ae6:	835c      	strh	r4, [r3, #26]
   d4ae8:	771c      	strb	r4, [r3, #28]
   d4aea:	775c      	strb	r4, [r3, #29]
   d4aec:	bd38      	pop	{r3, r4, r5, pc}
   d4aee:	bf00      	nop
   d4af0:	2003e390 	.word	0x2003e390
   d4af4:	2003e36c 	.word	0x2003e36c
   d4af8:	000d4101 	.word	0x000d4101
   d4afc:	2003e370 	.word	0x2003e370

000d4b00 <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   d4b00:	f000 b830 	b.w	d4b64 <HAL_Pin_Map>

000d4b04 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d4b04:	f000 bb68 	b.w	d51d8 <delay>

000d4b08 <_Z11BlynkMillisv>:
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4b08:	f000 b894 	b.w	d4c34 <HAL_Timer_Get_Milli_Seconds>

000d4b0c <_GLOBAL__sub_I__Z10BlynkResetv>:
   d4b0c:	f000 b82a 	b.w	d4b64 <HAL_Pin_Map>

000d4b10 <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
   d4b10:	4770      	bx	lr

000d4b12 <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
   d4b12:	4770      	bx	lr

000d4b14 <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
   d4b14:	4770      	bx	lr
	...

000d4b18 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d4b18:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d4b1a:	bf9a      	itte	ls
   d4b1c:	4b02      	ldrls	r3, [pc, #8]	; (d4b28 <GetReadHandler+0x10>)
   d4b1e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
   d4b22:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
   d4b24:	4770      	bx	lr
   d4b26:	bf00      	nop
   d4b28:	000d6880 	.word	0x000d6880

000d4b2c <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d4b2c:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d4b2e:	bf9a      	itte	ls
   d4b30:	4b02      	ldrls	r3, [pc, #8]	; (d4b3c <GetWriteHandler+0x10>)
   d4b32:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
   d4b36:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
   d4b38:	4770      	bx	lr
   d4b3a:	bf00      	nop
   d4b3c:	000d6680 	.word	0x000d6680

000d4b40 <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d4b40:	f000 b810 	b.w	d4b64 <HAL_Pin_Map>

000d4b44 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <netdb_freeaddrinfo+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	689b      	ldr	r3, [r3, #8]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030268 	.word	0x00030268

000d4b54 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <netdb_getaddrinfo+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	68db      	ldr	r3, [r3, #12]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030268 	.word	0x00030268

000d4b64 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_Pin_Map+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	681b      	ldr	r3, [r3, #0]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	0003022c 	.word	0x0003022c

000d4b74 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_Validate_Pin_Function+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	685b      	ldr	r3, [r3, #4]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	0003022c 	.word	0x0003022c

000d4b84 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <HAL_Pin_Mode+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	689b      	ldr	r3, [r3, #8]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	0003022c 	.word	0x0003022c

000d4b94 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <HAL_Get_Pin_Mode+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	68db      	ldr	r3, [r3, #12]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	0003022c 	.word	0x0003022c

000d4ba4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <HAL_GPIO_Write+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	691b      	ldr	r3, [r3, #16]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	0003022c 	.word	0x0003022c

000d4bb4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <HAL_GPIO_Read+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	695b      	ldr	r3, [r3, #20]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	0003022c 	.word	0x0003022c

000d4bc4 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <HAL_DAC_Write+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	0003022c 	.word	0x0003022c

000d4bd4 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <HAL_ADC_Read+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	0003022c 	.word	0x0003022c

000d4be4 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <HAL_PWM_Write_Ext+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	0003022c 	.word	0x0003022c

000d4bf4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <HAL_SPI_Init+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	69db      	ldr	r3, [r3, #28]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	00030230 	.word	0x00030230

000d4c04 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <HAL_SPI_Is_Enabled+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	6a1b      	ldr	r3, [r3, #32]
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	00030230 	.word	0x00030230

000d4c14 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <if_index_to_name+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	695b      	ldr	r3, [r3, #20]
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	0003026c 	.word	0x0003026c

000d4c24 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <HAL_RNG_GetRandomNumber+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	685b      	ldr	r3, [r3, #4]
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	00030218 	.word	0x00030218

000d4c34 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b02      	ldr	r3, [pc, #8]	; (d4c40 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	695b      	ldr	r3, [r3, #20]
   d4c3c:	9301      	str	r3, [sp, #4]
   d4c3e:	bd08      	pop	{r3, pc}
   d4c40:	00030218 	.word	0x00030218

000d4c44 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <os_thread_is_current+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	689b      	ldr	r3, [r3, #8]
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	00030248 	.word	0x00030248

000d4c54 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <os_thread_join+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	691b      	ldr	r3, [r3, #16]
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	00030248 	.word	0x00030248

000d4c64 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <os_thread_cleanup+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	695b      	ldr	r3, [r3, #20]
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	00030248 	.word	0x00030248

000d4c74 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <os_mutex_create+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	00030248 	.word	0x00030248

000d4c84 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <os_mutex_recursive_create+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	00030248 	.word	0x00030248

000d4c94 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <inet_inet_ntop+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	695b      	ldr	r3, [r3, #20]
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	00030264 	.word	0x00030264

000d4ca4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <inet_htonl+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	6a1b      	ldr	r3, [r3, #32]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	00030264 	.word	0x00030264

000d4cb4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <inet_htons+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	00030264 	.word	0x00030264

000d4cc4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <HAL_USART_Init+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	681b      	ldr	r3, [r3, #0]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	0003023c 	.word	0x0003023c

000d4cd4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <HAL_USART_Write_Data+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	68db      	ldr	r3, [r3, #12]
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	0003023c 	.word	0x0003023c

000d4ce4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <HAL_USART_Available_Data+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	691b      	ldr	r3, [r3, #16]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	0003023c 	.word	0x0003023c

000d4cf4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <HAL_USART_Read_Data+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	695b      	ldr	r3, [r3, #20]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	0003023c 	.word	0x0003023c

000d4d04 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <HAL_USART_Peek_Data+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	699b      	ldr	r3, [r3, #24]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	0003023c 	.word	0x0003023c

000d4d14 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <HAL_USART_Flush_Data+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	69db      	ldr	r3, [r3, #28]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	0003023c 	.word	0x0003023c

000d4d24 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <HAL_USART_Is_Enabled+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	6a1b      	ldr	r3, [r3, #32]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	0003023c 	.word	0x0003023c

000d4d34 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <HAL_USART_Available_Data_For_Write+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	0003023c 	.word	0x0003023c

000d4d44 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <HAL_I2C_Write_Data+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	6a1b      	ldr	r3, [r3, #32]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030228 	.word	0x00030228

000d4d54 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <HAL_I2C_Available_Data+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030228 	.word	0x00030228

000d4d64 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <HAL_I2C_Read_Data+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030228 	.word	0x00030228

000d4d74 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <HAL_I2C_Peek_Data+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030228 	.word	0x00030228

000d4d84 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <HAL_I2C_Flush_Data+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	00030228 	.word	0x00030228

000d4d94 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <HAL_I2C_Is_Enabled+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030228 	.word	0x00030228

000d4da4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <HAL_I2C_Init+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030228 	.word	0x00030228

000d4db4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <sock_setsockopt+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	699b      	ldr	r3, [r3, #24]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030238 	.word	0x00030238

000d4dc4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <sock_close+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	69db      	ldr	r3, [r3, #28]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030238 	.word	0x00030238

000d4dd4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <sock_connect+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	6a1b      	ldr	r3, [r3, #32]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030238 	.word	0x00030238

000d4de4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <sock_recv+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030238 	.word	0x00030238

000d4df4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <sock_send+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030238 	.word	0x00030238

000d4e04 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <sock_socket+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030238 	.word	0x00030238

000d4e14 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <HAL_USB_USART_Init+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	681b      	ldr	r3, [r3, #0]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	0003024c 	.word	0x0003024c

000d4e24 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <HAL_USB_USART_Available_Data+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	691b      	ldr	r3, [r3, #16]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	0003024c 	.word	0x0003024c

000d4e34 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	695b      	ldr	r3, [r3, #20]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	0003024c 	.word	0x0003024c

000d4e44 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_USB_USART_Receive_Data+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	699b      	ldr	r3, [r3, #24]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	0003024c 	.word	0x0003024c

000d4e54 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_USB_USART_Send_Data+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	69db      	ldr	r3, [r3, #28]
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	0003024c 	.word	0x0003024c

000d4e64 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_USB_USART_Flush_Data+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	6a1b      	ldr	r3, [r3, #32]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	0003024c 	.word	0x0003024c

000d4e74 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <log_message+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030260 	.word	0x00030260

000d4e84 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <set_system_mode+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	685b      	ldr	r3, [r3, #4]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030220 	.word	0x00030220

000d4e94 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <system_delay_ms+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	695b      	ldr	r3, [r3, #20]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030220 	.word	0x00030220

000d4ea4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b03      	ldr	r3, [pc, #12]	; (d4eb4 <system_ctrl_set_app_request_handler+0x10>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4eae:	9301      	str	r3, [sp, #4]
   d4eb0:	bd08      	pop	{r3, pc}
   d4eb2:	0000      	.short	0x0000
   d4eb4:	00030220 	.word	0x00030220

000d4eb8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	4b03      	ldr	r3, [pc, #12]	; (d4ec8 <system_ctrl_set_result+0x10>)
   d4ebc:	681b      	ldr	r3, [r3, #0]
   d4ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4ec2:	9301      	str	r3, [sp, #4]
   d4ec4:	bd08      	pop	{r3, pc}
   d4ec6:	0000      	.short	0x0000
   d4ec8:	00030220 	.word	0x00030220

000d4ecc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <network_connect+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	685b      	ldr	r3, [r3, #4]
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	00030240 	.word	0x00030240

000d4edc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <network_connecting+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	689b      	ldr	r3, [r3, #8]
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	00030240 	.word	0x00030240

000d4eec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <network_disconnect+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	68db      	ldr	r3, [r3, #12]
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	00030240 	.word	0x00030240

000d4efc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <network_ready+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	691b      	ldr	r3, [r3, #16]
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	00030240 	.word	0x00030240

000d4f0c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <network_on+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	695b      	ldr	r3, [r3, #20]
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	00030240 	.word	0x00030240

000d4f1c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <network_off+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	699b      	ldr	r3, [r3, #24]
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	00030240 	.word	0x00030240

000d4f2c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <network_listen+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	69db      	ldr	r3, [r3, #28]
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	00030240 	.word	0x00030240

000d4f3c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <network_listening+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	6a1b      	ldr	r3, [r3, #32]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	00030240 	.word	0x00030240

000d4f4c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <network_set_listen_timeout+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	00030240 	.word	0x00030240

000d4f5c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <network_get_listen_timeout+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	00030240 	.word	0x00030240

000d4f6c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <spark_process+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	689b      	ldr	r3, [r3, #8]
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	00030244 	.word	0x00030244

000d4f7c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030244 	.word	0x00030244

000d4f8c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <malloc+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	681b      	ldr	r3, [r3, #0]
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	0003021c 	.word	0x0003021c

000d4f9c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <free+0xc>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	685b      	ldr	r3, [r3, #4]
   d4fa4:	9301      	str	r3, [sp, #4]
   d4fa6:	bd08      	pop	{r3, pc}
   d4fa8:	0003021c 	.word	0x0003021c

000d4fac <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4fac:	b508      	push	{r3, lr}
   d4fae:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <snprintf+0xc>)
   d4fb0:	681b      	ldr	r3, [r3, #0]
   d4fb2:	69db      	ldr	r3, [r3, #28]
   d4fb4:	9301      	str	r3, [sp, #4]
   d4fb6:	bd08      	pop	{r3, pc}
   d4fb8:	0003021c 	.word	0x0003021c

000d4fbc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <__errno+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	0003021c 	.word	0x0003021c

000d4fcc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4fcc:	2200      	movs	r2, #0
   d4fce:	4611      	mov	r1, r2
   d4fd0:	6840      	ldr	r0, [r0, #4]
   d4fd2:	f7ff bfb3 	b.w	d4f3c <network_listening>

000d4fd6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4fd6:	2200      	movs	r2, #0
   d4fd8:	4611      	mov	r1, r2
   d4fda:	6840      	ldr	r0, [r0, #4]
   d4fdc:	f7ff bfbe 	b.w	d4f5c <network_get_listen_timeout>

000d4fe0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4fe0:	2200      	movs	r2, #0
   d4fe2:	6840      	ldr	r0, [r0, #4]
   d4fe4:	f7ff bfb2 	b.w	d4f4c <network_set_listen_timeout>

000d4fe8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4fe8:	2200      	movs	r2, #0
   d4fea:	f081 0101 	eor.w	r1, r1, #1
   d4fee:	6840      	ldr	r0, [r0, #4]
   d4ff0:	f7ff bf9c 	b.w	d4f2c <network_listen>

000d4ff4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4ff4:	2300      	movs	r3, #0
   d4ff6:	461a      	mov	r2, r3
   d4ff8:	4619      	mov	r1, r3
   d4ffa:	6840      	ldr	r0, [r0, #4]
   d4ffc:	f7ff bf8e 	b.w	d4f1c <network_off>

000d5000 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5000:	2300      	movs	r3, #0
   d5002:	461a      	mov	r2, r3
   d5004:	4619      	mov	r1, r3
   d5006:	6840      	ldr	r0, [r0, #4]
   d5008:	f7ff bf80 	b.w	d4f0c <network_on>

000d500c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d500c:	2200      	movs	r2, #0
   d500e:	4611      	mov	r1, r2
   d5010:	6840      	ldr	r0, [r0, #4]
   d5012:	f7ff bf73 	b.w	d4efc <network_ready>

000d5016 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5016:	2200      	movs	r2, #0
   d5018:	4611      	mov	r1, r2
   d501a:	6840      	ldr	r0, [r0, #4]
   d501c:	f7ff bf5e 	b.w	d4edc <network_connecting>

000d5020 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5020:	2200      	movs	r2, #0
   d5022:	2102      	movs	r1, #2
   d5024:	6840      	ldr	r0, [r0, #4]
   d5026:	f7ff bf61 	b.w	d4eec <network_disconnect>

000d502a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d502a:	2300      	movs	r3, #0
   d502c:	461a      	mov	r2, r3
   d502e:	6840      	ldr	r0, [r0, #4]
   d5030:	f7ff bf4c 	b.w	d4ecc <network_connect>

000d5034 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5034:	4b02      	ldr	r3, [pc, #8]	; (d5040 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5036:	2203      	movs	r2, #3
   d5038:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d503a:	4a02      	ldr	r2, [pc, #8]	; (d5044 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d503c:	601a      	str	r2, [r3, #0]
   d503e:	4770      	bx	lr
   d5040:	2003e3cc 	.word	0x2003e3cc
   d5044:	000d6a88 	.word	0x000d6a88

000d5048 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5048:	4770      	bx	lr

000d504a <_ZN8SPIClassD0Ev>:
   d504a:	b510      	push	{r4, lr}
   d504c:	2110      	movs	r1, #16
   d504e:	4604      	mov	r4, r0
   d5050:	f001 f869 	bl	d6126 <_ZdlPvj>
   d5054:	4620      	mov	r0, r4
   d5056:	bd10      	pop	{r4, pc}

000d5058 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5058:	b570      	push	{r4, r5, r6, lr}
   d505a:	4b08      	ldr	r3, [pc, #32]	; (d507c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d505c:	6003      	str	r3, [r0, #0]
   d505e:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5060:	2500      	movs	r5, #0
   d5062:	460e      	mov	r6, r1
   d5064:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5068:	f7ff fe04 	bl	d4c74 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d506c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d506e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5070:	f7ff fdc0 	bl	d4bf4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5074:	60a5      	str	r5, [r4, #8]
}
   d5076:	4620      	mov	r0, r4
   d5078:	bd70      	pop	{r4, r5, r6, pc}
   d507a:	bf00      	nop
   d507c:	000d6abc 	.word	0x000d6abc

000d5080 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5080:	7900      	ldrb	r0, [r0, #4]
   d5082:	f7ff bdbf 	b.w	d4c04 <HAL_SPI_Is_Enabled>
	...

000d5088 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5088:	4b04      	ldr	r3, [pc, #16]	; (d509c <_GLOBAL__sub_I_System+0x14>)
   d508a:	2000      	movs	r0, #0
   d508c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5090:	7018      	strb	r0, [r3, #0]
   d5092:	8058      	strh	r0, [r3, #2]
   d5094:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5096:	f7ff bef5 	b.w	d4e84 <set_system_mode>
   d509a:	bf00      	nop
   d509c:	2003e3d4 	.word	0x2003e3d4

000d50a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d50a0:	4802      	ldr	r0, [pc, #8]	; (d50ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d50a2:	2300      	movs	r3, #0
   d50a4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d50a6:	f7ff bded 	b.w	d4c84 <os_mutex_recursive_create>
   d50aa:	bf00      	nop
   d50ac:	2003e3dc 	.word	0x2003e3dc

000d50b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d50b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50b2:	4606      	mov	r6, r0
   d50b4:	460d      	mov	r5, r1
   d50b6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d50b8:	2400      	movs	r4, #0
  while (size--) {
   d50ba:	42bd      	cmp	r5, r7
   d50bc:	d00c      	beq.n	d50d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d50be:	6833      	ldr	r3, [r6, #0]
   d50c0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d50c4:	689b      	ldr	r3, [r3, #8]
   d50c6:	4630      	mov	r0, r6
   d50c8:	4798      	blx	r3
     if (chunk>=0)
   d50ca:	2800      	cmp	r0, #0
   d50cc:	db01      	blt.n	d50d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d50ce:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d50d0:	e7f3      	b.n	d50ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d50d2:	2c00      	cmp	r4, #0
   d50d4:	bf08      	it	eq
   d50d6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d50d8:	4620      	mov	r0, r4
   d50da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d50dc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d50dc:	b570      	push	{r4, r5, r6, lr}
   d50de:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d50e0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d50e2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d50e4:	b149      	cbz	r1, d50fa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d50e6:	f001 f9c5 	bl	d6474 <strlen>
   d50ea:	682b      	ldr	r3, [r5, #0]
   d50ec:	4602      	mov	r2, r0
   d50ee:	4621      	mov	r1, r4
   d50f0:	4628      	mov	r0, r5
   d50f2:	68db      	ldr	r3, [r3, #12]
    }
   d50f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d50f8:	4718      	bx	r3
    }
   d50fa:	bd70      	pop	{r4, r5, r6, pc}

000d50fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d50fc:	6803      	ldr	r3, [r0, #0]
   d50fe:	689b      	ldr	r3, [r3, #8]
   d5100:	4718      	bx	r3

000d5102 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5102:	b530      	push	{r4, r5, lr}
   d5104:	b08b      	sub	sp, #44	; 0x2c
   d5106:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5108:	2100      	movs	r1, #0
   d510a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d510e:	2a01      	cmp	r2, #1
   d5110:	bf98      	it	ls
   d5112:	220a      	movls	r2, #10
   d5114:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5118:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d511c:	fb05 3312 	mls	r3, r5, r2, r3
   d5120:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5124:	2b09      	cmp	r3, #9
   d5126:	bf94      	ite	ls
   d5128:	3330      	addls	r3, #48	; 0x30
   d512a:	3337      	addhi	r3, #55	; 0x37
   d512c:	b2db      	uxtb	r3, r3
   d512e:	4621      	mov	r1, r4
   d5130:	f804 3901 	strb.w	r3, [r4], #-1
   d5134:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5136:	2d00      	cmp	r5, #0
   d5138:	d1ee      	bne.n	d5118 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d513a:	f7ff ffcf 	bl	d50dc <_ZN5Print5writeEPKc>
}
   d513e:	b00b      	add	sp, #44	; 0x2c
   d5140:	bd30      	pop	{r4, r5, pc}

000d5142 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5142:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5144:	b92a      	cbnz	r2, d5152 <_ZN5Print5printEmi+0x10>
   d5146:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5148:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d514c:	689b      	ldr	r3, [r3, #8]
   d514e:	b2c9      	uxtb	r1, r1
   d5150:	4718      	bx	r3
  else return printNumber(n, base);
   d5152:	b2d2      	uxtb	r2, r2
}
   d5154:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5158:	f7ff bfd3 	b.w	d5102 <_ZN5Print11printNumberEmh>

000d515c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d515c:	f7ff bff1 	b.w	d5142 <_ZN5Print5printEmi>

000d5160 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d5160:	b510      	push	{r4, lr}
   d5162:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5164:	f7ff fd66 	bl	d4c34 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d5168:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d516a:	6823      	ldr	r3, [r4, #0]
   d516c:	4620      	mov	r0, r4
   d516e:	695b      	ldr	r3, [r3, #20]
   d5170:	4798      	blx	r3
    if (c >= 0) return c;
   d5172:	2800      	cmp	r0, #0
   d5174:	da08      	bge.n	d5188 <_ZN6Stream9timedReadEv+0x28>
   d5176:	f7ff fd5d 	bl	d4c34 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d517a:	68e3      	ldr	r3, [r4, #12]
   d517c:	1ac0      	subs	r0, r0, r3
   d517e:	68a3      	ldr	r3, [r4, #8]
   d5180:	4298      	cmp	r0, r3
   d5182:	d3f2      	bcc.n	d516a <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d5184:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5188:	bd10      	pop	{r4, pc}

000d518a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d518a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d518e:	4680      	mov	r8, r0
   d5190:	460d      	mov	r5, r1
   d5192:	188f      	adds	r7, r1, r2
   d5194:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   d5196:	42bc      	cmp	r4, r7
   d5198:	eba4 0605 	sub.w	r6, r4, r5
   d519c:	d007      	beq.n	d51ae <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   d519e:	4640      	mov	r0, r8
   d51a0:	f7ff ffde 	bl	d5160 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d51a4:	2800      	cmp	r0, #0
   d51a6:	db02      	blt.n	d51ae <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   d51a8:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   d51ac:	e7f3      	b.n	d5196 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   d51ae:	4630      	mov	r0, r6
   d51b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d51b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d51b4:	4b01      	ldr	r3, [pc, #4]	; (d51bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d51b6:	4a02      	ldr	r2, [pc, #8]	; (d51c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d51b8:	601a      	str	r2, [r3, #0]
   d51ba:	4770      	bx	lr
   d51bc:	2003e3e0 	.word	0x2003e3e0
   d51c0:	000d6b76 	.word	0x000d6b76

000d51c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d51c4:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d51c6:	681a      	ldr	r2, [r3, #0]
   d51c8:	4b02      	ldr	r3, [pc, #8]	; (d51d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d51ca:	601a      	str	r2, [r3, #0]
   d51cc:	4770      	bx	lr
   d51ce:	bf00      	nop
   d51d0:	2003e300 	.word	0x2003e300
   d51d4:	2003e3e4 	.word	0x2003e3e4

000d51d8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d51d8:	2100      	movs	r1, #0
   d51da:	f7ff be5b 	b.w	d4e94 <system_delay_ms>

000d51de <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d51de:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d51e0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d51e2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d51e4:	b113      	cbz	r3, d51ec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d51e6:	2203      	movs	r2, #3
   d51e8:	4601      	mov	r1, r0
   d51ea:	4798      	blx	r3
    }
   d51ec:	4620      	mov	r0, r4
   d51ee:	bd10      	pop	{r4, pc}

000d51f0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d51f0:	b510      	push	{r4, lr}
   d51f2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51f4:	f7ff fff3 	bl	d51de <_ZNSt14_Function_baseD1Ev>
   d51f8:	4620      	mov	r0, r4
   d51fa:	bd10      	pop	{r4, pc}

000d51fc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d51fc:	4803      	ldr	r0, [pc, #12]	; (d520c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d51fe:	4a04      	ldr	r2, [pc, #16]	; (d5210 <_GLOBAL__sub_I_RGB+0x14>)
   d5200:	4904      	ldr	r1, [pc, #16]	; (d5214 <_GLOBAL__sub_I_RGB+0x18>)
   d5202:	2300      	movs	r3, #0
   d5204:	6083      	str	r3, [r0, #8]
   d5206:	f000 bf89 	b.w	d611c <__aeabi_atexit>
   d520a:	bf00      	nop
   d520c:	2003e3e8 	.word	0x2003e3e8
   d5210:	2003e36c 	.word	0x2003e36c
   d5214:	000d51f1 	.word	0x000d51f1

000d5218 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5218:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d521a:	4b0c      	ldr	r3, [pc, #48]	; (d524c <serialEventRun+0x34>)
   d521c:	b133      	cbz	r3, d522c <serialEventRun+0x14>
   d521e:	f000 f959 	bl	d54d4 <_Z16_fetch_usbserialv>
   d5222:	6803      	ldr	r3, [r0, #0]
   d5224:	691b      	ldr	r3, [r3, #16]
   d5226:	4798      	blx	r3
   d5228:	2800      	cmp	r0, #0
   d522a:	dc09      	bgt.n	d5240 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d522c:	4b08      	ldr	r3, [pc, #32]	; (d5250 <serialEventRun+0x38>)
   d522e:	b163      	cbz	r3, d524a <serialEventRun+0x32>
   d5230:	f000 f9d2 	bl	d55d8 <_Z22__fetch_global_Serial1v>
   d5234:	6803      	ldr	r3, [r0, #0]
   d5236:	691b      	ldr	r3, [r3, #16]
   d5238:	4798      	blx	r3
   d523a:	2800      	cmp	r0, #0
   d523c:	dc03      	bgt.n	d5246 <serialEventRun+0x2e>
   d523e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5240:	f3af 8000 	nop.w
   d5244:	e7f2      	b.n	d522c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5246:	f3af 8000 	nop.w
   d524a:	bd08      	pop	{r3, pc}
	...

000d5254 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5254:	b508      	push	{r3, lr}
	serialEventRun();
   d5256:	f7ff ffdf 	bl	d5218 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d525a:	f7ff fceb 	bl	d4c34 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d525e:	4b01      	ldr	r3, [pc, #4]	; (d5264 <_post_loop+0x10>)
   d5260:	6018      	str	r0, [r3, #0]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	2003e734 	.word	0x2003e734

000d5268 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5268:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d526a:	2300      	movs	r3, #0
   d526c:	9300      	str	r3, [sp, #0]
   d526e:	461a      	mov	r2, r3
   d5270:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5274:	f7ff fe20 	bl	d4eb8 <system_ctrl_set_result>
}
   d5278:	b003      	add	sp, #12
   d527a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5280 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5280:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5282:	8843      	ldrh	r3, [r0, #2]
   d5284:	2b0a      	cmp	r3, #10
   d5286:	d008      	beq.n	d529a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5288:	2b50      	cmp	r3, #80	; 0x50
   d528a:	d109      	bne.n	d52a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d528c:	4b09      	ldr	r3, [pc, #36]	; (d52b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d528e:	681b      	ldr	r3, [r3, #0]
   d5290:	b13b      	cbz	r3, d52a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5292:	b003      	add	sp, #12
   d5294:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5298:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d529a:	f7ff ffe5 	bl	d5268 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d529e:	e006      	b.n	d52ae <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52a0:	2300      	movs	r3, #0
   d52a2:	9300      	str	r3, [sp, #0]
   d52a4:	461a      	mov	r2, r3
   d52a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52aa:	f7ff fe05 	bl	d4eb8 <system_ctrl_set_result>
        break;
    }
}
   d52ae:	b003      	add	sp, #12
   d52b0:	f85d fb04 	ldr.w	pc, [sp], #4
   d52b4:	2003e3f8 	.word	0x2003e3f8

000d52b8 <module_user_init_hook>:

void module_user_init_hook()
{
   d52b8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d52ba:	f7ff fcb3 	bl	d4c24 <HAL_RNG_GetRandomNumber>
   d52be:	4604      	mov	r4, r0
    srand(seed);
   d52c0:	f001 f8a6 	bl	d6410 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d52c4:	4b07      	ldr	r3, [pc, #28]	; (d52e4 <module_user_init_hook+0x2c>)
   d52c6:	b113      	cbz	r3, d52ce <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d52c8:	4620      	mov	r0, r4
   d52ca:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d52ce:	2100      	movs	r1, #0
   d52d0:	4804      	ldr	r0, [pc, #16]	; (d52e4 <module_user_init_hook+0x2c>)
   d52d2:	f7ff fe53 	bl	d4f7c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d52d6:	2100      	movs	r1, #0
   d52d8:	4803      	ldr	r0, [pc, #12]	; (d52e8 <module_user_init_hook+0x30>)
}
   d52da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d52de:	f7ff bde1 	b.w	d4ea4 <system_ctrl_set_app_request_handler>
   d52e2:	bf00      	nop
   d52e4:	00000000 	.word	0x00000000
   d52e8:	000d5281 	.word	0x000d5281

000d52ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d52ec:	4770      	bx	lr

000d52ee <_ZN9IPAddressD0Ev>:
   d52ee:	b510      	push	{r4, lr}
   d52f0:	2118      	movs	r1, #24
   d52f2:	4604      	mov	r4, r0
   d52f4:	f000 ff17 	bl	d6126 <_ZdlPvj>
   d52f8:	4620      	mov	r0, r4
   d52fa:	bd10      	pop	{r4, pc}

000d52fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d52fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d52fe:	7d03      	ldrb	r3, [r0, #20]
   d5300:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5302:	b08d      	sub	sp, #52	; 0x34
   d5304:	460e      	mov	r6, r1
   d5306:	f100 0704 	add.w	r7, r0, #4
   d530a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d530e:	d002      	beq.n	d5316 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5310:	f100 0508 	add.w	r5, r0, #8
   d5314:	e018      	b.n	d5348 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5316:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5318:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d531a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d531e:	232f      	movs	r3, #47	; 0x2f
   d5320:	462a      	mov	r2, r5
   d5322:	200a      	movs	r0, #10
   d5324:	f7ff fcb6 	bl	d4c94 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5328:	4628      	mov	r0, r5
   d532a:	f001 f8a3 	bl	d6474 <strlen>
   d532e:	6833      	ldr	r3, [r6, #0]
   d5330:	4602      	mov	r2, r0
   d5332:	68db      	ldr	r3, [r3, #12]
   d5334:	4629      	mov	r1, r5
   d5336:	4630      	mov	r0, r6
   d5338:	4798      	blx	r3
   d533a:	e00f      	b.n	d535c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d533c:	b124      	cbz	r4, d5348 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d533e:	212e      	movs	r1, #46	; 0x2e
   d5340:	4630      	mov	r0, r6
   d5342:	f7ff fedb 	bl	d50fc <_ZN5Print5printEc>
   d5346:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5348:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d534c:	220a      	movs	r2, #10
   d534e:	4630      	mov	r0, r6
   d5350:	f7ff ff04 	bl	d515c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5354:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5356:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5358:	d1f0      	bne.n	d533c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d535a:	4620      	mov	r0, r4
    }
    return n;
}
   d535c:	b00d      	add	sp, #52	; 0x34
   d535e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5360 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5360:	b510      	push	{r4, lr}
   d5362:	4b05      	ldr	r3, [pc, #20]	; (d5378 <_ZN9IPAddressC1Ev+0x18>)
   d5364:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5366:	2211      	movs	r2, #17
   d5368:	f840 3b04 	str.w	r3, [r0], #4
   d536c:	2100      	movs	r1, #0
   d536e:	f001 f846 	bl	d63fe <memset>
{
    clear();
}
   d5372:	4620      	mov	r0, r4
   d5374:	bd10      	pop	{r4, pc}
   d5376:	bf00      	nop
   d5378:	000d6bd0 	.word	0x000d6bd0

000d537c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d537c:	4603      	mov	r3, r0
   d537e:	4a07      	ldr	r2, [pc, #28]	; (d539c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5380:	b510      	push	{r4, lr}
   d5382:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5386:	f101 0210 	add.w	r2, r1, #16
   d538a:	f851 4b04 	ldr.w	r4, [r1], #4
   d538e:	f843 4b04 	str.w	r4, [r3], #4
   d5392:	4291      	cmp	r1, r2
   d5394:	d1f9      	bne.n	d538a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5396:	780a      	ldrb	r2, [r1, #0]
   d5398:	701a      	strb	r2, [r3, #0]
}
   d539a:	bd10      	pop	{r4, pc}
   d539c:	000d6bd0 	.word	0x000d6bd0

000d53a0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d53a0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d53a2:	2b04      	cmp	r3, #4
   d53a4:	d101      	bne.n	d53aa <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d53a6:	6840      	ldr	r0, [r0, #4]
   d53a8:	e008      	b.n	d53bc <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d53aa:	2b06      	cmp	r3, #6
   d53ac:	d10a      	bne.n	d53c4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d53ae:	6843      	ldr	r3, [r0, #4]
   d53b0:	b153      	cbz	r3, d53c8 <_ZNK9IPAddresscvbEv+0x28>
   d53b2:	6883      	ldr	r3, [r0, #8]
   d53b4:	b143      	cbz	r3, d53c8 <_ZNK9IPAddresscvbEv+0x28>
   d53b6:	68c3      	ldr	r3, [r0, #12]
   d53b8:	b133      	cbz	r3, d53c8 <_ZNK9IPAddresscvbEv+0x28>
   d53ba:	6900      	ldr	r0, [r0, #16]
   d53bc:	3000      	adds	r0, #0
   d53be:	bf18      	it	ne
   d53c0:	2001      	movne	r0, #1
   d53c2:	4770      	bx	lr
   d53c4:	2000      	movs	r0, #0
   d53c6:	4770      	bx	lr
   d53c8:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d53ca:	4770      	bx	lr

000d53cc <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d53cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d53ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d53d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d53d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d53da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d53de:	2304      	movs	r3, #4
   d53e0:	6041      	str	r1, [r0, #4]
   d53e2:	7503      	strb	r3, [r0, #20]
   d53e4:	bd10      	pop	{r4, pc}
	...

000d53e8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d53e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d53ea:	4d04      	ldr	r5, [pc, #16]	; (d53fc <_ZN9IPAddressC1Ehhhh+0x14>)
   d53ec:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d53ee:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d53f2:	9500      	str	r5, [sp, #0]
   d53f4:	f7ff ffea 	bl	d53cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d53f8:	b003      	add	sp, #12
   d53fa:	bd30      	pop	{r4, r5, pc}
   d53fc:	000d6bd0 	.word	0x000d6bd0

000d5400 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5400:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5402:	780d      	ldrb	r5, [r1, #0]
   d5404:	788b      	ldrb	r3, [r1, #2]
   d5406:	784a      	ldrb	r2, [r1, #1]
   d5408:	78c9      	ldrb	r1, [r1, #3]
   d540a:	9100      	str	r1, [sp, #0]
   d540c:	4629      	mov	r1, r5
   d540e:	f7ff ffdd 	bl	d53cc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5412:	b003      	add	sp, #12
   d5414:	bd30      	pop	{r4, r5, pc}

000d5416 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5416:	7441      	strb	r1, [r0, #17]
   d5418:	4770      	bx	lr

000d541a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d541a:	4770      	bx	lr

000d541c <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d541c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d541e:	2100      	movs	r1, #0
   d5420:	7c00      	ldrb	r0, [r0, #16]
   d5422:	f7ff fd0f 	bl	d4e44 <HAL_USB_USART_Receive_Data>
}
   d5426:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d542a:	bf28      	it	cs
   d542c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5430:	bd08      	pop	{r3, pc}

000d5432 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5432:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5434:	2101      	movs	r1, #1
   d5436:	7c00      	ldrb	r0, [r0, #16]
   d5438:	f7ff fd04 	bl	d4e44 <HAL_USB_USART_Receive_Data>
}
   d543c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5440:	bf28      	it	cs
   d5442:	f04f 30ff 	movcs.w	r0, #4294967295
   d5446:	bd08      	pop	{r3, pc}

000d5448 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5448:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d544a:	7c00      	ldrb	r0, [r0, #16]
   d544c:	f7ff fcf2 	bl	d4e34 <HAL_USB_USART_Available_Data_For_Write>
}
   d5450:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5454:	bd08      	pop	{r3, pc}

000d5456 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5456:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5458:	7c00      	ldrb	r0, [r0, #16]
   d545a:	f7ff fce3 	bl	d4e24 <HAL_USB_USART_Available_Data>
}
   d545e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5462:	bd08      	pop	{r3, pc}

000d5464 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5464:	7c00      	ldrb	r0, [r0, #16]
   d5466:	f7ff bcfd 	b.w	d4e64 <HAL_USB_USART_Flush_Data>

000d546a <_ZN9USBSerialD0Ev>:
   d546a:	b510      	push	{r4, lr}
   d546c:	2114      	movs	r1, #20
   d546e:	4604      	mov	r4, r0
   d5470:	f000 fe59 	bl	d6126 <_ZdlPvj>
   d5474:	4620      	mov	r0, r4
   d5476:	bd10      	pop	{r4, pc}

000d5478 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5478:	b538      	push	{r3, r4, r5, lr}
   d547a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d547c:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d547e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5480:	f7ff fcd8 	bl	d4e34 <HAL_USB_USART_Available_Data_For_Write>
   d5484:	2800      	cmp	r0, #0
   d5486:	dc01      	bgt.n	d548c <_ZN9USBSerial5writeEh+0x14>
   d5488:	7c60      	ldrb	r0, [r4, #17]
   d548a:	b128      	cbz	r0, d5498 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d548c:	4629      	mov	r1, r5
   d548e:	7c20      	ldrb	r0, [r4, #16]
   d5490:	f7ff fce0 	bl	d4e54 <HAL_USB_USART_Send_Data>
   d5494:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5498:	bd38      	pop	{r3, r4, r5, pc}
	...

000d549c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d549c:	b510      	push	{r4, lr}
   d549e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d54a0:	2300      	movs	r3, #0
   d54a2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d54a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54a8:	60a3      	str	r3, [r4, #8]
   d54aa:	4b05      	ldr	r3, [pc, #20]	; (d54c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d54ac:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d54ae:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d54b0:	4608      	mov	r0, r1
{
  _serial = serial;
   d54b2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d54b4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d54b6:	4611      	mov	r1, r2
   d54b8:	f7ff fcac 	bl	d4e14 <HAL_USB_USART_Init>
}
   d54bc:	4620      	mov	r0, r4
   d54be:	bd10      	pop	{r4, pc}
   d54c0:	000d6be4 	.word	0x000d6be4

000d54c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d54c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d54c6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d54c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d54ca:	2100      	movs	r1, #0
   d54cc:	f000 ff97 	bl	d63fe <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d54d0:	4620      	mov	r0, r4
   d54d2:	bd10      	pop	{r4, pc}

000d54d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d54d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54d6:	4d0e      	ldr	r5, [pc, #56]	; (d5510 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d54d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d54da:	a801      	add	r0, sp, #4
   d54dc:	f7ff fff2 	bl	d54c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54e0:	6829      	ldr	r1, [r5, #0]
   d54e2:	f011 0401 	ands.w	r4, r1, #1
   d54e6:	d110      	bne.n	d550a <_Z16_fetch_usbserialv+0x36>
   d54e8:	4628      	mov	r0, r5
   d54ea:	f7fe fdda 	bl	d40a2 <__cxa_guard_acquire>
   d54ee:	b160      	cbz	r0, d550a <_Z16_fetch_usbserialv+0x36>
   d54f0:	aa01      	add	r2, sp, #4
   d54f2:	4621      	mov	r1, r4
   d54f4:	4807      	ldr	r0, [pc, #28]	; (d5514 <_Z16_fetch_usbserialv+0x40>)
   d54f6:	f7ff ffd1 	bl	d549c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d54fa:	4628      	mov	r0, r5
   d54fc:	f7fe fdd6 	bl	d40ac <__cxa_guard_release>
   d5500:	4a05      	ldr	r2, [pc, #20]	; (d5518 <_Z16_fetch_usbserialv+0x44>)
   d5502:	4906      	ldr	r1, [pc, #24]	; (d551c <_Z16_fetch_usbserialv+0x48>)
   d5504:	4803      	ldr	r0, [pc, #12]	; (d5514 <_Z16_fetch_usbserialv+0x40>)
   d5506:	f000 fe09 	bl	d611c <__aeabi_atexit>
	return _usbserial;
}
   d550a:	4802      	ldr	r0, [pc, #8]	; (d5514 <_Z16_fetch_usbserialv+0x40>)
   d550c:	b007      	add	sp, #28
   d550e:	bd30      	pop	{r4, r5, pc}
   d5510:	2003e3fc 	.word	0x2003e3fc
   d5514:	2003e400 	.word	0x2003e400
   d5518:	2003e36c 	.word	0x2003e36c
   d551c:	000d541b 	.word	0x000d541b

000d5520 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5520:	4770      	bx	lr

000d5522 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5522:	7441      	strb	r1, [r0, #17]
   d5524:	4770      	bx	lr

000d5526 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5526:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5528:	7c00      	ldrb	r0, [r0, #16]
   d552a:	f7ff fc03 	bl	d4d34 <HAL_USART_Available_Data_For_Write>
}
   d552e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5532:	bd08      	pop	{r3, pc}

000d5534 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5534:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5536:	7c00      	ldrb	r0, [r0, #16]
   d5538:	f7ff fbd4 	bl	d4ce4 <HAL_USART_Available_Data>
}
   d553c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5540:	bd08      	pop	{r3, pc}

000d5542 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5542:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5544:	7c00      	ldrb	r0, [r0, #16]
   d5546:	f7ff fbdd 	bl	d4d04 <HAL_USART_Peek_Data>
}
   d554a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d554e:	bf28      	it	cs
   d5550:	f04f 30ff 	movcs.w	r0, #4294967295
   d5554:	bd08      	pop	{r3, pc}

000d5556 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5556:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5558:	7c00      	ldrb	r0, [r0, #16]
   d555a:	f7ff fbcb 	bl	d4cf4 <HAL_USART_Read_Data>
}
   d555e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5562:	bf28      	it	cs
   d5564:	f04f 30ff 	movcs.w	r0, #4294967295
   d5568:	bd08      	pop	{r3, pc}

000d556a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d556a:	7c00      	ldrb	r0, [r0, #16]
   d556c:	f7ff bbd2 	b.w	d4d14 <HAL_USART_Flush_Data>

000d5570 <_ZN11USARTSerialD0Ev>:
   d5570:	b510      	push	{r4, lr}
   d5572:	2114      	movs	r1, #20
   d5574:	4604      	mov	r4, r0
   d5576:	f000 fdd6 	bl	d6126 <_ZdlPvj>
   d557a:	4620      	mov	r0, r4
   d557c:	bd10      	pop	{r4, pc}

000d557e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d557e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5580:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5582:	4604      	mov	r4, r0
   d5584:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5586:	b925      	cbnz	r5, d5592 <_ZN11USARTSerial5writeEh+0x14>
   d5588:	7c00      	ldrb	r0, [r0, #16]
   d558a:	f7ff fbd3 	bl	d4d34 <HAL_USART_Available_Data_For_Write>
   d558e:	2800      	cmp	r0, #0
   d5590:	dd05      	ble.n	d559e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5592:	4631      	mov	r1, r6
   d5594:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d559a:	f7ff bb9b 	b.w	d4cd4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d559e:	4628      	mov	r0, r5
   d55a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d55a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d55a4:	b510      	push	{r4, lr}
   d55a6:	4604      	mov	r4, r0
   d55a8:	4608      	mov	r0, r1
   d55aa:	4611      	mov	r1, r2
   d55ac:	2200      	movs	r2, #0
   d55ae:	6062      	str	r2, [r4, #4]
   d55b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55b4:	60a2      	str	r2, [r4, #8]
   d55b6:	4a05      	ldr	r2, [pc, #20]	; (d55cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d55b8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d55ba:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d55bc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d55be:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d55c0:	461a      	mov	r2, r3
   d55c2:	f7ff fb7f 	bl	d4cc4 <HAL_USART_Init>
}
   d55c6:	4620      	mov	r0, r4
   d55c8:	bd10      	pop	{r4, pc}
   d55ca:	bf00      	nop
   d55cc:	000d6c14 	.word	0x000d6c14

000d55d0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d55d0:	7c00      	ldrb	r0, [r0, #16]
   d55d2:	f7ff bba7 	b.w	d4d24 <HAL_USART_Is_Enabled>
	...

000d55d8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d55d8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d55da:	4d0c      	ldr	r5, [pc, #48]	; (d560c <_Z22__fetch_global_Serial1v+0x34>)
   d55dc:	6829      	ldr	r1, [r5, #0]
   d55de:	f011 0401 	ands.w	r4, r1, #1
   d55e2:	d111      	bne.n	d5608 <_Z22__fetch_global_Serial1v+0x30>
   d55e4:	4628      	mov	r0, r5
   d55e6:	f7fe fd5c 	bl	d40a2 <__cxa_guard_acquire>
   d55ea:	b168      	cbz	r0, d5608 <_Z22__fetch_global_Serial1v+0x30>
   d55ec:	4a08      	ldr	r2, [pc, #32]	; (d5610 <_Z22__fetch_global_Serial1v+0x38>)
   d55ee:	4b09      	ldr	r3, [pc, #36]	; (d5614 <_Z22__fetch_global_Serial1v+0x3c>)
   d55f0:	4809      	ldr	r0, [pc, #36]	; (d5618 <_Z22__fetch_global_Serial1v+0x40>)
   d55f2:	4621      	mov	r1, r4
   d55f4:	f7ff ffd6 	bl	d55a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d55f8:	4628      	mov	r0, r5
   d55fa:	f7fe fd57 	bl	d40ac <__cxa_guard_release>
   d55fe:	4a07      	ldr	r2, [pc, #28]	; (d561c <_Z22__fetch_global_Serial1v+0x44>)
   d5600:	4907      	ldr	r1, [pc, #28]	; (d5620 <_Z22__fetch_global_Serial1v+0x48>)
   d5602:	4805      	ldr	r0, [pc, #20]	; (d5618 <_Z22__fetch_global_Serial1v+0x40>)
   d5604:	f000 fd8a 	bl	d611c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5608:	4803      	ldr	r0, [pc, #12]	; (d5618 <_Z22__fetch_global_Serial1v+0x40>)
   d560a:	bd38      	pop	{r3, r4, r5, pc}
   d560c:	2003e4ac 	.word	0x2003e4ac
   d5610:	2003e4b0 	.word	0x2003e4b0
   d5614:	2003e428 	.word	0x2003e428
   d5618:	2003e414 	.word	0x2003e414
   d561c:	2003e36c 	.word	0x2003e36c
   d5620:	000d5521 	.word	0x000d5521

000d5624 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5624:	4770      	bx	lr

000d5626 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5628:	4606      	mov	r6, r0
   d562a:	4615      	mov	r5, r2
   d562c:	460c      	mov	r4, r1
   d562e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5630:	42bc      	cmp	r4, r7
   d5632:	d006      	beq.n	d5642 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5634:	6833      	ldr	r3, [r6, #0]
   d5636:	f814 1b01 	ldrb.w	r1, [r4], #1
   d563a:	689b      	ldr	r3, [r3, #8]
   d563c:	4630      	mov	r0, r6
   d563e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5640:	e7f6      	b.n	d5630 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5642:	4628      	mov	r0, r5
   d5644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5646 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5646:	2200      	movs	r2, #0
   d5648:	7c00      	ldrb	r0, [r0, #16]
   d564a:	f7ff bb7b 	b.w	d4d44 <HAL_I2C_Write_Data>

000d564e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d564e:	2100      	movs	r1, #0
   d5650:	7c00      	ldrb	r0, [r0, #16]
   d5652:	f7ff bb7f 	b.w	d4d54 <HAL_I2C_Available_Data>

000d5656 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5656:	2100      	movs	r1, #0
   d5658:	7c00      	ldrb	r0, [r0, #16]
   d565a:	f7ff bb83 	b.w	d4d64 <HAL_I2C_Read_Data>

000d565e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d565e:	2100      	movs	r1, #0
   d5660:	7c00      	ldrb	r0, [r0, #16]
   d5662:	f7ff bb87 	b.w	d4d74 <HAL_I2C_Peek_Data>

000d5666 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5666:	2100      	movs	r1, #0
   d5668:	7c00      	ldrb	r0, [r0, #16]
   d566a:	f7ff bb8b 	b.w	d4d84 <HAL_I2C_Flush_Data>

000d566e <_ZN7TwoWireD0Ev>:
   d566e:	b510      	push	{r4, lr}
   d5670:	2114      	movs	r1, #20
   d5672:	4604      	mov	r4, r0
   d5674:	f000 fd57 	bl	d6126 <_ZdlPvj>
   d5678:	4620      	mov	r0, r4
   d567a:	bd10      	pop	{r4, pc}

000d567c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d567c:	b510      	push	{r4, lr}
   d567e:	4604      	mov	r4, r0
   d5680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5684:	4608      	mov	r0, r1
   d5686:	60a3      	str	r3, [r4, #8]
   d5688:	2100      	movs	r1, #0
   d568a:	4b04      	ldr	r3, [pc, #16]	; (d569c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d568c:	7420      	strb	r0, [r4, #16]
   d568e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5690:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5692:	f7ff fb87 	bl	d4da4 <HAL_I2C_Init>

}
   d5696:	4620      	mov	r0, r4
   d5698:	bd10      	pop	{r4, pc}
   d569a:	bf00      	nop
   d569c:	000d6c44 	.word	0x000d6c44

000d56a0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d56a0:	2100      	movs	r1, #0
   d56a2:	7c00      	ldrb	r0, [r0, #16]
   d56a4:	f7ff bb76 	b.w	d4d94 <HAL_I2C_Is_Enabled>

000d56a8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d56a8:	2200      	movs	r2, #0
   d56aa:	4611      	mov	r1, r2
   d56ac:	6840      	ldr	r0, [r0, #4]
   d56ae:	f7ff bc45 	b.w	d4f3c <network_listening>

000d56b2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d56b2:	2200      	movs	r2, #0
   d56b4:	4611      	mov	r1, r2
   d56b6:	6840      	ldr	r0, [r0, #4]
   d56b8:	f7ff bc50 	b.w	d4f5c <network_get_listen_timeout>

000d56bc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d56bc:	2200      	movs	r2, #0
   d56be:	6840      	ldr	r0, [r0, #4]
   d56c0:	f7ff bc44 	b.w	d4f4c <network_set_listen_timeout>

000d56c4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d56c4:	2200      	movs	r2, #0
   d56c6:	f081 0101 	eor.w	r1, r1, #1
   d56ca:	6840      	ldr	r0, [r0, #4]
   d56cc:	f7ff bc2e 	b.w	d4f2c <network_listen>

000d56d0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d56d0:	2300      	movs	r3, #0
   d56d2:	461a      	mov	r2, r3
   d56d4:	4619      	mov	r1, r3
   d56d6:	6840      	ldr	r0, [r0, #4]
   d56d8:	f7ff bc20 	b.w	d4f1c <network_off>

000d56dc <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d56dc:	2300      	movs	r3, #0
   d56de:	461a      	mov	r2, r3
   d56e0:	4619      	mov	r1, r3
   d56e2:	6840      	ldr	r0, [r0, #4]
   d56e4:	f7ff bc12 	b.w	d4f0c <network_on>

000d56e8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d56e8:	2200      	movs	r2, #0
   d56ea:	4611      	mov	r1, r2
   d56ec:	6840      	ldr	r0, [r0, #4]
   d56ee:	f7ff bc05 	b.w	d4efc <network_ready>

000d56f2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56f2:	2200      	movs	r2, #0
   d56f4:	4611      	mov	r1, r2
   d56f6:	6840      	ldr	r0, [r0, #4]
   d56f8:	f7ff bbf0 	b.w	d4edc <network_connecting>

000d56fc <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56fc:	2200      	movs	r2, #0
   d56fe:	2102      	movs	r1, #2
   d5700:	6840      	ldr	r0, [r0, #4]
   d5702:	f7ff bbf3 	b.w	d4eec <network_disconnect>

000d5706 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5706:	2300      	movs	r3, #0
   d5708:	461a      	mov	r2, r3
   d570a:	6840      	ldr	r0, [r0, #4]
   d570c:	f7ff bbde 	b.w	d4ecc <network_connect>

000d5710 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5710:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5712:	4605      	mov	r5, r0
   d5714:	b188      	cbz	r0, d573a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5716:	6804      	ldr	r4, [r0, #0]
   d5718:	b14c      	cbz	r4, d572e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d571a:	68a3      	ldr	r3, [r4, #8]
   d571c:	b11b      	cbz	r3, d5726 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d571e:	2203      	movs	r2, #3
   d5720:	4621      	mov	r1, r4
   d5722:	4620      	mov	r0, r4
   d5724:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5726:	2110      	movs	r1, #16
   d5728:	4620      	mov	r0, r4
   d572a:	f000 fcfc 	bl	d6126 <_ZdlPvj>
   d572e:	4628      	mov	r0, r5
   d5730:	2114      	movs	r1, #20
      }
   d5732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5736:	f000 bcf6 	b.w	d6126 <_ZdlPvj>
   d573a:	bd38      	pop	{r3, r4, r5, pc}

000d573c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d573c:	b110      	cbz	r0, d5744 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d573e:	6803      	ldr	r3, [r0, #0]
   d5740:	685b      	ldr	r3, [r3, #4]
   d5742:	4718      	bx	r3
   d5744:	4770      	bx	lr

000d5746 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5746:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5748:	6803      	ldr	r3, [r0, #0]
   d574a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d574c:	b1bb      	cbz	r3, d577e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d574e:	6858      	ldr	r0, [r3, #4]
   d5750:	f7ff fa78 	bl	d4c44 <os_thread_is_current>
   d5754:	b978      	cbnz	r0, d5776 <_ZN6ThreadD1Ev+0x30>
   d5756:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5758:	7c5a      	ldrb	r2, [r3, #17]
   d575a:	b912      	cbnz	r2, d5762 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d575c:	6858      	ldr	r0, [r3, #4]
   d575e:	f7ff fa79 	bl	d4c54 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5762:	6823      	ldr	r3, [r4, #0]
   d5764:	6858      	ldr	r0, [r3, #4]
   d5766:	f7ff fa7d 	bl	d4c64 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d576a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d576c:	2300      	movs	r3, #0
   d576e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5770:	b128      	cbz	r0, d577e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5772:	f7ff ffcd 	bl	d5710 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5776:	6820      	ldr	r0, [r4, #0]
   d5778:	b108      	cbz	r0, d577e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d577a:	f7ff ffc9 	bl	d5710 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d577e:	4620      	mov	r0, r4
   d5780:	bd10      	pop	{r4, pc}
	...

000d5784 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5784:	b538      	push	{r3, r4, r5, lr}
   d5786:	4b0c      	ldr	r3, [pc, #48]	; (d57b8 <_ZN5spark9MeshClassD1Ev+0x34>)
   d5788:	6003      	str	r3, [r0, #0]
   d578a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d578c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5790:	b108      	cbz	r0, d5796 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5792:	f7fe fc84 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5796:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d579a:	b135      	cbz	r5, d57aa <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d579c:	4628      	mov	r0, r5
   d579e:	f7ff ffd2 	bl	d5746 <_ZN6ThreadD1Ev>
   d57a2:	2104      	movs	r1, #4
   d57a4:	4628      	mov	r0, r5
   d57a6:	f000 fcbe 	bl	d6126 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d57aa:	68a0      	ldr	r0, [r4, #8]
   d57ac:	b108      	cbz	r0, d57b2 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d57ae:	f7ff ffc5 	bl	d573c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d57b2:	4620      	mov	r0, r4
   d57b4:	bd38      	pop	{r3, r4, r5, pc}
   d57b6:	bf00      	nop
   d57b8:	000d6c6c 	.word	0x000d6c6c

000d57bc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d57bc:	b538      	push	{r3, r4, r5, lr}
   d57be:	4c0d      	ldr	r4, [pc, #52]	; (d57f4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d57c0:	4b0d      	ldr	r3, [pc, #52]	; (d57f8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d57c2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d57c4:	2500      	movs	r5, #0
   d57c6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d57c8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d57cc:	6063      	str	r3, [r4, #4]
   d57ce:	60a5      	str	r5, [r4, #8]
   d57d0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d57d4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d57d8:	f7ff fa54 	bl	d4c84 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d57dc:	4b07      	ldr	r3, [pc, #28]	; (d57fc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d57de:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d57e2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d57e4:	4620      	mov	r0, r4
   d57e6:	4a06      	ldr	r2, [pc, #24]	; (d5800 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d57e8:	4906      	ldr	r1, [pc, #24]	; (d5804 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d57ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d57ee:	f000 bc95 	b.w	d611c <__aeabi_atexit>
   d57f2:	bf00      	nop
   d57f4:	2003e534 	.word	0x2003e534
   d57f8:	000d6d54 	.word	0x000d6d54
   d57fc:	000d6c6c 	.word	0x000d6c6c
   d5800:	2003e36c 	.word	0x2003e36c
   d5804:	000d5785 	.word	0x000d5785

000d5808 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d5808:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d580a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d580c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d580e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5812:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5814:	2201      	movs	r2, #1
   d5816:	f04f 33ff 	mov.w	r3, #4294967295
   d581a:	4621      	mov	r1, r4
   d581c:	47a8      	blx	r5
}
   d581e:	b003      	add	sp, #12
   d5820:	bd30      	pop	{r4, r5, pc}

000d5822 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5822:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5824:	6803      	ldr	r3, [r0, #0]
   d5826:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5828:	f04f 33ff 	mov.w	r3, #4294967295
   d582c:	46a4      	mov	ip, r4
}
   d582e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5832:	4760      	bx	ip

000d5834 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5834:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5836:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d5838:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d583a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d583e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5840:	4621      	mov	r1, r4
   d5842:	4613      	mov	r3, r2
   d5844:	2201      	movs	r2, #1
   d5846:	47a8      	blx	r5
}
   d5848:	b003      	add	sp, #12
   d584a:	bd30      	pop	{r4, r5, pc}

000d584c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d584c:	4770      	bx	lr

000d584e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d584e:	b538      	push	{r3, r4, r5, lr}
   d5850:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d5852:	681a      	ldr	r2, [r3, #0]
   d5854:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5856:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d5858:	da05      	bge.n	d5866 <_ZN9TCPClient9connectedEv+0x18>
   d585a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d585e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5862:	429a      	cmp	r2, r3
   d5864:	d001      	beq.n	d586a <_ZN9TCPClient9connectedEv+0x1c>
   d5866:	2501      	movs	r5, #1
   d5868:	e00b      	b.n	d5882 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d586a:	6803      	ldr	r3, [r0, #0]
   d586c:	691b      	ldr	r3, [r3, #16]
   d586e:	4798      	blx	r3
   d5870:	2800      	cmp	r0, #0
   d5872:	bf14      	ite	ne
   d5874:	2501      	movne	r5, #1
   d5876:	2500      	moveq	r5, #0
        if (!rv) {
   d5878:	d103      	bne.n	d5882 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d587a:	6823      	ldr	r3, [r4, #0]
   d587c:	4620      	mov	r0, r4
   d587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5880:	4798      	blx	r3
        }
    }
    return rv;
}
   d5882:	4628      	mov	r0, r5
   d5884:	bd38      	pop	{r3, r4, r5, pc}

000d5886 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5886:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d5888:	6818      	ldr	r0, [r3, #0]
}
   d588a:	43c0      	mvns	r0, r0
   d588c:	0fc0      	lsrs	r0, r0, #31
   d588e:	4770      	bx	lr

000d5890 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5890:	4770      	bx	lr

000d5892 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5892:	2000      	movs	r0, #0
   d5894:	4770      	bx	lr

000d5896 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5896:	b510      	push	{r4, lr}
   d5898:	2114      	movs	r1, #20
   d589a:	4604      	mov	r4, r0
   d589c:	f000 fc43 	bl	d6126 <_ZdlPvj>
   d58a0:	4620      	mov	r0, r4
   d58a2:	bd10      	pop	{r4, pc}

000d58a4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d58a4:	f7fe bbf9 	b.w	d409a <_ZdlPv>

000d58a8 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d58a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d58ac:	4698      	mov	r8, r3
    stop();
   d58ae:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d58b0:	b093      	sub	sp, #76	; 0x4c
    stop();
   d58b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d58b4:	460c      	mov	r4, r1
   d58b6:	4606      	mov	r6, r0
   d58b8:	4617      	mov	r7, r2
    stop();
   d58ba:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d58bc:	ab12      	add	r3, sp, #72	; 0x48
   d58be:	2500      	movs	r5, #0
   d58c0:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d58c4:	462a      	mov	r2, r5
   d58c6:	4629      	mov	r1, r5
   d58c8:	4620      	mov	r0, r4
   d58ca:	f7ff f943 	bl	d4b54 <netdb_getaddrinfo>
   d58ce:	2800      	cmp	r0, #0
   d58d0:	db3a      	blt.n	d5948 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d58d2:	9b00      	ldr	r3, [sp, #0]
   d58d4:	2b00      	cmp	r3, #0
   d58d6:	d039      	beq.n	d594c <_ZN9TCPClient7connectEPKctm+0xa4>
   d58d8:	695b      	ldr	r3, [r3, #20]
   d58da:	2b00      	cmp	r3, #0
   d58dc:	d036      	beq.n	d594c <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d58de:	a806      	add	r0, sp, #24
   d58e0:	f7ff fd3e 	bl	d5360 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d58e4:	9b00      	ldr	r3, [sp, #0]
   d58e6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d58e8:	7863      	ldrb	r3, [r4, #1]
   d58ea:	2b02      	cmp	r3, #2
   d58ec:	d101      	bne.n	d58f2 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d58ee:	1d21      	adds	r1, r4, #4
   d58f0:	e013      	b.n	d591a <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d58f2:	2b0a      	cmp	r3, #10
   d58f4:	d114      	bne.n	d5920 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d58f6:	2211      	movs	r2, #17
   d58f8:	4629      	mov	r1, r5
   d58fa:	a801      	add	r0, sp, #4
   d58fc:	f000 fd7f 	bl	d63fe <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5900:	68a3      	ldr	r3, [r4, #8]
   d5902:	bb33      	cbnz	r3, d5952 <_ZN9TCPClient7connectEPKctm+0xaa>
   d5904:	68e3      	ldr	r3, [r4, #12]
   d5906:	bb23      	cbnz	r3, d5952 <_ZN9TCPClient7connectEPKctm+0xaa>
   d5908:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d590c:	6925      	ldr	r5, [r4, #16]
   d590e:	f7ff f9c9 	bl	d4ca4 <inet_htonl>
   d5912:	4285      	cmp	r5, r0
   d5914:	d11d      	bne.n	d5952 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5916:	f104 0114 	add.w	r1, r4, #20
   d591a:	a806      	add	r0, sp, #24
   d591c:	f7ff fd70 	bl	d5400 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5920:	a806      	add	r0, sp, #24
   d5922:	f7ff fd3d 	bl	d53a0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5926:	b188      	cbz	r0, d594c <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d5928:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d592a:	ad07      	add	r5, sp, #28
   d592c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5930:	4b18      	ldr	r3, [pc, #96]	; (d5994 <_ZN9TCPClient7connectEPKctm+0xec>)
   d5932:	930c      	str	r3, [sp, #48]	; 0x30
   d5934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5936:	ac0d      	add	r4, sp, #52	; 0x34
   d5938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d593a:	682b      	ldr	r3, [r5, #0]
   d593c:	7023      	strb	r3, [r4, #0]
   d593e:	463a      	mov	r2, r7
   d5940:	4643      	mov	r3, r8
   d5942:	a90c      	add	r1, sp, #48	; 0x30
   d5944:	4630      	mov	r0, r6
   d5946:	47c8      	blx	r9
   d5948:	4604      	mov	r4, r0
   d594a:	e01c      	b.n	d5986 <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d594c:	f04f 34ff 	mov.w	r4, #4294967295
   d5950:	e019      	b.n	d5986 <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5952:	f104 0308 	add.w	r3, r4, #8
   d5956:	ad01      	add	r5, sp, #4
   d5958:	3418      	adds	r4, #24
   d595a:	6818      	ldr	r0, [r3, #0]
   d595c:	6859      	ldr	r1, [r3, #4]
   d595e:	462a      	mov	r2, r5
   d5960:	c203      	stmia	r2!, {r0, r1}
   d5962:	3308      	adds	r3, #8
   d5964:	42a3      	cmp	r3, r4
   d5966:	4615      	mov	r5, r2
   d5968:	d1f7      	bne.n	d595a <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d596a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d596c:	a901      	add	r1, sp, #4
   d596e:	a80c      	add	r0, sp, #48	; 0x30
   d5970:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5972:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5976:	f7ff fd01 	bl	d537c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d597a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d597c:	ac07      	add	r4, sp, #28
   d597e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5980:	682b      	ldr	r3, [r5, #0]
   d5982:	7023      	strb	r3, [r4, #0]
   d5984:	e7cc      	b.n	d5920 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5986:	9800      	ldr	r0, [sp, #0]
   d5988:	f7ff f8dc 	bl	d4b44 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d598c:	4620      	mov	r0, r4
   d598e:	b013      	add	sp, #76	; 0x4c
   d5990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5994:	000d6bd0 	.word	0x000d6bd0

000d5998 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5998:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d599a:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d599c:	2200      	movs	r2, #0
   d599e:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d59a0:	9202      	str	r2, [sp, #8]
   d59a2:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d59a4:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d59a6:	4604      	mov	r4, r0
   d59a8:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d59aa:	d008      	beq.n	d59be <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d59ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d59b0:	fbb3 f1f2 	udiv	r1, r3, r2
   d59b4:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d59b6:	fb02 3111 	mls	r1, r2, r1, r3
   d59ba:	434a      	muls	r2, r1
   d59bc:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d59be:	6960      	ldr	r0, [r4, #20]
   d59c0:	2308      	movs	r3, #8
   d59c2:	9300      	str	r3, [sp, #0]
   d59c4:	f241 0205 	movw	r2, #4101	; 0x1005
   d59c8:	446b      	add	r3, sp
   d59ca:	f640 71ff 	movw	r1, #4095	; 0xfff
   d59ce:	6800      	ldr	r0, [r0, #0]
   d59d0:	f7ff f9f0 	bl	d4db4 <sock_setsockopt>
    if (ret < 0) {
   d59d4:	2800      	cmp	r0, #0
   d59d6:	db08      	blt.n	d59ea <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d59d8:	6960      	ldr	r0, [r4, #20]
   d59da:	2300      	movs	r3, #0
   d59dc:	4632      	mov	r2, r6
   d59de:	4629      	mov	r1, r5
   d59e0:	6800      	ldr	r0, [r0, #0]
   d59e2:	f7ff fa07 	bl	d4df4 <sock_send>
    if (ret < 0) {
   d59e6:	2800      	cmp	r0, #0
   d59e8:	da04      	bge.n	d59f4 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d59ea:	f7ff fae7 	bl	d4fbc <__errno>
   d59ee:	6803      	ldr	r3, [r0, #0]
   d59f0:	6063      	str	r3, [r4, #4]
   d59f2:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d59f4:	b004      	add	sp, #16
   d59f6:	bd70      	pop	{r4, r5, r6, pc}

000d59f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d59f8:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d59fa:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d59fc:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d59fe:	689b      	ldr	r3, [r3, #8]
   d5a00:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5a02:	68a3      	ldr	r3, [r4, #8]
   d5a04:	3b01      	subs	r3, #1
   d5a06:	60a3      	str	r3, [r4, #8]
   d5a08:	b92b      	cbnz	r3, d5a16 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d5a0a:	6823      	ldr	r3, [r4, #0]
   d5a0c:	4620      	mov	r0, r4
   d5a0e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5a14:	4718      	bx	r3
   d5a16:	bd10      	pop	{r4, pc}

000d5a18 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d5a18:	b570      	push	{r4, r5, r6, lr}
   d5a1a:	4604      	mov	r4, r0
   d5a1c:	694d      	ldr	r5, [r1, #20]
   d5a1e:	4b05      	ldr	r3, [pc, #20]	; (d5a34 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d5a20:	f844 3b04 	str.w	r3, [r4], #4
   d5a24:	358c      	adds	r5, #140	; 0x8c
   d5a26:	4606      	mov	r6, r0
   d5a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5a2c:	682b      	ldr	r3, [r5, #0]
   d5a2e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d5a30:	4630      	mov	r0, r6
   d5a32:	bd70      	pop	{r4, r5, r6, pc}
   d5a34:	000d6bd0 	.word	0x000d6bd0

000d5a38 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5a38:	b510      	push	{r4, lr}
   d5a3a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5a3c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5a40:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5a44:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5a46:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5a48:	d005      	beq.n	d5a56 <_ZN9TCPClient4peekEv+0x1e>
   d5a4a:	6962      	ldr	r2, [r4, #20]
   d5a4c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5a50:	4413      	add	r3, r2
   d5a52:	7918      	ldrb	r0, [r3, #4]
   d5a54:	bd10      	pop	{r4, pc}
   d5a56:	6803      	ldr	r3, [r0, #0]
   d5a58:	691b      	ldr	r3, [r3, #16]
   d5a5a:	4798      	blx	r3
   d5a5c:	2800      	cmp	r0, #0
   d5a5e:	d1f4      	bne.n	d5a4a <_ZN9TCPClient4peekEv+0x12>
   d5a60:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5a64:	bd10      	pop	{r4, pc}

000d5a66 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5a66:	b510      	push	{r4, lr}
   d5a68:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5a6a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5a6e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5a72:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5a74:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5a76:	d008      	beq.n	d5a8a <_ZN9TCPClient4readEv+0x24>
   d5a78:	6962      	ldr	r2, [r4, #20]
   d5a7a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5a7e:	1c59      	adds	r1, r3, #1
   d5a80:	4413      	add	r3, r2
   d5a82:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d5a86:	7918      	ldrb	r0, [r3, #4]
   d5a88:	bd10      	pop	{r4, pc}
   d5a8a:	6803      	ldr	r3, [r0, #0]
   d5a8c:	691b      	ldr	r3, [r3, #16]
   d5a8e:	4798      	blx	r3
   d5a90:	2800      	cmp	r0, #0
   d5a92:	d1f1      	bne.n	d5a78 <_ZN9TCPClient4readEv+0x12>
   d5a94:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5a98:	bd10      	pop	{r4, pc}

000d5a9a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a9c:	6943      	ldr	r3, [r0, #20]
   d5a9e:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d5aa0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5aa4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5aa8:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5aaa:	4605      	mov	r5, r0
   d5aac:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d5aae:	d106      	bne.n	d5abe <_ZN9TCPClient4readEPhj+0x24>
   d5ab0:	6803      	ldr	r3, [r0, #0]
   d5ab2:	691b      	ldr	r3, [r3, #16]
   d5ab4:	4798      	blx	r3
   d5ab6:	b910      	cbnz	r0, d5abe <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d5ab8:	f04f 34ff 	mov.w	r4, #4294967295
   d5abc:	e014      	b.n	d5ae8 <_ZN9TCPClient4readEPhj+0x4e>
   d5abe:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d5ac0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5ac4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d5ac8:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d5aca:	42bc      	cmp	r4, r7
   d5acc:	bf28      	it	cs
   d5ace:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5ad0:	4419      	add	r1, r3
   d5ad2:	4622      	mov	r2, r4
   d5ad4:	3104      	adds	r1, #4
   d5ad6:	4630      	mov	r0, r6
   d5ad8:	f000 fc86 	bl	d63e8 <memcpy>
   d5adc:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d5ade:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5ae2:	4423      	add	r3, r4
   d5ae4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d5ae8:	4620      	mov	r0, r4
   d5aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5aec <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d5aec:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5aee:	2300      	movs	r3, #0
   d5af0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5af4:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d5af6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d5afa:	4770      	bx	lr

000d5afc <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b00:	4698      	mov	r8, r3
    stop();
   d5b02:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5b04:	460d      	mov	r5, r1
   d5b06:	b08a      	sub	sp, #40	; 0x28
    stop();
   d5b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5b0a:	4606      	mov	r6, r0
   d5b0c:	4617      	mov	r7, r2
    stop();
   d5b0e:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5b10:	7d2b      	ldrb	r3, [r5, #20]
   d5b12:	6974      	ldr	r4, [r6, #20]
   d5b14:	2b04      	cmp	r3, #4
   d5b16:	bf0c      	ite	eq
   d5b18:	2002      	moveq	r0, #2
   d5b1a:	200a      	movne	r0, #10
   d5b1c:	2206      	movs	r2, #6
   d5b1e:	2101      	movs	r1, #1
   d5b20:	f7ff f970 	bl	d4e04 <sock_socket>
   d5b24:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d5b26:	6973      	ldr	r3, [r6, #20]
   d5b28:	681c      	ldr	r4, [r3, #0]
   d5b2a:	2c00      	cmp	r4, #0
   d5b2c:	db5b      	blt.n	d5be6 <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d5b2e:	4630      	mov	r0, r6
   d5b30:	f7ff ffdc 	bl	d5aec <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5b34:	f1b8 0f00 	cmp.w	r8, #0
   d5b38:	d017      	beq.n	d5b6a <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d5b3a:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d5b3c:	a903      	add	r1, sp, #12
   d5b3e:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d5b42:	9303      	str	r3, [sp, #12]
   d5b44:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d5b48:	f7ff f864 	bl	d4c14 <if_index_to_name>
   d5b4c:	2800      	cmp	r0, #0
   d5b4e:	db49      	blt.n	d5be4 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d5b50:	6970      	ldr	r0, [r6, #20]
   d5b52:	2306      	movs	r3, #6
   d5b54:	9300      	str	r3, [sp, #0]
   d5b56:	f241 020b 	movw	r2, #4107	; 0x100b
   d5b5a:	ab03      	add	r3, sp, #12
   d5b5c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5b60:	6800      	ldr	r0, [r0, #0]
   d5b62:	f7ff f927 	bl	d4db4 <sock_setsockopt>
   d5b66:	2800      	cmp	r0, #0
   d5b68:	db3c      	blt.n	d5be4 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d5b6a:	241c      	movs	r4, #28
   d5b6c:	4622      	mov	r2, r4
   d5b6e:	2100      	movs	r1, #0
   d5b70:	a803      	add	r0, sp, #12
   d5b72:	f000 fc44 	bl	d63fe <memset>
    if (ip.version() == 4) {
   d5b76:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d5b78:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d5b7c:	2b04      	cmp	r3, #4
   d5b7e:	d10c      	bne.n	d5b9a <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5b80:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d5b82:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5b84:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d5b88:	f7ff f894 	bl	d4cb4 <inet_htons>
   d5b8c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5b90:	6868      	ldr	r0, [r5, #4]
   d5b92:	f7ff f887 	bl	d4ca4 <inet_htonl>
   d5b96:	9004      	str	r0, [sp, #16]
   d5b98:	e013      	b.n	d5bc2 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5b9a:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d5b9c:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5b9e:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d5ba2:	f7ff f887 	bl	d4cb4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5ba6:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d5ba8:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5bac:	1d2b      	adds	r3, r5, #4
   d5bae:	f105 0714 	add.w	r7, r5, #20
   d5bb2:	6818      	ldr	r0, [r3, #0]
   d5bb4:	6859      	ldr	r1, [r3, #4]
   d5bb6:	4622      	mov	r2, r4
   d5bb8:	c203      	stmia	r2!, {r0, r1}
   d5bba:	3308      	adds	r3, #8
   d5bbc:	42bb      	cmp	r3, r7
   d5bbe:	4614      	mov	r4, r2
   d5bc0:	d1f7      	bne.n	d5bb2 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d5bc2:	6973      	ldr	r3, [r6, #20]
   d5bc4:	221c      	movs	r2, #28
   d5bc6:	a903      	add	r1, sp, #12
   d5bc8:	6818      	ldr	r0, [r3, #0]
   d5bca:	f7ff f903 	bl	d4dd4 <sock_connect>
   d5bce:	2800      	cmp	r0, #0
   d5bd0:	db08      	blt.n	d5be4 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d5bd2:	1d2c      	adds	r4, r5, #4
   d5bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5bd6:	6976      	ldr	r6, [r6, #20]
   d5bd8:	368c      	adds	r6, #140	; 0x8c
   d5bda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d5bdc:	6823      	ldr	r3, [r4, #0]
   d5bde:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d5be0:	2401      	movs	r4, #1
   d5be2:	e004      	b.n	d5bee <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d5be4:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d5be6:	6833      	ldr	r3, [r6, #0]
   d5be8:	4630      	mov	r0, r6
   d5bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5bec:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d5bee:	4620      	mov	r0, r4
   d5bf0:	b00a      	add	sp, #40	; 0x28
   d5bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5bf6 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5bf6:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d5bf8:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5bfa:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5bfc:	6818      	ldr	r0, [r3, #0]
   d5bfe:	2800      	cmp	r0, #0
   d5c00:	db01      	blt.n	d5c06 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5c02:	f7ff f8df 	bl	d4dc4 <sock_close>
   d5c06:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d5c08:	f04f 32ff 	mov.w	r2, #4294967295
   d5c0c:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5c0e:	6960      	ldr	r0, [r4, #20]
   d5c10:	2211      	movs	r2, #17
   d5c12:	2100      	movs	r1, #0
   d5c14:	308c      	adds	r0, #140	; 0x8c
   d5c16:	f000 fbf2 	bl	d63fe <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d5c1a:	4620      	mov	r0, r4
}
   d5c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d5c20:	f7ff bf64 	b.w	d5aec <_ZN9TCPClient12flush_bufferEv>

000d5c24 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5c24:	b530      	push	{r4, r5, lr}
   d5c26:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5c28:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5c2c:	b08b      	sub	sp, #44	; 0x2c
   d5c2e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5c30:	b11b      	cbz	r3, d5c3a <_ZN9TCPClient9availableEv+0x16>
   d5c32:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d5c36:	429a      	cmp	r2, r3
   d5c38:	d040      	beq.n	d5cbc <_ZN9TCPClient9availableEv+0x98>
   d5c3a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d5c3c:	6818      	ldr	r0, [r3, #0]
   d5c3e:	2800      	cmp	r0, #0
   d5c40:	db3f      	blt.n	d5cc2 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d5c42:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d5c46:	2d7f      	cmp	r5, #127	; 0x7f
   d5c48:	d83b      	bhi.n	d5cc2 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d5c4a:	1d19      	adds	r1, r3, #4
   d5c4c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d5c50:	2308      	movs	r3, #8
   d5c52:	4429      	add	r1, r5
   d5c54:	f7ff f8c6 	bl	d4de4 <sock_recv>
            if (ret > 0) {
   d5c58:	2800      	cmp	r0, #0
   d5c5a:	dd0c      	ble.n	d5c76 <_ZN9TCPClient9availableEv+0x52>
   d5c5c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d5c5e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5c62:	b90a      	cbnz	r2, d5c68 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d5c64:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d5c68:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d5c6a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d5c6e:	4418      	add	r0, r3
   d5c70:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d5c74:	e025      	b.n	d5cc2 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d5c76:	f7ff f9a1 	bl	d4fbc <__errno>
   d5c7a:	6803      	ldr	r3, [r0, #0]
   d5c7c:	2b0b      	cmp	r3, #11
   d5c7e:	d020      	beq.n	d5cc2 <_ZN9TCPClient9availableEv+0x9e>
   d5c80:	f7ff f99c 	bl	d4fbc <__errno>
   d5c84:	6803      	ldr	r3, [r0, #0]
   d5c86:	2b0b      	cmp	r3, #11
   d5c88:	d01b      	beq.n	d5cc2 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d5c8a:	2320      	movs	r3, #32
   d5c8c:	2500      	movs	r5, #0
   d5c8e:	9302      	str	r3, [sp, #8]
   d5c90:	9503      	str	r5, [sp, #12]
   d5c92:	f7ff f993 	bl	d4fbc <__errno>
   d5c96:	6803      	ldr	r3, [r0, #0]
   d5c98:	9301      	str	r3, [sp, #4]
   d5c9a:	4b0e      	ldr	r3, [pc, #56]	; (d5cd4 <_ZN9TCPClient9availableEv+0xb0>)
   d5c9c:	9300      	str	r3, [sp, #0]
   d5c9e:	aa02      	add	r2, sp, #8
   d5ca0:	462b      	mov	r3, r5
   d5ca2:	490d      	ldr	r1, [pc, #52]	; (d5cd8 <_ZN9TCPClient9availableEv+0xb4>)
   d5ca4:	2032      	movs	r0, #50	; 0x32
   d5ca6:	f7ff f8e5 	bl	d4e74 <log_message>
                    sock_close(d_->sock);
   d5caa:	6963      	ldr	r3, [r4, #20]
   d5cac:	6818      	ldr	r0, [r3, #0]
   d5cae:	f7ff f889 	bl	d4dc4 <sock_close>
   d5cb2:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5cb4:	f04f 32ff 	mov.w	r2, #4294967295
   d5cb8:	601a      	str	r2, [r3, #0]
   d5cba:	e002      	b.n	d5cc2 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d5cbc:	f7ff ff16 	bl	d5aec <_ZN9TCPClient12flush_bufferEv>
   d5cc0:	e7bb      	b.n	d5c3a <_ZN9TCPClient9availableEv+0x16>
   d5cc2:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d5cc4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d5cc8:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d5ccc:	1a18      	subs	r0, r3, r0
}
   d5cce:	b00b      	add	sp, #44	; 0x2c
   d5cd0:	bd30      	pop	{r4, r5, pc}
   d5cd2:	bf00      	nop
   d5cd4:	000d6d07 	.word	0x000d6d07
   d5cd8:	000d6d00 	.word	0x000d6d00

000d5cdc <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5cdc:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d5cde:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d5ce0:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d5ce2:	6001      	str	r1, [r0, #0]
   d5ce4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d5ce8:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d5cec:	3088      	adds	r0, #136	; 0x88
   d5cee:	f7ff fb37 	bl	d5360 <_ZN9IPAddressC1Ev>
}
   d5cf2:	4620      	mov	r0, r4
   d5cf4:	bd10      	pop	{r4, pc}
	...

000d5cf8 <_ZN9TCPClientC1Ei>:
   d5cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d5cfc:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5cfe:	2300      	movs	r3, #0
   d5d00:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d5d02:	4a14      	ldr	r2, [pc, #80]	; (d5d54 <_ZN9TCPClientC1Ei+0x5c>)
   d5d04:	6043      	str	r3, [r0, #4]
   d5d06:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5d08:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5d0a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d5d0c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5d0e:	20a0      	movs	r0, #160	; 0xa0
   d5d10:	460e      	mov	r6, r1
   d5d12:	f7fe f9c0 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5d16:	4605      	mov	r5, r0
   d5d18:	b110      	cbz	r0, d5d20 <_ZN9TCPClientC1Ei+0x28>
   d5d1a:	4631      	mov	r1, r6
   d5d1c:	f7ff ffde 	bl	d5cdc <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5d20:	2014      	movs	r0, #20
   d5d22:	f7fe f9b8 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5d26:	4603      	mov	r3, r0
   d5d28:	b128      	cbz	r0, d5d36 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5d2a:	2201      	movs	r2, #1
   d5d2c:	6042      	str	r2, [r0, #4]
   d5d2e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5d30:	4a09      	ldr	r2, [pc, #36]	; (d5d58 <_ZN9TCPClientC1Ei+0x60>)
   d5d32:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5d34:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5d36:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5d38:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5d3a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5d3c:	b128      	cbz	r0, d5d4a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5d3e:	6843      	ldr	r3, [r0, #4]
   d5d40:	3b01      	subs	r3, #1
   d5d42:	6043      	str	r3, [r0, #4]
   d5d44:	b90b      	cbnz	r3, d5d4a <_ZN9TCPClientC1Ei+0x52>
   d5d46:	f7ff fe57 	bl	d59f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d5d4a:	4620      	mov	r0, r4
   d5d4c:	f7ff fece 	bl	d5aec <_ZN9TCPClient12flush_bufferEv>
}
   d5d50:	4620      	mov	r0, r4
   d5d52:	bd70      	pop	{r4, r5, r6, pc}
   d5d54:	000d6cbc 	.word	0x000d6cbc
   d5d58:	000d6ca0 	.word	0x000d6ca0

000d5d5c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d5d5c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d5d5e:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d5d62:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d5d64:	f7ff ffc8 	bl	d5cf8 <_ZN9TCPClientC1Ei>
}
   d5d68:	4620      	mov	r0, r4
   d5d6a:	bd10      	pop	{r4, pc}

000d5d6c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d5d6c:	b510      	push	{r4, lr}
   d5d6e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d5d70:	6800      	ldr	r0, [r0, #0]
   d5d72:	2800      	cmp	r0, #0
   d5d74:	db01      	blt.n	d5d7a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d5d76:	f7ff f825 	bl	d4dc4 <sock_close>
    }
}
   d5d7a:	4620      	mov	r0, r4
   d5d7c:	bd10      	pop	{r4, pc}

000d5d7e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5d7e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5d80:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d5d82:	4620      	mov	r0, r4
   d5d84:	f7ff fff2 	bl	d5d6c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d5d88:	b124      	cbz	r4, d5d94 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5d8a:	4620      	mov	r0, r4
   d5d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5d90:	f7fe b983 	b.w	d409a <_ZdlPv>
   d5d94:	bd10      	pop	{r4, pc}

000d5d96 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5d96:	2200      	movs	r2, #0
   d5d98:	4611      	mov	r1, r2
   d5d9a:	6840      	ldr	r0, [r0, #4]
   d5d9c:	f7ff b8ae 	b.w	d4efc <network_ready>

000d5da0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5da0:	2200      	movs	r2, #0
   d5da2:	4611      	mov	r1, r2
   d5da4:	6840      	ldr	r0, [r0, #4]
   d5da6:	f7ff b8c9 	b.w	d4f3c <network_listening>

000d5daa <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5daa:	2200      	movs	r2, #0
   d5dac:	4611      	mov	r1, r2
   d5dae:	6840      	ldr	r0, [r0, #4]
   d5db0:	f7ff b8d4 	b.w	d4f5c <network_get_listen_timeout>

000d5db4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5db4:	2200      	movs	r2, #0
   d5db6:	6840      	ldr	r0, [r0, #4]
   d5db8:	f7ff b8c8 	b.w	d4f4c <network_set_listen_timeout>

000d5dbc <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5dbc:	2200      	movs	r2, #0
   d5dbe:	f081 0101 	eor.w	r1, r1, #1
   d5dc2:	6840      	ldr	r0, [r0, #4]
   d5dc4:	f7ff b8b2 	b.w	d4f2c <network_listen>

000d5dc8 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5dc8:	2300      	movs	r3, #0
   d5dca:	461a      	mov	r2, r3
   d5dcc:	4619      	mov	r1, r3
   d5dce:	6840      	ldr	r0, [r0, #4]
   d5dd0:	f7ff b8a4 	b.w	d4f1c <network_off>

000d5dd4 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5dd4:	2300      	movs	r3, #0
   d5dd6:	461a      	mov	r2, r3
   d5dd8:	4619      	mov	r1, r3
   d5dda:	6840      	ldr	r0, [r0, #4]
   d5ddc:	f7ff b896 	b.w	d4f0c <network_on>

000d5de0 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5de0:	2200      	movs	r2, #0
   d5de2:	4611      	mov	r1, r2
   d5de4:	6840      	ldr	r0, [r0, #4]
   d5de6:	f7ff b879 	b.w	d4edc <network_connecting>

000d5dea <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5dea:	2200      	movs	r2, #0
   d5dec:	2102      	movs	r1, #2
   d5dee:	6840      	ldr	r0, [r0, #4]
   d5df0:	f7ff b87c 	b.w	d4eec <network_disconnect>

000d5df4 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5df4:	2300      	movs	r3, #0
   d5df6:	461a      	mov	r2, r3
   d5df8:	6840      	ldr	r0, [r0, #4]
   d5dfa:	f7ff b867 	b.w	d4ecc <network_connect>
	...

000d5e00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5e00:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5e02:	2204      	movs	r2, #4
   d5e04:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5e06:	4a02      	ldr	r2, [pc, #8]	; (d5e10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5e08:	601a      	str	r2, [r3, #0]
   d5e0a:	4770      	bx	lr
   d5e0c:	2003e704 	.word	0x2003e704
   d5e10:	000d6d20 	.word	0x000d6d20

000d5e14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5e14:	2300      	movs	r3, #0
   d5e16:	461a      	mov	r2, r3
   d5e18:	6840      	ldr	r0, [r0, #4]
   d5e1a:	f7ff b857 	b.w	d4ecc <network_connect>

000d5e1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5e1e:	2200      	movs	r2, #0
   d5e20:	2102      	movs	r1, #2
   d5e22:	6840      	ldr	r0, [r0, #4]
   d5e24:	f7ff b862 	b.w	d4eec <network_disconnect>

000d5e28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5e28:	2200      	movs	r2, #0
   d5e2a:	4611      	mov	r1, r2
   d5e2c:	6840      	ldr	r0, [r0, #4]
   d5e2e:	f7ff b855 	b.w	d4edc <network_connecting>

000d5e32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5e32:	2200      	movs	r2, #0
   d5e34:	4611      	mov	r1, r2
   d5e36:	6840      	ldr	r0, [r0, #4]
   d5e38:	f7ff b860 	b.w	d4efc <network_ready>

000d5e3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5e3c:	2300      	movs	r3, #0
   d5e3e:	461a      	mov	r2, r3
   d5e40:	4619      	mov	r1, r3
   d5e42:	6840      	ldr	r0, [r0, #4]
   d5e44:	f7ff b862 	b.w	d4f0c <network_on>

000d5e48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5e48:	2300      	movs	r3, #0
   d5e4a:	461a      	mov	r2, r3
   d5e4c:	4619      	mov	r1, r3
   d5e4e:	6840      	ldr	r0, [r0, #4]
   d5e50:	f7ff b864 	b.w	d4f1c <network_off>

000d5e54 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5e54:	2200      	movs	r2, #0
   d5e56:	f081 0101 	eor.w	r1, r1, #1
   d5e5a:	6840      	ldr	r0, [r0, #4]
   d5e5c:	f7ff b866 	b.w	d4f2c <network_listen>

000d5e60 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5e60:	2200      	movs	r2, #0
   d5e62:	6840      	ldr	r0, [r0, #4]
   d5e64:	f7ff b872 	b.w	d4f4c <network_set_listen_timeout>

000d5e68 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5e68:	2200      	movs	r2, #0
   d5e6a:	4611      	mov	r1, r2
   d5e6c:	6840      	ldr	r0, [r0, #4]
   d5e6e:	f7ff b875 	b.w	d4f5c <network_get_listen_timeout>

000d5e72 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5e72:	2200      	movs	r2, #0
   d5e74:	4611      	mov	r1, r2
   d5e76:	6840      	ldr	r0, [r0, #4]
   d5e78:	f7ff b860 	b.w	d4f3c <network_listening>

000d5e7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e80:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e82:	b095      	sub	sp, #84	; 0x54
   d5e84:	4616      	mov	r6, r2
   d5e86:	460d      	mov	r5, r1
   d5e88:	4607      	mov	r7, r0
    IPAddress addr;
   d5e8a:	f7ff fa69 	bl	d5360 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5e8e:	4621      	mov	r1, r4
   d5e90:	2220      	movs	r2, #32
   d5e92:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e94:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5e96:	f000 fab2 	bl	d63fe <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5e9a:	2340      	movs	r3, #64	; 0x40
   d5e9c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5e9e:	4621      	mov	r1, r4
   d5ea0:	466b      	mov	r3, sp
   d5ea2:	aa0c      	add	r2, sp, #48	; 0x30
   d5ea4:	4630      	mov	r0, r6
   d5ea6:	f7fe fe55 	bl	d4b54 <netdb_getaddrinfo>
    if (!r) {
   d5eaa:	4604      	mov	r4, r0
   d5eac:	2800      	cmp	r0, #0
   d5eae:	d144      	bne.n	d5f3a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5eb0:	4602      	mov	r2, r0
   d5eb2:	2101      	movs	r1, #1
   d5eb4:	6868      	ldr	r0, [r5, #4]
   d5eb6:	f7ff f821 	bl	d4efc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5eba:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ebc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ebe:	4622      	mov	r2, r4
   d5ec0:	6868      	ldr	r0, [r5, #4]
   d5ec2:	f7ff f81b 	bl	d4efc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ec6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ec8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5eca:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ecc:	2e00      	cmp	r6, #0
   d5ece:	d034      	beq.n	d5f3a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5ed0:	2900      	cmp	r1, #0
   d5ed2:	d132      	bne.n	d5f3a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5ed4:	6873      	ldr	r3, [r6, #4]
   d5ed6:	2b02      	cmp	r3, #2
   d5ed8:	d002      	beq.n	d5ee0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5eda:	2b0a      	cmp	r3, #10
   d5edc:	d009      	beq.n	d5ef2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5ede:	e02a      	b.n	d5f36 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5ee0:	f1b8 0f00 	cmp.w	r8, #0
   d5ee4:	d027      	beq.n	d5f36 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5ee6:	6971      	ldr	r1, [r6, #20]
   d5ee8:	4638      	mov	r0, r7
   d5eea:	3104      	adds	r1, #4
   d5eec:	f7ff fa88 	bl	d5400 <_ZN9IPAddressaSEPKh>
   d5ef0:	e020      	b.n	d5f34 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5ef2:	f1b9 0f00 	cmp.w	r9, #0
   d5ef6:	d01e      	beq.n	d5f36 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5ef8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5efa:	2211      	movs	r2, #17
   d5efc:	a801      	add	r0, sp, #4
   d5efe:	f000 fa7e 	bl	d63fe <memset>
                    a.v = 6;
   d5f02:	2306      	movs	r3, #6
   d5f04:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5f08:	ad01      	add	r5, sp, #4
   d5f0a:	f104 0308 	add.w	r3, r4, #8
   d5f0e:	3418      	adds	r4, #24
   d5f10:	6818      	ldr	r0, [r3, #0]
   d5f12:	6859      	ldr	r1, [r3, #4]
   d5f14:	462a      	mov	r2, r5
   d5f16:	c203      	stmia	r2!, {r0, r1}
   d5f18:	3308      	adds	r3, #8
   d5f1a:	42a3      	cmp	r3, r4
   d5f1c:	4615      	mov	r5, r2
   d5f1e:	d1f7      	bne.n	d5f10 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5f20:	a901      	add	r1, sp, #4
   d5f22:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5f24:	ad07      	add	r5, sp, #28
   d5f26:	f7ff fa29 	bl	d537c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f2c:	1d3c      	adds	r4, r7, #4
   d5f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5f30:	682b      	ldr	r3, [r5, #0]
   d5f32:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5f34:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5f36:	69f6      	ldr	r6, [r6, #28]
   d5f38:	e7c8      	b.n	d5ecc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5f3a:	9800      	ldr	r0, [sp, #0]
   d5f3c:	f7fe fe02 	bl	d4b44 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5f40:	4638      	mov	r0, r7
   d5f42:	b015      	add	sp, #84	; 0x54
   d5f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5f48 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5f48:	4b02      	ldr	r3, [pc, #8]	; (d5f54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5f4a:	4a03      	ldr	r2, [pc, #12]	; (d5f58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5f4c:	601a      	str	r2, [r3, #0]
   d5f4e:	2200      	movs	r2, #0
   d5f50:	605a      	str	r2, [r3, #4]
   d5f52:	4770      	bx	lr
   d5f54:	2003e70c 	.word	0x2003e70c
   d5f58:	000d6d54 	.word	0x000d6d54

000d5f5c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5f5c:	b510      	push	{r4, lr}
   d5f5e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5f60:	480f      	ldr	r0, [pc, #60]	; (d5fa0 <pinAvailable+0x44>)
   d5f62:	f7ff f88d 	bl	d5080 <_ZN8SPIClass9isEnabledEv>
   d5f66:	b128      	cbz	r0, d5f74 <pinAvailable+0x18>
   d5f68:	f1a4 030b 	sub.w	r3, r4, #11
   d5f6c:	2b02      	cmp	r3, #2
   d5f6e:	d801      	bhi.n	d5f74 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5f70:	2000      	movs	r0, #0
   d5f72:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5f74:	f000 f8b2 	bl	d60dc <_Z19__fetch_global_Wirev>
   d5f78:	f7ff fb92 	bl	d56a0 <_ZN7TwoWire9isEnabledEv>
   d5f7c:	b108      	cbz	r0, d5f82 <pinAvailable+0x26>
   d5f7e:	2c01      	cmp	r4, #1
   d5f80:	d9f6      	bls.n	d5f70 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5f82:	f7ff fb29 	bl	d55d8 <_Z22__fetch_global_Serial1v>
   d5f86:	f7ff fb23 	bl	d55d0 <_ZN11USARTSerial9isEnabledEv>
   d5f8a:	b118      	cbz	r0, d5f94 <pinAvailable+0x38>
   d5f8c:	f1a4 0309 	sub.w	r3, r4, #9
   d5f90:	2b01      	cmp	r3, #1
   d5f92:	d9ed      	bls.n	d5f70 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5f94:	2c23      	cmp	r4, #35	; 0x23
   d5f96:	bf8c      	ite	hi
   d5f98:	2000      	movhi	r0, #0
   d5f9a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5f9c:	bd10      	pop	{r4, pc}
   d5f9e:	bf00      	nop
   d5fa0:	2003e714 	.word	0x2003e714

000d5fa4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5fa4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5fa6:	b538      	push	{r3, r4, r5, lr}
   d5fa8:	4604      	mov	r4, r0
   d5faa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5fac:	d80a      	bhi.n	d5fc4 <pinMode+0x20>
   d5fae:	29ff      	cmp	r1, #255	; 0xff
   d5fb0:	d008      	beq.n	d5fc4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5fb2:	f7ff ffd3 	bl	d5f5c <pinAvailable>
   d5fb6:	b128      	cbz	r0, d5fc4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5fb8:	4629      	mov	r1, r5
   d5fba:	4620      	mov	r0, r4
}
   d5fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5fc0:	f7fe bde0 	b.w	d4b84 <HAL_Pin_Mode>
   d5fc4:	bd38      	pop	{r3, r4, r5, pc}

000d5fc6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5fc6:	b538      	push	{r3, r4, r5, lr}
   d5fc8:	4604      	mov	r4, r0
   d5fca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5fcc:	f7fe fde2 	bl	d4b94 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5fd0:	28ff      	cmp	r0, #255	; 0xff
   d5fd2:	d010      	beq.n	d5ff6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5fd4:	2806      	cmp	r0, #6
   d5fd6:	d804      	bhi.n	d5fe2 <digitalWrite+0x1c>
   d5fd8:	234d      	movs	r3, #77	; 0x4d
   d5fda:	fa23 f000 	lsr.w	r0, r3, r0
   d5fde:	07c3      	lsls	r3, r0, #31
   d5fe0:	d409      	bmi.n	d5ff6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5fe2:	4620      	mov	r0, r4
   d5fe4:	f7ff ffba 	bl	d5f5c <pinAvailable>
   d5fe8:	b128      	cbz	r0, d5ff6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5fea:	4629      	mov	r1, r5
   d5fec:	4620      	mov	r0, r4
}
   d5fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5ff2:	f7fe bdd7 	b.w	d4ba4 <HAL_GPIO_Write>
   d5ff6:	bd38      	pop	{r3, r4, r5, pc}

000d5ff8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5ff8:	b510      	push	{r4, lr}
   d5ffa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5ffc:	f7fe fdca 	bl	d4b94 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6000:	3804      	subs	r0, #4
   d6002:	b2c0      	uxtb	r0, r0
   d6004:	2801      	cmp	r0, #1
   d6006:	d908      	bls.n	d601a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6008:	4620      	mov	r0, r4
   d600a:	f7ff ffa7 	bl	d5f5c <pinAvailable>
   d600e:	b120      	cbz	r0, d601a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6010:	4620      	mov	r0, r4
}
   d6012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6016:	f7fe bdcd 	b.w	d4bb4 <HAL_GPIO_Read>
}
   d601a:	2000      	movs	r0, #0
   d601c:	bd10      	pop	{r4, pc}

000d601e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d601e:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6020:	b510      	push	{r4, lr}
   d6022:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6024:	bf9c      	itt	ls
   d6026:	340e      	addls	r4, #14
   d6028:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d602a:	4620      	mov	r0, r4
   d602c:	f7ff ff96 	bl	d5f5c <pinAvailable>
   d6030:	b150      	cbz	r0, d6048 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6032:	2103      	movs	r1, #3
   d6034:	4620      	mov	r0, r4
   d6036:	f7fe fd9d 	bl	d4b74 <HAL_Validate_Pin_Function>
   d603a:	2803      	cmp	r0, #3
   d603c:	d104      	bne.n	d6048 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d603e:	4620      	mov	r0, r4
}
   d6040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6044:	f7fe bdc6 	b.w	d4bd4 <HAL_ADC_Read>
}
   d6048:	2000      	movs	r0, #0
   d604a:	bd10      	pop	{r4, pc}

000d604c <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d604c:	b538      	push	{r3, r4, r5, lr}
   d604e:	4604      	mov	r4, r0
   d6050:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6052:	f7ff ff83 	bl	d5f5c <pinAvailable>
   d6056:	b1f0      	cbz	r0, d6096 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6058:	2104      	movs	r1, #4
   d605a:	4620      	mov	r0, r4
   d605c:	f7fe fd8a 	bl	d4b74 <HAL_Validate_Pin_Function>
   d6060:	2804      	cmp	r0, #4
   d6062:	d105      	bne.n	d6070 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6064:	b2a9      	uxth	r1, r5
   d6066:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d6068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d606c:	f7fe bdaa 	b.w	d4bc4 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6070:	2102      	movs	r1, #2
   d6072:	4620      	mov	r0, r4
   d6074:	f7fe fd7e 	bl	d4b74 <HAL_Validate_Pin_Function>
   d6078:	2802      	cmp	r0, #2
   d607a:	d10c      	bne.n	d6096 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d607c:	4620      	mov	r0, r4
   d607e:	f7fe fd89 	bl	d4b94 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6082:	2801      	cmp	r0, #1
   d6084:	d001      	beq.n	d608a <_Z11analogWritetm+0x3e>
   d6086:	2804      	cmp	r0, #4
   d6088:	d105      	bne.n	d6096 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d608a:	4629      	mov	r1, r5
   d608c:	4620      	mov	r0, r4
    }
}
   d608e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d6092:	f7fe bda7 	b.w	d4be4 <HAL_PWM_Write_Ext>
   d6096:	bd38      	pop	{r3, r4, r5, pc}

000d6098 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6098:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d609a:	4c0c      	ldr	r4, [pc, #48]	; (d60cc <_GLOBAL__sub_I_SPI+0x34>)
   d609c:	4e0c      	ldr	r6, [pc, #48]	; (d60d0 <_GLOBAL__sub_I_SPI+0x38>)
   d609e:	4d0d      	ldr	r5, [pc, #52]	; (d60d4 <_GLOBAL__sub_I_SPI+0x3c>)
   d60a0:	2100      	movs	r1, #0
   d60a2:	4620      	mov	r0, r4
   d60a4:	f7fe ffd8 	bl	d5058 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d60a8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d60aa:	4c0b      	ldr	r4, [pc, #44]	; (d60d8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d60ac:	4632      	mov	r2, r6
   d60ae:	4629      	mov	r1, r5
   d60b0:	f000 f834 	bl	d611c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d60b4:	2101      	movs	r1, #1
   d60b6:	4620      	mov	r0, r4
   d60b8:	f7fe ffce 	bl	d5058 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d60bc:	4632      	mov	r2, r6
   d60be:	4629      	mov	r1, r5
   d60c0:	4620      	mov	r0, r4
   d60c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d60c6:	f000 b829 	b.w	d611c <__aeabi_atexit>
   d60ca:	bf00      	nop
   d60cc:	2003e714 	.word	0x2003e714
   d60d0:	2003e36c 	.word	0x2003e36c
   d60d4:	000d5049 	.word	0x000d5049
   d60d8:	2003e724 	.word	0x2003e724

000d60dc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d60dc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d60de:	4d0b      	ldr	r5, [pc, #44]	; (d610c <_Z19__fetch_global_Wirev+0x30>)
   d60e0:	6829      	ldr	r1, [r5, #0]
   d60e2:	f011 0401 	ands.w	r4, r1, #1
   d60e6:	d10f      	bne.n	d6108 <_Z19__fetch_global_Wirev+0x2c>
   d60e8:	4628      	mov	r0, r5
   d60ea:	f7fd ffda 	bl	d40a2 <__cxa_guard_acquire>
   d60ee:	b158      	cbz	r0, d6108 <_Z19__fetch_global_Wirev+0x2c>
   d60f0:	4621      	mov	r1, r4
   d60f2:	4807      	ldr	r0, [pc, #28]	; (d6110 <_Z19__fetch_global_Wirev+0x34>)
   d60f4:	f7ff fac2 	bl	d567c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d60f8:	4628      	mov	r0, r5
   d60fa:	f7fd ffd7 	bl	d40ac <__cxa_guard_release>
   d60fe:	4a05      	ldr	r2, [pc, #20]	; (d6114 <_Z19__fetch_global_Wirev+0x38>)
   d6100:	4905      	ldr	r1, [pc, #20]	; (d6118 <_Z19__fetch_global_Wirev+0x3c>)
   d6102:	4803      	ldr	r0, [pc, #12]	; (d6110 <_Z19__fetch_global_Wirev+0x34>)
   d6104:	f000 f80a 	bl	d611c <__aeabi_atexit>
	return wire;
}
   d6108:	4801      	ldr	r0, [pc, #4]	; (d6110 <_Z19__fetch_global_Wirev+0x34>)
   d610a:	bd38      	pop	{r3, r4, r5, pc}
   d610c:	2003e738 	.word	0x2003e738
   d6110:	2003e73c 	.word	0x2003e73c
   d6114:	2003e36c 	.word	0x2003e36c
   d6118:	000d5625 	.word	0x000d5625

000d611c <__aeabi_atexit>:
   d611c:	460b      	mov	r3, r1
   d611e:	4601      	mov	r1, r0
   d6120:	4618      	mov	r0, r3
   d6122:	f000 b953 	b.w	d63cc <__cxa_atexit>

000d6126 <_ZdlPvj>:
   d6126:	f7fd bfb8 	b.w	d409a <_ZdlPv>
	...

000d612c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d612c:	4b18      	ldr	r3, [pc, #96]	; (d6190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d612e:	681a      	ldr	r2, [r3, #0]
   d6130:	07d1      	lsls	r1, r2, #31
   d6132:	bf5c      	itt	pl
   d6134:	2201      	movpl	r2, #1
   d6136:	601a      	strpl	r2, [r3, #0]
   d6138:	4b16      	ldr	r3, [pc, #88]	; (d6194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d613a:	681a      	ldr	r2, [r3, #0]
   d613c:	07d2      	lsls	r2, r2, #31
   d613e:	bf5c      	itt	pl
   d6140:	2201      	movpl	r2, #1
   d6142:	601a      	strpl	r2, [r3, #0]
   d6144:	4b14      	ldr	r3, [pc, #80]	; (d6198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6146:	681a      	ldr	r2, [r3, #0]
   d6148:	07d0      	lsls	r0, r2, #31
   d614a:	bf5c      	itt	pl
   d614c:	2201      	movpl	r2, #1
   d614e:	601a      	strpl	r2, [r3, #0]
   d6150:	4b12      	ldr	r3, [pc, #72]	; (d619c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6152:	681a      	ldr	r2, [r3, #0]
   d6154:	07d1      	lsls	r1, r2, #31
   d6156:	bf5c      	itt	pl
   d6158:	2201      	movpl	r2, #1
   d615a:	601a      	strpl	r2, [r3, #0]
   d615c:	4b10      	ldr	r3, [pc, #64]	; (d61a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d615e:	681a      	ldr	r2, [r3, #0]
   d6160:	07d2      	lsls	r2, r2, #31
   d6162:	bf5c      	itt	pl
   d6164:	2201      	movpl	r2, #1
   d6166:	601a      	strpl	r2, [r3, #0]
   d6168:	4b0e      	ldr	r3, [pc, #56]	; (d61a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d616a:	681a      	ldr	r2, [r3, #0]
   d616c:	07d0      	lsls	r0, r2, #31
   d616e:	bf5c      	itt	pl
   d6170:	2201      	movpl	r2, #1
   d6172:	601a      	strpl	r2, [r3, #0]
   d6174:	4b0c      	ldr	r3, [pc, #48]	; (d61a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6176:	681a      	ldr	r2, [r3, #0]
   d6178:	07d1      	lsls	r1, r2, #31
   d617a:	bf5c      	itt	pl
   d617c:	2201      	movpl	r2, #1
   d617e:	601a      	strpl	r2, [r3, #0]
   d6180:	4b0a      	ldr	r3, [pc, #40]	; (d61ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6182:	681a      	ldr	r2, [r3, #0]
   d6184:	07d2      	lsls	r2, r2, #31
   d6186:	bf5c      	itt	pl
   d6188:	2201      	movpl	r2, #1
   d618a:	601a      	strpl	r2, [r3, #0]
   d618c:	4770      	bx	lr
   d618e:	bf00      	nop
   d6190:	2003e76c 	.word	0x2003e76c
   d6194:	2003e768 	.word	0x2003e768
   d6198:	2003e764 	.word	0x2003e764
   d619c:	2003e760 	.word	0x2003e760
   d61a0:	2003e75c 	.word	0x2003e75c
   d61a4:	2003e758 	.word	0x2003e758
   d61a8:	2003e754 	.word	0x2003e754
   d61ac:	2003e750 	.word	0x2003e750

000d61b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d61b0:	4b24      	ldr	r3, [pc, #144]	; (d6244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d61b2:	681a      	ldr	r2, [r3, #0]
   d61b4:	07d0      	lsls	r0, r2, #31
   d61b6:	bf5c      	itt	pl
   d61b8:	2201      	movpl	r2, #1
   d61ba:	601a      	strpl	r2, [r3, #0]
   d61bc:	4b22      	ldr	r3, [pc, #136]	; (d6248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d61be:	681a      	ldr	r2, [r3, #0]
   d61c0:	07d1      	lsls	r1, r2, #31
   d61c2:	bf5c      	itt	pl
   d61c4:	2201      	movpl	r2, #1
   d61c6:	601a      	strpl	r2, [r3, #0]
   d61c8:	4b20      	ldr	r3, [pc, #128]	; (d624c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d61ca:	681a      	ldr	r2, [r3, #0]
   d61cc:	07d2      	lsls	r2, r2, #31
   d61ce:	bf5c      	itt	pl
   d61d0:	2201      	movpl	r2, #1
   d61d2:	601a      	strpl	r2, [r3, #0]
   d61d4:	4b1e      	ldr	r3, [pc, #120]	; (d6250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d61d6:	681a      	ldr	r2, [r3, #0]
   d61d8:	07d0      	lsls	r0, r2, #31
   d61da:	bf5c      	itt	pl
   d61dc:	2201      	movpl	r2, #1
   d61de:	601a      	strpl	r2, [r3, #0]
   d61e0:	4b1c      	ldr	r3, [pc, #112]	; (d6254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d61e2:	681a      	ldr	r2, [r3, #0]
   d61e4:	07d1      	lsls	r1, r2, #31
   d61e6:	bf5c      	itt	pl
   d61e8:	2201      	movpl	r2, #1
   d61ea:	601a      	strpl	r2, [r3, #0]
   d61ec:	4b1a      	ldr	r3, [pc, #104]	; (d6258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d61ee:	681a      	ldr	r2, [r3, #0]
   d61f0:	07d2      	lsls	r2, r2, #31
   d61f2:	bf5c      	itt	pl
   d61f4:	2201      	movpl	r2, #1
   d61f6:	601a      	strpl	r2, [r3, #0]
   d61f8:	4b18      	ldr	r3, [pc, #96]	; (d625c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d61fa:	681a      	ldr	r2, [r3, #0]
   d61fc:	07d0      	lsls	r0, r2, #31
   d61fe:	bf5c      	itt	pl
   d6200:	2201      	movpl	r2, #1
   d6202:	601a      	strpl	r2, [r3, #0]
   d6204:	4b16      	ldr	r3, [pc, #88]	; (d6260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6206:	681a      	ldr	r2, [r3, #0]
   d6208:	07d1      	lsls	r1, r2, #31
   d620a:	bf5c      	itt	pl
   d620c:	2201      	movpl	r2, #1
   d620e:	601a      	strpl	r2, [r3, #0]
   d6210:	4b14      	ldr	r3, [pc, #80]	; (d6264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6212:	681a      	ldr	r2, [r3, #0]
   d6214:	07d2      	lsls	r2, r2, #31
   d6216:	bf5c      	itt	pl
   d6218:	2201      	movpl	r2, #1
   d621a:	601a      	strpl	r2, [r3, #0]
   d621c:	4b12      	ldr	r3, [pc, #72]	; (d6268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d621e:	681a      	ldr	r2, [r3, #0]
   d6220:	07d0      	lsls	r0, r2, #31
   d6222:	bf5c      	itt	pl
   d6224:	2201      	movpl	r2, #1
   d6226:	601a      	strpl	r2, [r3, #0]
   d6228:	4b10      	ldr	r3, [pc, #64]	; (d626c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d622a:	681a      	ldr	r2, [r3, #0]
   d622c:	07d1      	lsls	r1, r2, #31
   d622e:	bf5c      	itt	pl
   d6230:	2201      	movpl	r2, #1
   d6232:	601a      	strpl	r2, [r3, #0]
   d6234:	4b0e      	ldr	r3, [pc, #56]	; (d6270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6236:	681a      	ldr	r2, [r3, #0]
   d6238:	07d2      	lsls	r2, r2, #31
   d623a:	bf5c      	itt	pl
   d623c:	2201      	movpl	r2, #1
   d623e:	601a      	strpl	r2, [r3, #0]
   d6240:	4770      	bx	lr
   d6242:	bf00      	nop
   d6244:	2003e79c 	.word	0x2003e79c
   d6248:	2003e798 	.word	0x2003e798
   d624c:	2003e794 	.word	0x2003e794
   d6250:	2003e790 	.word	0x2003e790
   d6254:	2003e78c 	.word	0x2003e78c
   d6258:	2003e788 	.word	0x2003e788
   d625c:	2003e784 	.word	0x2003e784
   d6260:	2003e780 	.word	0x2003e780
   d6264:	2003e77c 	.word	0x2003e77c
   d6268:	2003e778 	.word	0x2003e778
   d626c:	2003e774 	.word	0x2003e774
   d6270:	2003e770 	.word	0x2003e770

000d6274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6274:	4b24      	ldr	r3, [pc, #144]	; (d6308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6276:	681a      	ldr	r2, [r3, #0]
   d6278:	07d0      	lsls	r0, r2, #31
   d627a:	bf5c      	itt	pl
   d627c:	2201      	movpl	r2, #1
   d627e:	601a      	strpl	r2, [r3, #0]
   d6280:	4b22      	ldr	r3, [pc, #136]	; (d630c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6282:	681a      	ldr	r2, [r3, #0]
   d6284:	07d1      	lsls	r1, r2, #31
   d6286:	bf5c      	itt	pl
   d6288:	2201      	movpl	r2, #1
   d628a:	601a      	strpl	r2, [r3, #0]
   d628c:	4b20      	ldr	r3, [pc, #128]	; (d6310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d628e:	681a      	ldr	r2, [r3, #0]
   d6290:	07d2      	lsls	r2, r2, #31
   d6292:	bf5c      	itt	pl
   d6294:	2201      	movpl	r2, #1
   d6296:	601a      	strpl	r2, [r3, #0]
   d6298:	4b1e      	ldr	r3, [pc, #120]	; (d6314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d629a:	681a      	ldr	r2, [r3, #0]
   d629c:	07d0      	lsls	r0, r2, #31
   d629e:	bf5c      	itt	pl
   d62a0:	2201      	movpl	r2, #1
   d62a2:	601a      	strpl	r2, [r3, #0]
   d62a4:	4b1c      	ldr	r3, [pc, #112]	; (d6318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d62a6:	681a      	ldr	r2, [r3, #0]
   d62a8:	07d1      	lsls	r1, r2, #31
   d62aa:	bf5c      	itt	pl
   d62ac:	2201      	movpl	r2, #1
   d62ae:	601a      	strpl	r2, [r3, #0]
   d62b0:	4b1a      	ldr	r3, [pc, #104]	; (d631c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d62b2:	681a      	ldr	r2, [r3, #0]
   d62b4:	07d2      	lsls	r2, r2, #31
   d62b6:	bf5c      	itt	pl
   d62b8:	2201      	movpl	r2, #1
   d62ba:	601a      	strpl	r2, [r3, #0]
   d62bc:	4b18      	ldr	r3, [pc, #96]	; (d6320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d62be:	681a      	ldr	r2, [r3, #0]
   d62c0:	07d0      	lsls	r0, r2, #31
   d62c2:	bf5c      	itt	pl
   d62c4:	2201      	movpl	r2, #1
   d62c6:	601a      	strpl	r2, [r3, #0]
   d62c8:	4b16      	ldr	r3, [pc, #88]	; (d6324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d62ca:	681a      	ldr	r2, [r3, #0]
   d62cc:	07d1      	lsls	r1, r2, #31
   d62ce:	bf5c      	itt	pl
   d62d0:	2201      	movpl	r2, #1
   d62d2:	601a      	strpl	r2, [r3, #0]
   d62d4:	4b14      	ldr	r3, [pc, #80]	; (d6328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d62d6:	681a      	ldr	r2, [r3, #0]
   d62d8:	07d2      	lsls	r2, r2, #31
   d62da:	bf5c      	itt	pl
   d62dc:	2201      	movpl	r2, #1
   d62de:	601a      	strpl	r2, [r3, #0]
   d62e0:	4b12      	ldr	r3, [pc, #72]	; (d632c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d62e2:	681a      	ldr	r2, [r3, #0]
   d62e4:	07d0      	lsls	r0, r2, #31
   d62e6:	bf5c      	itt	pl
   d62e8:	2201      	movpl	r2, #1
   d62ea:	601a      	strpl	r2, [r3, #0]
   d62ec:	4b10      	ldr	r3, [pc, #64]	; (d6330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d62ee:	681a      	ldr	r2, [r3, #0]
   d62f0:	07d1      	lsls	r1, r2, #31
   d62f2:	bf5c      	itt	pl
   d62f4:	2201      	movpl	r2, #1
   d62f6:	601a      	strpl	r2, [r3, #0]
   d62f8:	4b0e      	ldr	r3, [pc, #56]	; (d6334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d62fa:	681a      	ldr	r2, [r3, #0]
   d62fc:	07d2      	lsls	r2, r2, #31
   d62fe:	bf5c      	itt	pl
   d6300:	2201      	movpl	r2, #1
   d6302:	601a      	strpl	r2, [r3, #0]
   d6304:	4770      	bx	lr
   d6306:	bf00      	nop
   d6308:	2003e7cc 	.word	0x2003e7cc
   d630c:	2003e7c8 	.word	0x2003e7c8
   d6310:	2003e7c4 	.word	0x2003e7c4
   d6314:	2003e7c0 	.word	0x2003e7c0
   d6318:	2003e7bc 	.word	0x2003e7bc
   d631c:	2003e7b8 	.word	0x2003e7b8
   d6320:	2003e7b4 	.word	0x2003e7b4
   d6324:	2003e7b0 	.word	0x2003e7b0
   d6328:	2003e7ac 	.word	0x2003e7ac
   d632c:	2003e7a8 	.word	0x2003e7a8
   d6330:	2003e7a4 	.word	0x2003e7a4
   d6334:	2003e7a0 	.word	0x2003e7a0

000d6338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6338:	4b18      	ldr	r3, [pc, #96]	; (d639c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d633a:	681a      	ldr	r2, [r3, #0]
   d633c:	07d1      	lsls	r1, r2, #31
   d633e:	bf5c      	itt	pl
   d6340:	2201      	movpl	r2, #1
   d6342:	601a      	strpl	r2, [r3, #0]
   d6344:	4b16      	ldr	r3, [pc, #88]	; (d63a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6346:	681a      	ldr	r2, [r3, #0]
   d6348:	07d2      	lsls	r2, r2, #31
   d634a:	bf5c      	itt	pl
   d634c:	2201      	movpl	r2, #1
   d634e:	601a      	strpl	r2, [r3, #0]
   d6350:	4b14      	ldr	r3, [pc, #80]	; (d63a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6352:	681a      	ldr	r2, [r3, #0]
   d6354:	07d0      	lsls	r0, r2, #31
   d6356:	bf5c      	itt	pl
   d6358:	2201      	movpl	r2, #1
   d635a:	601a      	strpl	r2, [r3, #0]
   d635c:	4b12      	ldr	r3, [pc, #72]	; (d63a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d635e:	681a      	ldr	r2, [r3, #0]
   d6360:	07d1      	lsls	r1, r2, #31
   d6362:	bf5c      	itt	pl
   d6364:	2201      	movpl	r2, #1
   d6366:	601a      	strpl	r2, [r3, #0]
   d6368:	4b10      	ldr	r3, [pc, #64]	; (d63ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d636a:	681a      	ldr	r2, [r3, #0]
   d636c:	07d2      	lsls	r2, r2, #31
   d636e:	bf5c      	itt	pl
   d6370:	2201      	movpl	r2, #1
   d6372:	601a      	strpl	r2, [r3, #0]
   d6374:	4b0e      	ldr	r3, [pc, #56]	; (d63b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6376:	681a      	ldr	r2, [r3, #0]
   d6378:	07d0      	lsls	r0, r2, #31
   d637a:	bf5c      	itt	pl
   d637c:	2201      	movpl	r2, #1
   d637e:	601a      	strpl	r2, [r3, #0]
   d6380:	4b0c      	ldr	r3, [pc, #48]	; (d63b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6382:	681a      	ldr	r2, [r3, #0]
   d6384:	07d1      	lsls	r1, r2, #31
   d6386:	bf5c      	itt	pl
   d6388:	2201      	movpl	r2, #1
   d638a:	601a      	strpl	r2, [r3, #0]
   d638c:	4b0a      	ldr	r3, [pc, #40]	; (d63b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d638e:	681a      	ldr	r2, [r3, #0]
   d6390:	07d2      	lsls	r2, r2, #31
   d6392:	bf5c      	itt	pl
   d6394:	2201      	movpl	r2, #1
   d6396:	601a      	strpl	r2, [r3, #0]
   d6398:	4770      	bx	lr
   d639a:	bf00      	nop
   d639c:	2003e7ec 	.word	0x2003e7ec
   d63a0:	2003e7e8 	.word	0x2003e7e8
   d63a4:	2003e7e4 	.word	0x2003e7e4
   d63a8:	2003e7e0 	.word	0x2003e7e0
   d63ac:	2003e7dc 	.word	0x2003e7dc
   d63b0:	2003e7d8 	.word	0x2003e7d8
   d63b4:	2003e7d4 	.word	0x2003e7d4
   d63b8:	2003e7d0 	.word	0x2003e7d0

000d63bc <atoi>:
   d63bc:	220a      	movs	r2, #10
   d63be:	2100      	movs	r1, #0
   d63c0:	f000 b8fa 	b.w	d65b8 <strtol>

000d63c4 <atol>:
   d63c4:	220a      	movs	r2, #10
   d63c6:	2100      	movs	r1, #0
   d63c8:	f000 b8f6 	b.w	d65b8 <strtol>

000d63cc <__cxa_atexit>:
   d63cc:	b510      	push	{r4, lr}
   d63ce:	4c05      	ldr	r4, [pc, #20]	; (d63e4 <__cxa_atexit+0x18>)
   d63d0:	4613      	mov	r3, r2
   d63d2:	b12c      	cbz	r4, d63e0 <__cxa_atexit+0x14>
   d63d4:	460a      	mov	r2, r1
   d63d6:	4601      	mov	r1, r0
   d63d8:	2002      	movs	r0, #2
   d63da:	f3af 8000 	nop.w
   d63de:	bd10      	pop	{r4, pc}
   d63e0:	4620      	mov	r0, r4
   d63e2:	bd10      	pop	{r4, pc}
   d63e4:	00000000 	.word	0x00000000

000d63e8 <memcpy>:
   d63e8:	b510      	push	{r4, lr}
   d63ea:	1e43      	subs	r3, r0, #1
   d63ec:	440a      	add	r2, r1
   d63ee:	4291      	cmp	r1, r2
   d63f0:	d004      	beq.n	d63fc <memcpy+0x14>
   d63f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d63f6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d63fa:	e7f8      	b.n	d63ee <memcpy+0x6>
   d63fc:	bd10      	pop	{r4, pc}

000d63fe <memset>:
   d63fe:	4402      	add	r2, r0
   d6400:	4603      	mov	r3, r0
   d6402:	4293      	cmp	r3, r2
   d6404:	d002      	beq.n	d640c <memset+0xe>
   d6406:	f803 1b01 	strb.w	r1, [r3], #1
   d640a:	e7fa      	b.n	d6402 <memset+0x4>
   d640c:	4770      	bx	lr
	...

000d6410 <srand>:
   d6410:	b538      	push	{r3, r4, r5, lr}
   d6412:	4b12      	ldr	r3, [pc, #72]	; (d645c <srand+0x4c>)
   d6414:	681c      	ldr	r4, [r3, #0]
   d6416:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6418:	4605      	mov	r5, r0
   d641a:	b9d3      	cbnz	r3, d6452 <srand+0x42>
   d641c:	2018      	movs	r0, #24
   d641e:	f7fe fdb5 	bl	d4f8c <malloc>
   d6422:	f243 330e 	movw	r3, #13070	; 0x330e
   d6426:	63a0      	str	r0, [r4, #56]	; 0x38
   d6428:	8003      	strh	r3, [r0, #0]
   d642a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d642e:	8043      	strh	r3, [r0, #2]
   d6430:	f241 2334 	movw	r3, #4660	; 0x1234
   d6434:	8083      	strh	r3, [r0, #4]
   d6436:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d643a:	80c3      	strh	r3, [r0, #6]
   d643c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6440:	8103      	strh	r3, [r0, #8]
   d6442:	2305      	movs	r3, #5
   d6444:	8143      	strh	r3, [r0, #10]
   d6446:	230b      	movs	r3, #11
   d6448:	8183      	strh	r3, [r0, #12]
   d644a:	2201      	movs	r2, #1
   d644c:	2300      	movs	r3, #0
   d644e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6454:	2200      	movs	r2, #0
   d6456:	611d      	str	r5, [r3, #16]
   d6458:	615a      	str	r2, [r3, #20]
   d645a:	bd38      	pop	{r3, r4, r5, pc}
   d645c:	2003e368 	.word	0x2003e368

000d6460 <strcmp>:
   d6460:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6464:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6468:	2a01      	cmp	r2, #1
   d646a:	bf28      	it	cs
   d646c:	429a      	cmpcs	r2, r3
   d646e:	d0f7      	beq.n	d6460 <strcmp>
   d6470:	1ad0      	subs	r0, r2, r3
   d6472:	4770      	bx	lr

000d6474 <strlen>:
   d6474:	4603      	mov	r3, r0
   d6476:	f813 2b01 	ldrb.w	r2, [r3], #1
   d647a:	2a00      	cmp	r2, #0
   d647c:	d1fb      	bne.n	d6476 <strlen+0x2>
   d647e:	1a18      	subs	r0, r3, r0
   d6480:	3801      	subs	r0, #1
   d6482:	4770      	bx	lr

000d6484 <strncpy>:
   d6484:	b510      	push	{r4, lr}
   d6486:	4603      	mov	r3, r0
   d6488:	b142      	cbz	r2, d649c <strncpy+0x18>
   d648a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d648e:	f803 4b01 	strb.w	r4, [r3], #1
   d6492:	3a01      	subs	r2, #1
   d6494:	2c00      	cmp	r4, #0
   d6496:	d1f7      	bne.n	d6488 <strncpy+0x4>
   d6498:	441a      	add	r2, r3
   d649a:	e000      	b.n	d649e <strncpy+0x1a>
   d649c:	bd10      	pop	{r4, pc}
   d649e:	4293      	cmp	r3, r2
   d64a0:	d002      	beq.n	d64a8 <strncpy+0x24>
   d64a2:	f803 4b01 	strb.w	r4, [r3], #1
   d64a6:	e7fa      	b.n	d649e <strncpy+0x1a>
   d64a8:	bd10      	pop	{r4, pc}
	...

000d64ac <_strtol_r>:
   d64ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d64b0:	4680      	mov	r8, r0
   d64b2:	4840      	ldr	r0, [pc, #256]	; (d65b4 <_strtol_r+0x108>)
   d64b4:	f8d0 9000 	ldr.w	r9, [r0]
   d64b8:	460f      	mov	r7, r1
   d64ba:	463d      	mov	r5, r7
   d64bc:	f815 4b01 	ldrb.w	r4, [r5], #1
   d64c0:	eb09 0004 	add.w	r0, r9, r4
   d64c4:	7840      	ldrb	r0, [r0, #1]
   d64c6:	f000 0008 	and.w	r0, r0, #8
   d64ca:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d64ce:	b108      	cbz	r0, d64d4 <_strtol_r+0x28>
   d64d0:	462f      	mov	r7, r5
   d64d2:	e7f2      	b.n	d64ba <_strtol_r+0xe>
   d64d4:	2c2d      	cmp	r4, #45	; 0x2d
   d64d6:	d103      	bne.n	d64e0 <_strtol_r+0x34>
   d64d8:	1cbd      	adds	r5, r7, #2
   d64da:	787c      	ldrb	r4, [r7, #1]
   d64dc:	2601      	movs	r6, #1
   d64de:	e003      	b.n	d64e8 <_strtol_r+0x3c>
   d64e0:	2c2b      	cmp	r4, #43	; 0x2b
   d64e2:	bf04      	itt	eq
   d64e4:	787c      	ldrbeq	r4, [r7, #1]
   d64e6:	1cbd      	addeq	r5, r7, #2
   d64e8:	b113      	cbz	r3, d64f0 <_strtol_r+0x44>
   d64ea:	2b10      	cmp	r3, #16
   d64ec:	d10a      	bne.n	d6504 <_strtol_r+0x58>
   d64ee:	e05b      	b.n	d65a8 <_strtol_r+0xfc>
   d64f0:	2c30      	cmp	r4, #48	; 0x30
   d64f2:	d157      	bne.n	d65a4 <_strtol_r+0xf8>
   d64f4:	7828      	ldrb	r0, [r5, #0]
   d64f6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d64fa:	2858      	cmp	r0, #88	; 0x58
   d64fc:	d14d      	bne.n	d659a <_strtol_r+0xee>
   d64fe:	786c      	ldrb	r4, [r5, #1]
   d6500:	2310      	movs	r3, #16
   d6502:	3502      	adds	r5, #2
   d6504:	2e00      	cmp	r6, #0
   d6506:	bf14      	ite	ne
   d6508:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d650c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d6510:	2700      	movs	r7, #0
   d6512:	fbbc faf3 	udiv	sl, ip, r3
   d6516:	4638      	mov	r0, r7
   d6518:	fb03 cc1a 	mls	ip, r3, sl, ip
   d651c:	eb09 0e04 	add.w	lr, r9, r4
   d6520:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6524:	f01e 0f04 	tst.w	lr, #4
   d6528:	d001      	beq.n	d652e <_strtol_r+0x82>
   d652a:	3c30      	subs	r4, #48	; 0x30
   d652c:	e00b      	b.n	d6546 <_strtol_r+0x9a>
   d652e:	f01e 0e03 	ands.w	lr, lr, #3
   d6532:	d01b      	beq.n	d656c <_strtol_r+0xc0>
   d6534:	f1be 0f01 	cmp.w	lr, #1
   d6538:	bf0c      	ite	eq
   d653a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d653e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6542:	ebce 0404 	rsb	r4, lr, r4
   d6546:	42a3      	cmp	r3, r4
   d6548:	dd10      	ble.n	d656c <_strtol_r+0xc0>
   d654a:	f1b7 3fff 	cmp.w	r7, #4294967295
   d654e:	d00a      	beq.n	d6566 <_strtol_r+0xba>
   d6550:	4550      	cmp	r0, sl
   d6552:	d806      	bhi.n	d6562 <_strtol_r+0xb6>
   d6554:	d101      	bne.n	d655a <_strtol_r+0xae>
   d6556:	4564      	cmp	r4, ip
   d6558:	dc03      	bgt.n	d6562 <_strtol_r+0xb6>
   d655a:	fb03 4000 	mla	r0, r3, r0, r4
   d655e:	2701      	movs	r7, #1
   d6560:	e001      	b.n	d6566 <_strtol_r+0xba>
   d6562:	f04f 37ff 	mov.w	r7, #4294967295
   d6566:	f815 4b01 	ldrb.w	r4, [r5], #1
   d656a:	e7d7      	b.n	d651c <_strtol_r+0x70>
   d656c:	1c7b      	adds	r3, r7, #1
   d656e:	d10c      	bne.n	d658a <_strtol_r+0xde>
   d6570:	2e00      	cmp	r6, #0
   d6572:	f04f 0322 	mov.w	r3, #34	; 0x22
   d6576:	bf14      	ite	ne
   d6578:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d657c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6580:	f8c8 3000 	str.w	r3, [r8]
   d6584:	b92a      	cbnz	r2, d6592 <_strtol_r+0xe6>
   d6586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d658a:	b106      	cbz	r6, d658e <_strtol_r+0xe2>
   d658c:	4240      	negs	r0, r0
   d658e:	b172      	cbz	r2, d65ae <_strtol_r+0x102>
   d6590:	b107      	cbz	r7, d6594 <_strtol_r+0xe8>
   d6592:	1e69      	subs	r1, r5, #1
   d6594:	6011      	str	r1, [r2, #0]
   d6596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d659a:	2430      	movs	r4, #48	; 0x30
   d659c:	2b00      	cmp	r3, #0
   d659e:	d1b1      	bne.n	d6504 <_strtol_r+0x58>
   d65a0:	2308      	movs	r3, #8
   d65a2:	e7af      	b.n	d6504 <_strtol_r+0x58>
   d65a4:	230a      	movs	r3, #10
   d65a6:	e7ad      	b.n	d6504 <_strtol_r+0x58>
   d65a8:	2c30      	cmp	r4, #48	; 0x30
   d65aa:	d0a3      	beq.n	d64f4 <_strtol_r+0x48>
   d65ac:	e7aa      	b.n	d6504 <_strtol_r+0x58>
   d65ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d65b2:	bf00      	nop
   d65b4:	2003e304 	.word	0x2003e304

000d65b8 <strtol>:
   d65b8:	4613      	mov	r3, r2
   d65ba:	460a      	mov	r2, r1
   d65bc:	4601      	mov	r1, r0
   d65be:	4802      	ldr	r0, [pc, #8]	; (d65c8 <strtol+0x10>)
   d65c0:	6800      	ldr	r0, [r0, #0]
   d65c2:	f7ff bf73 	b.w	d64ac <_strtol_r>
   d65c6:	bf00      	nop
   d65c8:	2003e368 	.word	0x2003e368

000d65cc <dynalib_user>:
   d65cc:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d65dc:	00000000                                ....

000d65e0 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d65e0:	6b6e6c62 00666e69 00726576 2e352e30     blnkinf.ver.0.5.
   d65f0:	2d680034 74616562 00303100 66667562     4.h-beat.10.buff
   d6600:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d6610:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d6620:	32203320 20393130 323a3031 32333a34      3 2019 10:24:32
   d6630:	25000000 6c250069 6e690069 74756f00     ...%i.%li.in.out
   d6640:	6d777000 00776400 66007761 64373333     .pwm.dw.aw.f337d
   d6650:	65313932 34663535 61623638 34336465     291e55f486baed34
   d6660:	61363938 36633962 00356435 69746f4d     896ab9c65d5.Moti
   d6670:	44206e6f 63657465 21646574 00000000     on Detected!....

000d6680 <_ZL23BlynkWriteHandlerVector>:
   d6680:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6690:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d66a0:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d66b0:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d66c0:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d66d0:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d66e0:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d66f0:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6700:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6710:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6720:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6730:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6740:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6750:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6760:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6770:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6780:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6790:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d67a0:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d67b0:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d67c0:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d67d0:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d67e0:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d67f0:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6800:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6810:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6820:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6830:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6840:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6850:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6860:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..
   d6870:	000d4b13 000d4b13 000d4b13 000d4b13     .K...K...K...K..

000d6880 <_ZL22BlynkReadHandlerVector>:
   d6880:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6890:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d68a0:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d68b0:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d68c0:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d68d0:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d68e0:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d68f0:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6900:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6910:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6920:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6930:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6940:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6950:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6960:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6970:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6980:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6990:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d69a0:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d69b0:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d69c0:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d69d0:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d69e0:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d69f0:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6a00:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6a10:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6a20:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6a30:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6a40:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6a50:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6a60:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..
   d6a70:	000d4b11 000d4b11 000d4b11 000d4b11     .K...K...K...K..

000d6a80 <_ZTVN5spark13EthernetClassE>:
	...
   d6a88:	000d502b 000d5021 000d5017 000d500d     +P..!P...P...P..
   d6a98:	000d5001 000d4ff5 000d4fe9 000d4fe1     .P...O...O...O..
   d6aa8:	000d4fd7 000d4fcd 000d5e7d              .O...O..}^..

000d6ab4 <_ZTV8SPIClass>:
	...
   d6abc:	000d5049 000d504b 6e6c0066 006e6600     IP..KP..f.ln.fn.
   d6acc:	65646f63 74656400 006c6961 25000a0d     code.detail....%
   d6adc:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   d6aec:	005b2000 65646f63 00203d20 61746564     . [.code = .deta
   d6afc:	20736c69 6200203d 00647561 69726553     ils = .baud.Seri
   d6b0c:	53006c61 61697265 7400316c 00657079     al.Serial1.type.
   d6b1c:	61726170 6d63006d 64690064 646e6800     param.cmd.id.hnd
   d6b2c:	72747300 6966006d 6c00746c 61006c76     .strm.filt.lvl.a
   d6b3c:	61486464 656c646e 65720072 65766f6d     ddHandler.remove
   d6b4c:	646e6148 0072656c 6d756e65 646e6148     Handler.enumHand
   d6b5c:	7372656c 4f534a00 7274534e 4c6d6165     lers.JSONStreamL
   d6b6c:	6148676f 656c646e 70610072 6f6e0070     ogHandler.app.no
   d6b7c:	7400656e 65636172 666e6900 6177006f     ne.trace.info.wa
   d6b8c:	65006e72 726f7272 6e617000 61006369     rn.error.panic.a
   d6b9c:	5a006c6c 302b2500 253a6433 00753230     ll.Z.%+03d:%02u.
   d6bac:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d6bbc:	007a2553 74637361 00656d69              S%z.asctime.

000d6bc8 <_ZTV9IPAddress>:
	...
   d6bd0:	000d52fd 000d52ed 000d52ef              .R...R...R..

000d6bdc <_ZTV9USBSerial>:
	...
   d6be4:	000d541b 000d546b 000d5479 000d50b1     .T..kT..yT...P..
   d6bf4:	000d5457 000d541d 000d5433 000d5465     WT...T..3T..eT..
   d6c04:	000d5449 000d5417                       IT...T..

000d6c0c <_ZTV11USARTSerial>:
	...
   d6c14:	000d5521 000d5571 000d557f 000d50b1     !U..qU...U...P..
   d6c24:	000d5535 000d5557 000d5543 000d556b     5U..WU..CU..kU..
   d6c34:	000d5523 000d5527                       #U..'U..

000d6c3c <_ZTV7TwoWire>:
	...
   d6c44:	000d5625 000d566f 000d5647 000d5627     %V..oV..GV..'V..
   d6c54:	000d564f 000d5657 000d565f 000d5667     OV..WV.._V..gV..

000d6c64 <_ZTVN5spark9MeshClassE>:
	...
   d6c6c:	000d5707 000d56fd 000d56f3 000d56e9     .W...V...V...V..
   d6c7c:	000d56dd 000d56d1 000d56c5 000d56bd     .V...V...V...V..
   d6c8c:	000d56b3 000d56a9 000d5e7d              .V...V..}^..

000d6c98 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6ca0:	000d5891 000d5897 000d5d7f 000d58a5     .X...X...]...X..
   d6cb0:	000d5893                                .X..

000d6cb4 <_ZTV9TCPClient>:
	...
   d6cbc:	000d40cd 000d410d 000d5809 000d5823     .@...A...X..#X..
   d6ccc:	000d5c25 000d5a67 000d5a39 000d584d     %\..gZ..9Z..MX..
   d6cdc:	000d5afd 000d58a9 000d5a9b 000d5bf7     .Z...X...Z...[..
   d6cec:	000d584f 000d5887 000d5835 000d5999     OX...X..5X...Y..
   d6cfc:	000d5a19 69726977 7200676e 20766365     .Z..wiring.recv 
   d6d0c:	6f727265 203d2072 00006425              error = %d..

000d6d18 <_ZTVN5spark9WiFiClassE>:
	...
   d6d20:	000d5df5 000d5deb 000d5de1 000d5d97     .]...]...]...]..
   d6d30:	000d5dd5 000d5dc9 000d5dbd 000d5db5     .]...]...]...]..
   d6d40:	000d5dab 000d5da1 000d5e7d              .]...]..}^..

000d6d4c <_ZTVN5spark12NetworkClassE>:
	...
   d6d54:	000d5e15 000d5e1f 000d5e29 000d5e33     .^...^..)^..3^..
   d6d64:	000d5e3d 000d5e49 000d5e55 000d5e61     =^..I^..U^..a^..
   d6d74:	000d5e69 000d5e73 000d5e7d              i^..s^..}^..

000d6d80 <_ctype_>:
   d6d80:	20202000 20202020 28282020 20282828     .         ((((( 
   d6d90:	20202020 20202020 20202020 20202020                     
   d6da0:	10108820 10101010 10101010 10101010      ...............
   d6db0:	04040410 04040404 10040404 10101010     ................
   d6dc0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6dd0:	01010101 01010101 01010101 10101010     ................
   d6de0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d6df0:	02020202 02020202 02020202 10101010     ................
   d6e00:	00000020 00000000 00000000 00000000      ...............
	...

000d6e84 <__sf_fake_stdin>:
	...

000d6ea4 <__sf_fake_stdout>:
	...

000d6ec4 <__sf_fake_stderr>:
	...
   d6ee4:	00000043                                         C.

000d6ee6 <link_const_variable_data_end>:
	...

000d6ee8 <link_constructors_location>:
   d6ee8:	000d4ab1 	.word	0x000d4ab1
   d6eec:	000d4b01 	.word	0x000d4b01
   d6ef0:	000d4b0d 	.word	0x000d4b0d
   d6ef4:	000d4b41 	.word	0x000d4b41
   d6ef8:	000d5035 	.word	0x000d5035
   d6efc:	000d5089 	.word	0x000d5089
   d6f00:	000d50a1 	.word	0x000d50a1
   d6f04:	000d51b5 	.word	0x000d51b5
   d6f08:	000d51c5 	.word	0x000d51c5
   d6f0c:	000d51fd 	.word	0x000d51fd
   d6f10:	000d57bd 	.word	0x000d57bd
   d6f14:	000d5e01 	.word	0x000d5e01
   d6f18:	000d5f49 	.word	0x000d5f49
   d6f1c:	000d6099 	.word	0x000d6099
   d6f20:	000d612d 	.word	0x000d612d
   d6f24:	000d61b1 	.word	0x000d61b1
   d6f28:	000d6275 	.word	0x000d6275
   d6f2c:	000d6339 	.word	0x000d6339
