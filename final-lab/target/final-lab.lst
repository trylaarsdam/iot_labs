
c:/Users/Nerdom/Desktop/final-lab/target/final-lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007388  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001b484  2**0
                  CONTENTS
  3 .data         000000b8  2003e020  000db3a0  0000e020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000718  2003e0d8  2003e0d8  0001e0d8  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000db458  000db458  0001b458  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000db480  000db480  0001b480  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000fee64  00000000  00000000  0001b484  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000148ac  00000000  00000000  0011a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0002132a  00000000  00000000  0012eb94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000028b0  00000000  00000000  0014febe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004988  00000000  00000000  0015276e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003dad4  00000000  00000000  001570f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00033ba5  00000000  00000000  00194bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0010d574  00000000  00000000  001c876f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000db24  00000000  00000000  002d5ce4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	e8 a2 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fb13 	bl	d8658 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fb18 	bl	d866e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e020 	.word	0x2003e020
   d4048:	000db3a0 	.word	0x000db3a0
   d404c:	2003e0d8 	.word	0x2003e0d8
   d4050:	2003e0d8 	.word	0x2003e0d8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fd45 	bl	d6ae8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000db394 	.word	0x000db394
   d4080:	000db344 	.word	0x000db344

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 be34 	b.w	d4cf0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fe75 	bl	d4d78 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bcf7 	b.w	d6a84 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 ba37 	b.w	d6508 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f002 ba35 	b.w	d6508 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 ba3b 	b.w	d6518 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 ba39 	b.w	d6518 <free>
	...

000d40a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 f996 	bl	d63e0 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d6151 	.word	0x000d6151

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40cc:	4770      	bx	lr
	...

000d40d0 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
   d40d0:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d40d2:	f002 f845 	bl	d6160 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d40d6:	4b03      	ldr	r3, [pc, #12]	; (d40e4 <_ZN10CloudClass7processEv+0x14>)
   d40d8:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d40da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d40de:	f002 ba03 	b.w	d64e8 <spark_process>
   d40e2:	bf00      	nop
   d40e4:	2003e734 	.word	0x2003e734

000d40e8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40e8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ea:	6984      	ldr	r4, [r0, #24]
   d40ec:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZN9TCPClientD1Ev+0x30>)
   d40ee:	6003      	str	r3, [r0, #0]
   d40f0:	4605      	mov	r5, r0
   d40f2:	b17c      	cbz	r4, d4114 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40f4:	6863      	ldr	r3, [r4, #4]
   d40f6:	3b01      	subs	r3, #1
   d40f8:	6063      	str	r3, [r4, #4]
   d40fa:	b95b      	cbnz	r3, d4114 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40fc:	6823      	ldr	r3, [r4, #0]
   d40fe:	4620      	mov	r0, r4
   d4100:	689b      	ldr	r3, [r3, #8]
   d4102:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4104:	68a3      	ldr	r3, [r4, #8]
   d4106:	3b01      	subs	r3, #1
   d4108:	60a3      	str	r3, [r4, #8]
   d410a:	b91b      	cbnz	r3, d4114 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	4620      	mov	r0, r4
   d4110:	68db      	ldr	r3, [r3, #12]
   d4112:	4798      	blx	r3
   d4114:	4628      	mov	r0, r5
   d4116:	bd38      	pop	{r3, r4, r5, pc}
   d4118:	000dafbc 	.word	0x000dafbc

000d411c <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d411c:	b510      	push	{r4, lr}
   d411e:	4604      	mov	r4, r0
   d4120:	f7ff ffe2 	bl	d40e8 <_ZN9TCPClientD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}

000d4128 <_ZN9TCPClientD0Ev>:
   d4128:	b510      	push	{r4, lr}
   d412a:	4604      	mov	r4, r0
   d412c:	f7ff ffdc 	bl	d40e8 <_ZN9TCPClientD1Ev>
   d4130:	4620      	mov	r0, r4
   d4132:	211c      	movs	r1, #28
   d4134:	f003 fc27 	bl	d7986 <_ZdlPvj>
   d4138:	4620      	mov	r0, r4
   d413a:	bd10      	pop	{r4, pc}

000d413c <_ZNK10BlynkParam8iterator5asIntEv>:
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d413c:	6803      	ldr	r3, [r0, #0]
   d413e:	b12b      	cbz	r3, d414c <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d4140:	6842      	ldr	r2, [r0, #4]
   d4142:	4293      	cmp	r3, r2
   d4144:	d202      	bcs.n	d414c <_ZNK10BlynkParam8iterator5asIntEv+0x10>

        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d4146:	4618      	mov	r0, r3
   d4148:	f004 ba6b 	b.w	d8622 <atoi>
   d414c:	2000      	movs	r0, #0
   d414e:	4770      	bx	lr

000d4150 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d4150:	b538      	push	{r3, r4, r5, lr}
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4152:	6805      	ldr	r5, [r0, #0]
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   d4154:	4604      	mov	r4, r0
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4156:	b145      	cbz	r5, d416a <_ZN10BlynkParam8iteratorppEv+0x1a>
   d4158:	6843      	ldr	r3, [r0, #4]
   d415a:	429d      	cmp	r5, r3
   d415c:	d205      	bcs.n	d416a <_ZN10BlynkParam8iteratorppEv+0x1a>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   d415e:	4628      	mov	r0, r5
   d4160:	f004 fac0 	bl	d86e4 <strlen>
   d4164:	3001      	adds	r0, #1
   d4166:	4405      	add	r5, r0
   d4168:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   d416a:	4620      	mov	r0, r4
   d416c:	bd38      	pop	{r3, r4, r5, pc}

000d416e <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   d416e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4170:	4604      	mov	r4, r0
    if (str == NULL) {
   d4172:	460f      	mov	r7, r1
   d4174:	6846      	ldr	r6, [r0, #4]
   d4176:	b921      	cbnz	r1, d4182 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   d4178:	6803      	ldr	r3, [r0, #0]
   d417a:	1c72      	adds	r2, r6, #1
   d417c:	6042      	str	r2, [r0, #4]
   d417e:	5599      	strb	r1, [r3, r6]
        return;
   d4180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    add(str, strlen(str)+1);
   d4182:	4608      	mov	r0, r1
   d4184:	f004 faae 	bl	d86e4 <strlen>
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d4188:	68a3      	ldr	r3, [r4, #8]
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d418a:	1c45      	adds	r5, r0, #1
}

inline
void BlynkParam::add(const void* b, size_t l)
{
    if (len + l > buff_size)
   d418c:	19aa      	adds	r2, r5, r6
   d418e:	429a      	cmp	r2, r3
   d4190:	d808      	bhi.n	d41a4 <_ZN10BlynkParam3addEPKc+0x36>
        return;
    memcpy(buff+len, b, l);
   d4192:	6820      	ldr	r0, [r4, #0]
   d4194:	462a      	mov	r2, r5
   d4196:	4639      	mov	r1, r7
   d4198:	4430      	add	r0, r6
   d419a:	f004 fa5d 	bl	d8658 <memcpy>
    len += l;
   d419e:	6863      	ldr	r3, [r4, #4]
   d41a0:	441d      	add	r5, r3
   d41a2:	6065      	str	r5, [r4, #4]
   d41a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d41a8 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d41a8:	b570      	push	{r4, r5, r6, lr}
   d41aa:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d41ac:	6840      	ldr	r0, [r0, #4]
   d41ae:	68a6      	ldr	r6, [r4, #8]
   d41b0:	6825      	ldr	r5, [r4, #0]
   d41b2:	4a05      	ldr	r2, [pc, #20]	; (d41c8 <_ZN10BlynkParam3addEi+0x20>)
   d41b4:	460b      	mov	r3, r1
   d41b6:	1a31      	subs	r1, r6, r0
   d41b8:	4428      	add	r0, r5
   d41ba:	f002 f9b5 	bl	d6528 <snprintf>
   d41be:	6863      	ldr	r3, [r4, #4]
   d41c0:	3001      	adds	r0, #1
   d41c2:	4418      	add	r0, r3
   d41c4:	6060      	str	r0, [r4, #4]
   d41c6:	bd70      	pop	{r4, r5, r6, pc}
   d41c8:	000da34f 	.word	0x000da34f

000d41cc <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d41cc:	b570      	push	{r4, r5, r6, lr}
   d41ce:	4604      	mov	r4, r0
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d41d0:	6840      	ldr	r0, [r0, #4]
   d41d2:	68a6      	ldr	r6, [r4, #8]
   d41d4:	6825      	ldr	r5, [r4, #0]
   d41d6:	4a05      	ldr	r2, [pc, #20]	; (d41ec <_ZN10BlynkParam3addEl+0x20>)
   d41d8:	460b      	mov	r3, r1
   d41da:	1a31      	subs	r1, r6, r0
   d41dc:	4428      	add	r0, r5
   d41de:	f002 f9a3 	bl	d6528 <snprintf>
   d41e2:	6863      	ldr	r3, [r4, #4]
   d41e4:	3001      	adds	r0, #1
   d41e6:	4418      	add	r0, r3
   d41e8:	6060      	str	r0, [r4, #4]
   d41ea:	bd70      	pop	{r4, r5, r6, pc}
   d41ec:	000da352 	.word	0x000da352

000d41f0 <BlynkWidgetWrite0>:
uint16_t blynk_blue = 0;
bool blynk_buttonState = FALSE; //for the state trigger

//blynk other stuff (from the api, still no clue how this works, imo it is counter intuitive)
BLYNK_WRITE(blynk_virtual_button) //button for mode switching
{
   d41f0:	b510      	push	{r4, lr}
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
    long        asLong() const      { return atol(buff); }
    //long long   asLongLong() const  { return atoll(buff); }
#ifndef BLYNK_NO_FLOAT
    double      asDouble() const    { return atof(buff); }
   d41f2:	6808      	ldr	r0, [r1, #0]
   d41f4:	f004 fa12 	bl	d861c <atof>
  blynk_buttonState = param.asDouble();
   d41f8:	2200      	movs	r2, #0
   d41fa:	2300      	movs	r3, #0
   d41fc:	ec51 0b10 	vmov	r0, r1, d0
   d4200:	f04f 0401 	mov.w	r4, #1
   d4204:	f004 f92a 	bl	d845c <__aeabi_dcmpeq>
   d4208:	b108      	cbz	r0, d420e <BlynkWidgetWrite0+0x1e>
   d420a:	f04f 0400 	mov.w	r4, #0
   d420e:	4b01      	ldr	r3, [pc, #4]	; (d4214 <BlynkWidgetWrite0+0x24>)
   d4210:	701c      	strb	r4, [r3, #0]
   d4212:	bd10      	pop	{r4, pc}
   d4214:	2003e381 	.word	0x2003e381

000d4218 <BlynkWidgetWrite2>:
}
BLYNK_WRITE(blynk_red_zergba) //red part of zeRGBa
{
   d4218:	b508      	push	{r3, lr}
        : buff((char*)addr), len(length), buff_size(buffsize)
    {}

    const char* asStr() const       { return buff; }
    const char* asString() const    { return buff; }
    int         asInt() const       { return atoi(buff); }
   d421a:	6808      	ldr	r0, [r1, #0]
   d421c:	f004 fa01 	bl	d8622 <atoi>
  blynk_red = param.asInt(); 
   d4220:	4b01      	ldr	r3, [pc, #4]	; (d4228 <BlynkWidgetWrite2+0x10>)
   d4222:	8018      	strh	r0, [r3, #0]
   d4224:	bd08      	pop	{r3, pc}
   d4226:	bf00      	nop
   d4228:	2003e0dc 	.word	0x2003e0dc

000d422c <BlynkWidgetWrite3>:
}
BLYNK_WRITE(blynk_green_zergba) //green part of zeRGBa
{
   d422c:	b508      	push	{r3, lr}
   d422e:	6808      	ldr	r0, [r1, #0]
   d4230:	f004 f9f7 	bl	d8622 <atoi>
  blynk_green = param.asInt();
   d4234:	4b01      	ldr	r3, [pc, #4]	; (d423c <BlynkWidgetWrite3+0x10>)
   d4236:	8018      	strh	r0, [r3, #0]
   d4238:	bd08      	pop	{r3, pc}
   d423a:	bf00      	nop
   d423c:	2003e3c8 	.word	0x2003e3c8

000d4240 <BlynkWidgetWrite4>:
}
BLYNK_WRITE(blynk_blue_zergba) //blue part of zeRGBa
{
   d4240:	b508      	push	{r3, lr}
   d4242:	6808      	ldr	r0, [r1, #0]
   d4244:	f004 f9ed 	bl	d8622 <atoi>
  blynk_blue = param.asInt();
   d4248:	4b01      	ldr	r3, [pc, #4]	; (d4250 <BlynkWidgetWrite4+0x10>)
   d424a:	8018      	strh	r0, [r3, #0]
   d424c:	bd08      	pop	{r3, pc}
   d424e:	bf00      	nop
   d4250:	2003e114 	.word	0x2003e114
   d4254:	00000000 	.word	0x00000000

000d4258 <_Z9calc_tempv>:

void app_sync() {
  Blynk.syncAll();
}

void calc_temp() {
   d4258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  myDisplay.setTextSize(3);
   d425a:	4c2b      	ldr	r4, [pc, #172]	; (d4308 <_Z9calc_tempv+0xb0>)
  myDisplay.setTextColor(WHITE);
  myDisplay.setCursor(5,5);
  myDisplay.display();
  convertedTemp = (currentTemp * (3300.0/4095));
   d425c:	4e2b      	ldr	r6, [pc, #172]	; (d430c <_Z9calc_tempv+0xb4>)
   d425e:	4d2c      	ldr	r5, [pc, #176]	; (d4310 <_Z9calc_tempv+0xb8>)
void app_sync() {
  Blynk.syncAll();
}

void calc_temp() {
  myDisplay.setTextSize(3);
   d4260:	4620      	mov	r0, r4
   d4262:	2103      	movs	r1, #3
   d4264:	f001 f96c 	bl	d5540 <_ZN12Adafruit_GFX11setTextSizeEh>
  myDisplay.setTextColor(WHITE);
   d4268:	4620      	mov	r0, r4
   d426a:	2101      	movs	r1, #1
   d426c:	f001 f96d 	bl	d554a <_ZN12Adafruit_GFX12setTextColorEt>
  myDisplay.setCursor(5,5);
   d4270:	2205      	movs	r2, #5
   d4272:	4611      	mov	r1, r2
   d4274:	4620      	mov	r0, r4
   d4276:	f001 f960 	bl	d553a <_ZN12Adafruit_GFX9setCursorEss>
  myDisplay.display();
   d427a:	4620      	mov	r0, r4
   d427c:	f001 fd62 	bl	d5d44 <_ZN16Adafruit_SSD13067displayEv>
  convertedTemp = (currentTemp * (3300.0/4095));
   d4280:	6830      	ldr	r0, [r6, #0]
   d4282:	f003 fe2f 	bl	d7ee4 <__aeabi_f2d>
   d4286:	a31e      	add	r3, pc, #120	; (adr r3, d4300 <_Z9calc_tempv+0xa8>)
   d4288:	e9d3 2300 	ldrd	r2, r3, [r3]
   d428c:	f003 fe7e 	bl	d7f8c <__aeabi_dmul>
   d4290:	f004 f974 	bl	d857c <__aeabi_d2f>
   d4294:	6028      	str	r0, [r5, #0]
  currentTemp = analogRead(TEMP_SENSOR_INPUT);
   d4296:	2012      	movs	r0, #18
   d4298:	f003 faf1 	bl	d787e <analogRead>
   d429c:	ee07 0a90 	vmov	s15, r0
   d42a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d42a4:	edc6 7a00 	vstr	s15, [r6]
  Serial.println(currentTemp);
   d42a8:	f002 fd30 	bl	d6d0c <_Z16_fetch_usbserialv>
   d42ac:	4607      	mov	r7, r0
   d42ae:	6830      	ldr	r0, [r6, #0]
   d42b0:	f003 fe18 	bl	d7ee4 <__aeabi_f2d>
   d42b4:	ec41 0b10 	vmov	d0, r0, r1
   d42b8:	2102      	movs	r1, #2
   d42ba:	4638      	mov	r0, r7
   d42bc:	f002 fb5c 	bl	d6978 <_ZN5Print7printlnEdi>
  convertedTemp = ((convertedTemp - 50)/10);
   d42c0:	edd5 7a00 	vldr	s15, [r5]
   d42c4:	ed9f 7a13 	vldr	s14, [pc, #76]	; d4314 <_Z9calc_tempv+0xbc>
   d42c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d42cc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
   d42d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  myDisplay.clearDisplay();
   d42d4:	4620      	mov	r0, r4
  myDisplay.setCursor(5,5);
  myDisplay.display();
  convertedTemp = (currentTemp * (3300.0/4095));
  currentTemp = analogRead(TEMP_SENSOR_INPUT);
  Serial.println(currentTemp);
  convertedTemp = ((convertedTemp - 50)/10);
   d42d6:	ed85 7a00 	vstr	s14, [r5]
  myDisplay.clearDisplay();
   d42da:	f001 fbbf 	bl	d5a5c <_ZN16Adafruit_SSD130612clearDisplayEv>
  myDisplay.println(convertedTemp);
   d42de:	6828      	ldr	r0, [r5, #0]
   d42e0:	f003 fe00 	bl	d7ee4 <__aeabi_f2d>
   d42e4:	ec41 0b10 	vmov	d0, r0, r1
   d42e8:	4620      	mov	r0, r4
   d42ea:	2102      	movs	r1, #2
   d42ec:	f002 fb44 	bl	d6978 <_ZN5Print7printlnEdi>
  myDisplay.display();
   d42f0:	4620      	mov	r0, r4
}
   d42f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  currentTemp = analogRead(TEMP_SENSOR_INPUT);
  Serial.println(currentTemp);
  convertedTemp = ((convertedTemp - 50)/10);
  myDisplay.clearDisplay();
  myDisplay.println(convertedTemp);
  myDisplay.display();
   d42f6:	f001 bd25 	b.w	d5d44 <_ZN16Adafruit_SSD13067displayEv>
   d42fa:	bf00      	nop
   d42fc:	f3af 8000 	nop.w
   d4300:	99c99c9a 	.word	0x99c99c9a
   d4304:	3fe9c99c 	.word	0x3fe9c99c
   d4308:	2003e0e0 	.word	0x2003e0e0
   d430c:	2003e3c0 	.word	0x2003e3c0
   d4310:	2003e118 	.word	0x2003e118
   d4314:	42480000 	.word	0x42480000

000d4318 <_Z11evening_luxv>:
}

void evening_lux() {
   d4318:	b508      	push	{r3, lr}
  //TEST FOR VIRTUAL PINS 2:4 AND SET THEM TO VARIABLES
  analogWrite(RED_LED_OUTPUT, blynk_red);
   d431a:	4b08      	ldr	r3, [pc, #32]	; (d433c <_Z11evening_luxv+0x24>)
   d431c:	2002      	movs	r0, #2
   d431e:	8819      	ldrh	r1, [r3, #0]
   d4320:	f003 fac4 	bl	d78ac <_Z11analogWritetm>
  analogWrite(GREEN_LED_OUTPUT, blynk_green);
   d4324:	4b06      	ldr	r3, [pc, #24]	; (d4340 <_Z11evening_luxv+0x28>)
   d4326:	2003      	movs	r0, #3
   d4328:	8819      	ldrh	r1, [r3, #0]
   d432a:	f003 fabf 	bl	d78ac <_Z11analogWritetm>
  analogWrite(BLUE_LED_OUTPUT, blynk_blue);
   d432e:	4b05      	ldr	r3, [pc, #20]	; (d4344 <_Z11evening_luxv+0x2c>)
   d4330:	2004      	movs	r0, #4
   d4332:	8819      	ldrh	r1, [r3, #0]
}
   d4334:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void evening_lux() {
  //TEST FOR VIRTUAL PINS 2:4 AND SET THEM TO VARIABLES
  analogWrite(RED_LED_OUTPUT, blynk_red);
  analogWrite(GREEN_LED_OUTPUT, blynk_green);
  analogWrite(BLUE_LED_OUTPUT, blynk_blue);
   d4338:	f003 bab8 	b.w	d78ac <_Z11analogWritetm>
   d433c:	2003e0dc 	.word	0x2003e0dc
   d4340:	2003e3c8 	.word	0x2003e3c8
   d4344:	2003e114 	.word	0x2003e114

000d4348 <_Z11lux_updaterv>:
}

void lux_updater(){
   d4348:	b508      	push	{r3, lr}
  lux_level = analogRead(A2);
   d434a:	2011      	movs	r0, #17
   d434c:	f003 fa97 	bl	d787e <analogRead>
   d4350:	ee07 0a90 	vmov	s15, r0
   d4354:	4b02      	ldr	r3, [pc, #8]	; (d4360 <_Z11lux_updaterv+0x18>)
   d4356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d435a:	edc3 7a00 	vstr	s15, [r3]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	2003e3c4 	.word	0x2003e3c4

000d4364 <_Z10state_testv>:
  }
}

void state_test(){
  //test for button state on pin V0 and set night_state based on state
  if (blynk_buttonState == TRUE){
   d4364:	4b03      	ldr	r3, [pc, #12]	; (d4374 <_Z10state_testv+0x10>)
   d4366:	781a      	ldrb	r2, [r3, #0]
   d4368:	4b03      	ldr	r3, [pc, #12]	; (d4378 <_Z10state_testv+0x14>)
   d436a:	b102      	cbz	r2, d436e <_Z10state_testv+0xa>
    night_state = TRUE;
   d436c:	2201      	movs	r2, #1
  }
  else if(blynk_buttonState == FALSE){
    night_state = FALSE;
   d436e:	701a      	strb	r2, [r3, #0]
   d4370:	4770      	bx	lr
   d4372:	bf00      	nop
   d4374:	2003e381 	.word	0x2003e381
   d4378:	2003e380 	.word	0x2003e380

000d437c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d437c:	b508      	push	{r3, lr}
        state = CONNECTING;
   d437e:	2300      	movs	r3, #0
   d4380:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4382:	6800      	ldr	r0, [r0, #0]
   d4384:	f003 f867 	bl	d7456 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d4388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
private:

    void internalReconnect() {
        state = CONNECTING;
        conn.disconnect();
        BlynkOnDisconnected();
   d438c:	f001 be30 	b.w	d5ff0 <BlynkNoOpCbk>

000d4390 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d4390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d4394:	188e      	adds	r6, r1, r2
   d4396:	b08e      	sub	sp, #56	; 0x38
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d4398:	42b1      	cmp	r1, r6
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d439a:	4680      	mov	r8, r0
   d439c:	460d      	mov	r5, r1
   d439e:	4617      	mov	r7, r2
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d43a0:	9105      	str	r1, [sp, #20]
   d43a2:	9606      	str	r6, [sp, #24]
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d43a4:	f080 80ec 	bcs.w	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
   d43a8:	880b      	ldrh	r3, [r1, #0]
   d43aa:	f8ad 3012 	strh.w	r3, [sp, #18]
    if (++it >= param.end())
   d43ae:	a805      	add	r0, sp, #20
   d43b0:	f7ff fece 	bl	d4150 <_ZN10BlynkParam8iteratorppEv>
   d43b4:	6803      	ldr	r3, [r0, #0]
   d43b6:	429e      	cmp	r6, r3
   d43b8:	f240 80e2 	bls.w	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
   d43bc:	a805      	add	r0, sp, #20
   d43be:	f7ff febd 	bl	d413c <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   d43c2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   d43c6:	f247 2276 	movw	r2, #29302	; 0x7276
   d43ca:	4293      	cmp	r3, r2
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
        return;

    uint8_t pin = BLYNK_DECODE_PIN(it);
   d43cc:	b2c4      	uxtb	r4, r0

    switch(cmd16) {
   d43ce:	f000 809e 	beq.w	d450e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x17e>
   d43d2:	d80d      	bhi.n	d43f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x60>
   d43d4:	f247 2261 	movw	r2, #29281	; 0x7261
   d43d8:	4293      	cmp	r3, r2
   d43da:	d064      	beq.n	d44a6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   d43dc:	f247 2264 	movw	r2, #29284	; 0x7264
   d43e0:	4293      	cmp	r3, r2
   d43e2:	d039      	beq.n	d4458 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc8>
   d43e4:	f646 5270 	movw	r2, #28016	; 0x6d70
   d43e8:	4293      	cmp	r3, r2
   d43ea:	f040 80bb 	bne.w	d4564 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d4>
   d43ee:	e02f      	b.n	d4450 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
   d43f0:	f247 7264 	movw	r2, #30564	; 0x7764
   d43f4:	4293      	cmp	r3, r2
   d43f6:	d041      	beq.n	d447c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xec>
   d43f8:	f247 7276 	movw	r2, #30582	; 0x7776
   d43fc:	4293      	cmp	r3, r2
   d43fe:	f000 8097 	beq.w	d4530 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a0>
   d4402:	f247 7261 	movw	r2, #30561	; 0x7761
   d4406:	4293      	cmp	r3, r2
   d4408:	f040 80ac 	bne.w	d4564 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1d4>
   d440c:	e06c      	b.n	d44e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x158>

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            pin = BLYNK_DECODE_PIN(it);
   d440e:	a805      	add	r0, sp, #20
   d4410:	f7ff fe94 	bl	d413c <_ZNK10BlynkParam8iterator5asIntEv>
   d4414:	b2c5      	uxtb	r5, r0
            ++it;
   d4416:	a805      	add	r0, sp, #20
   d4418:	f7ff fe9a 	bl	d4150 <_ZN10BlynkParam8iteratorppEv>
   d441c:	9c05      	ldr	r4, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   d441e:	495a      	ldr	r1, [pc, #360]	; (d4588 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   d4420:	4620      	mov	r0, r4
   d4422:	f004 f955 	bl	d86d0 <strcmp>
   d4426:	4601      	mov	r1, r0
   d4428:	2800      	cmp	r0, #0
   d442a:	f000 80a5 	beq.w	d4578 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d442e:	4957      	ldr	r1, [pc, #348]	; (d458c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>)
   d4430:	4620      	mov	r0, r4
   d4432:	f004 f94d 	bl	d86d0 <strcmp>
   d4436:	2800      	cmp	r0, #0
   d4438:	f000 809d 	beq.w	d4576 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e6>
   d443c:	4954      	ldr	r1, [pc, #336]	; (d4590 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x200>)
   d443e:	4620      	mov	r0, r4
   d4440:	f004 f946 	bl	d86d0 <strcmp>
   d4444:	2800      	cmp	r0, #0
   d4446:	f000 8096 	beq.w	d4576 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e6>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d444a:	a805      	add	r0, sp, #20
   d444c:	f7ff fe80 	bl	d4150 <_ZN10BlynkParam8iteratorppEv>
    switch(cmd16) {

#ifndef BLYNK_NO_BUILTIN

    case BLYNK_HW_PM: {
        while (it < param.end()) {
   d4450:	9b05      	ldr	r3, [sp, #20]
   d4452:	429e      	cmp	r6, r3
   d4454:	d8db      	bhi.n	d440e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x7e>
   d4456:	e093      	b.n	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4458:	ab0a      	add	r3, sp, #40	; 0x28
   d445a:	9307      	str	r3, [sp, #28]
        }
    } break;
    case BLYNK_HW_DR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("dw");
   d445c:	a807      	add	r0, sp, #28
   d445e:	2310      	movs	r3, #16
   d4460:	2500      	movs	r5, #0
   d4462:	494c      	ldr	r1, [pc, #304]	; (d4594 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x204>)
   d4464:	9309      	str	r3, [sp, #36]	; 0x24
   d4466:	9508      	str	r5, [sp, #32]
   d4468:	f7ff fe81 	bl	d416e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d446c:	a807      	add	r0, sp, #28
   d446e:	4621      	mov	r1, r4
   d4470:	f7ff fe9a 	bl	d41a8 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d4474:	4620      	mov	r0, r4
   d4476:	f003 f9ef 	bl	d7858 <digitalRead>
   d447a:	e025      	b.n	d44c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x138>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
    } break;
    case BLYNK_HW_DW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d447c:	a805      	add	r0, sp, #20
   d447e:	f7ff fe67 	bl	d4150 <_ZN10BlynkParam8iteratorppEv>
   d4482:	6803      	ldr	r3, [r0, #0]
   d4484:	429e      	cmp	r6, r3
   d4486:	d97b      	bls.n	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
#ifdef ESP8266
        // Disable PWM...
        analogWrite(pin, 0);
#endif
#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d4488:	b2a4      	uxth	r4, r4
   d448a:	2101      	movs	r1, #1
   d448c:	4620      	mov	r0, r4
   d448e:	f003 f9b9 	bl	d7804 <pinMode>
#endif
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d4492:	a805      	add	r0, sp, #20
   d4494:	f7ff fe52 	bl	d413c <_ZNK10BlynkParam8iterator5asIntEv>
   d4498:	1c01      	adds	r1, r0, #0
   d449a:	bf18      	it	ne
   d449c:	2101      	movne	r1, #1
   d449e:	4620      	mov	r0, r4
   d44a0:	f003 f9c1 	bl	d7826 <digitalWrite>
    } break;
   d44a4:	e06c      	b.n	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
   d44a6:	ab0a      	add	r3, sp, #40	; 0x28
   d44a8:	9307      	str	r3, [sp, #28]
    case BLYNK_HW_AR: {
        char mem[16];
        BlynkParam rsp(mem, 0, sizeof(mem));
        rsp.add("aw");
   d44aa:	493b      	ldr	r1, [pc, #236]	; (d4598 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x208>)
   d44ac:	2310      	movs	r3, #16
   d44ae:	a807      	add	r0, sp, #28
   d44b0:	2500      	movs	r5, #0
   d44b2:	9309      	str	r3, [sp, #36]	; 0x24
   d44b4:	9508      	str	r5, [sp, #32]
   d44b6:	f7ff fe5a 	bl	d416e <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   d44ba:	a807      	add	r0, sp, #28
   d44bc:	4621      	mov	r1, r4
   d44be:	f7ff fe73 	bl	d41a8 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d44c2:	4620      	mov	r0, r4
   d44c4:	f003 f9db 	bl	d787e <analogRead>
   d44c8:	4601      	mov	r1, r0
   d44ca:	a807      	add	r0, sp, #28
   d44cc:	f7ff fe7e 	bl	d41cc <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d44d0:	9b08      	ldr	r3, [sp, #32]
   d44d2:	9502      	str	r5, [sp, #8]
   d44d4:	3b01      	subs	r3, #1
   d44d6:	9300      	str	r3, [sp, #0]
   d44d8:	9b07      	ldr	r3, [sp, #28]
   d44da:	9501      	str	r5, [sp, #4]
   d44dc:	462a      	mov	r2, r5
   d44de:	2114      	movs	r1, #20
   d44e0:	4640      	mov	r0, r8
   d44e2:	f000 fa51 	bl	d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    } break;
   d44e6:	e04b      	b.n	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
    case BLYNK_HW_AW: {
        // Should be 1 parameter (value)
        if (++it >= param.end())
   d44e8:	a805      	add	r0, sp, #20
   d44ea:	f7ff fe31 	bl	d4150 <_ZN10BlynkParam8iteratorppEv>
   d44ee:	6803      	ldr	r3, [r0, #0]
   d44f0:	429e      	cmp	r6, r3
   d44f2:	d945      	bls.n	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
            return;

#ifndef BLYNK_MINIMIZE_PINMODE_USAGE
        pinMode(pin, OUTPUT);
   d44f4:	b2a4      	uxth	r4, r4
   d44f6:	2101      	movs	r1, #1
   d44f8:	4620      	mov	r0, r4
   d44fa:	f003 f983 	bl	d7804 <pinMode>
#endif
        analogWrite(pin, it.asInt());
   d44fe:	a805      	add	r0, sp, #20
   d4500:	f7ff fe1c 	bl	d413c <_ZNK10BlynkParam8iterator5asIntEv>
   d4504:	4601      	mov	r1, r0
   d4506:	4620      	mov	r0, r4
   d4508:	f003 f9d0 	bl	d78ac <_Z11analogWritetm>
    } break;
   d450c:	e038      	b.n	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d450e:	ad0e      	add	r5, sp, #56	; 0x38
        WidgetReadHandler handler = GetReadHandler(pin);
   d4510:	4620      	mov	r0, r4
    } break;

#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
   d4512:	f805 4d10 	strb.w	r4, [r5, #-16]!
        WidgetReadHandler handler = GetReadHandler(pin);
   d4516:	f001 fd6d 	bl	d5ff4 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d451a:	4603      	mov	r3, r0
            handler(req);
   d451c:	4628      	mov	r0, r5
#endif

    case BLYNK_HW_VR: {
        BlynkReq req = { pin };
        WidgetReadHandler handler = GetReadHandler(pin);
        if (handler && (handler != BlynkWidgetRead)) {
   d451e:	b123      	cbz	r3, d452a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19a>
   d4520:	4a1e      	ldr	r2, [pc, #120]	; (d459c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>)
   d4522:	4293      	cmp	r3, r2
   d4524:	d001      	beq.n	d452a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19a>
            handler(req);
   d4526:	4798      	blx	r3
   d4528:	e02a      	b.n	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        } else {
            BlynkWidgetReadDefault(req);
   d452a:	f001 fd5f 	bl	d5fec <BlynkWidgetRead>
        }
    } break;
   d452e:	e027      	b.n	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
    case BLYNK_HW_VW: {
        ++it;
   d4530:	a805      	add	r0, sp, #20
   d4532:	f7ff fe0d 	bl	d4150 <_ZN10BlynkParam8iteratorppEv>
   d4536:	9b05      	ldr	r3, [sp, #20]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d4538:	930a      	str	r3, [sp, #40]	; 0x28
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
   d453a:	1b5d      	subs	r5, r3, r5
   d453c:	1b7d      	subs	r5, r7, r5
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d453e:	4620      	mov	r0, r4
   d4540:	950b      	str	r5, [sp, #44]	; 0x2c
   d4542:	950c      	str	r5, [sp, #48]	; 0x30
    } break;
    case BLYNK_HW_VW: {
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
   d4544:	f88d 401c 	strb.w	r4, [sp, #28]
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d4548:	f001 fd5e 	bl	d6008 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d454c:	4603      	mov	r3, r0
            handler(req, param2);
   d454e:	a90a      	add	r1, sp, #40	; 0x28
   d4550:	a807      	add	r0, sp, #28
        ++it;
        char* start = (char*)it.asStr();
        BlynkParam param2(start, len - (start - (char*)buff));
        BlynkReq req = { pin };
        WidgetWriteHandler handler = GetWriteHandler(pin);
        if (handler && (handler != BlynkWidgetWrite)) {
   d4552:	b123      	cbz	r3, d455e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ce>
   d4554:	4a12      	ldr	r2, [pc, #72]	; (d45a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x210>)
   d4556:	4293      	cmp	r3, r2
   d4558:	d001      	beq.n	d455e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ce>
            handler(req, param2);
   d455a:	4798      	blx	r3
   d455c:	e010      	b.n	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
        } else {
            BlynkWidgetWriteDefault(req, param2);
   d455e:	f001 fd46 	bl	d5fee <BlynkWidgetWrite>
        }
    } break;
   d4562:	e00d      	b.n	d4580 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d4564:	2300      	movs	r3, #0
   d4566:	2102      	movs	r1, #2
   d4568:	9100      	str	r1, [sp, #0]
   d456a:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   d456e:	9302      	str	r3, [sp, #8]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	4619      	mov	r1, r3
   d4574:	e7b4      	b.n	d44e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x150>
            pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
                pinMode(pin, OUTPUT);
   d4576:	2101      	movs	r1, #1
   d4578:	4628      	mov	r0, r5
   d457a:	f003 f943 	bl	d7804 <pinMode>
   d457e:	e764      	b.n	d444a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
    }
}
   d4580:	b00e      	add	sp, #56	; 0x38
   d4582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4586:	bf00      	nop
   d4588:	000da356 	.word	0x000da356
   d458c:	000da359 	.word	0x000da359
   d4590:	000da35d 	.word	0x000da35d
   d4594:	000da361 	.word	0x000da361
   d4598:	000da364 	.word	0x000da364
   d459c:	000d5fed 	.word	0x000d5fed
   d45a0:	000d5fef 	.word	0x000d5fef

000d45a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d45a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d45a8:	b08e      	sub	sp, #56	; 0x38
   d45aa:	af04      	add	r7, sp, #16
   d45ac:	4605      	mov	r5, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d45ae:	2205      	movs	r2, #5
   d45b0:	f107 010c 	add.w	r1, r7, #12
   d45b4:	6800      	ldr	r0, [r0, #0]
   d45b6:	f002 f9ff 	bl	d69b8 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d45ba:	2800      	cmp	r0, #0
   d45bc:	f000 8119 	beq.w	d47f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d45c0:	2805      	cmp	r0, #5
   d45c2:	d001      	beq.n	d45c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>

    if (ret < 0 || hdr.msg_id == 0) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
   d45c4:	2000      	movs	r0, #0
   d45c6:	e119      	b.n	d47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d45c8:	f8b7 200d 	ldrh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d45cc:	f8b7 400f 	ldrh.w	r4, [r7, #15]
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d45d0:	0a13      	lsrs	r3, r2, #8
   d45d2:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d45d6:	0a23      	lsrs	r3, r4, #8
   d45d8:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d45dc:	b292      	uxth	r2, r2
    hdr.length = ntohs(hdr.length);
   d45de:	b2a4      	uxth	r4, r4
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d45e0:	f8a7 200d 	strh.w	r2, [r7, #13]
    hdr.length = ntohs(hdr.length);
   d45e4:	f8a7 400f 	strh.w	r4, [r7, #15]

    if (ret == 0) {
        return true; // Considered OK (no data on input)
    }

    if (ret < 0 || hdr.msg_id == 0) {
   d45e8:	2a00      	cmp	r2, #0
   d45ea:	d0eb      	beq.n	d45c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
        BLYNK_LOG2(BLYNK_F("Bad hdr len: "), ret);
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d45ec:	7b3b      	ldrb	r3, [r7, #12]
   d45ee:	b9f3      	cbnz	r3, d462e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
        lastActivityIn = BlynkMillis();
   d45f0:	f001 fcf8 	bl	d5fe4 <_Z11BlynkMillisv>

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d45f4:	7f6b      	ldrb	r3, [r5, #29]
#endif
        return false;
    }

    if (hdr.type == BLYNK_CMD_RESPONSE) {
        lastActivityIn = BlynkMillis();
   d45f6:	60e8      	str	r0, [r5, #12]
   d45f8:	f8b7 200f 	ldrh.w	r2, [r7, #15]

#ifndef BLYNK_USE_DIRECT_CONNECT
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d45fc:	b99b      	cbnz	r3, d4626 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   d45fe:	f8b7 100d 	ldrh.w	r1, [r7, #13]
   d4602:	2901      	cmp	r1, #1
   d4604:	d10f      	bne.n	d4626 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
            switch (hdr.length) {
   d4606:	2a04      	cmp	r2, #4
   d4608:	d001      	beq.n	d460e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   d460a:	2ac8      	cmp	r2, #200	; 0xc8
   d460c:	d1da      	bne.n	d45c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x20>
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
                state = CONNECTED;
   d460e:	2401      	movs	r4, #1
        if (state == CONNECTING && (1 == hdr.msg_id)) {
            switch (hdr.length) {
            case BLYNK_SUCCESS:
            case BLYNK_ALREADY_REGISTERED:
                BLYNK_LOG3(BLYNK_F("Ready (ping: "), lastActivityIn-lastHeartbeat, BLYNK_F("ms)."));
                lastHeartbeat = lastActivityIn;
   d4610:	6168      	str	r0, [r5, #20]
                state = CONNECTED;
   d4612:	776c      	strb	r4, [r5, #29]
#ifdef BLYNK_DEBUG
                if (size_t ram = BlynkFreeRam()) {
                    BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
                }
#endif
                this->sendInfo();
   d4614:	4628      	mov	r0, r5
   d4616:	f000 fabb 	bl	d4b90 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d461a:	f7ff fd59 	bl	d40d0 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d461e:	f001 fce7 	bl	d5ff0 <BlynkNoOpCbk>
                return true;
   d4622:	4620      	mov	r0, r4
   d4624:	e0ea      	b.n	d47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
            default:
                BLYNK_LOG2(BLYNK_F("Connect failed. code: "), hdr.length);
            }
            return false;
        }
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d4626:	1f50      	subs	r0, r2, #5
   d4628:	bf18      	it	ne
   d462a:	2001      	movne	r0, #1
   d462c:	e0e6      	b.n	d47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
#endif
        // TODO: return code may indicate App presence
        return true;
    }

    if (hdr.length > BLYNK_MAX_READBYTES) {
   d462e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   d4632:	d903      	bls.n	d463c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        BLYNK_LOG2(BLYNK_F("Packet too big: "), hdr.length);
        // TODO: Flush
        internalReconnect();
   d4634:	4628      	mov	r0, r5
   d4636:	f7ff fea1 	bl	d437c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d463a:	e0da      	b.n	d47f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24e>
        return true;
    }

    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d463c:	f104 0308 	add.w	r3, r4, #8
   d4640:	f023 0307 	bic.w	r3, r3, #7
   d4644:	46e8      	mov	r8, sp
   d4646:	ebad 0d03 	sub.w	sp, sp, r3
   d464a:	ae04      	add	r6, sp, #16
   d464c:	4622      	mov	r2, r4
   d464e:	4631      	mov	r1, r6
   d4650:	6828      	ldr	r0, [r5, #0]
   d4652:	f002 f9b1 	bl	d69b8 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d4656:	4284      	cmp	r4, r0
   d4658:	f04f 0400 	mov.w	r4, #0
   d465c:	f040 80c4 	bne.w	d47e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x244>
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
    }
    inputBuffer[hdr.length] = '\0';
   d4660:	f8b7 300f 	ldrh.w	r3, [r7, #15]
   d4664:	54f4      	strb	r4, [r6, r3]

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d4666:	f001 fcbd 	bl	d5fe4 <_Z11BlynkMillisv>

    switch (hdr.type)
   d466a:	7b3b      	ldrb	r3, [r7, #12]
    }
    inputBuffer[hdr.length] = '\0';

    BLYNK_DBG_DUMP(">", inputBuffer, hdr.length);

    lastActivityIn = BlynkMillis();
   d466c:	60e8      	str	r0, [r5, #12]

    switch (hdr.type)
   d466e:	2b11      	cmp	r3, #17
   d4670:	d072      	beq.n	d4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
   d4672:	d806      	bhi.n	d4682 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xde>
   d4674:	2b06      	cmp	r3, #6
   d4676:	d020      	beq.n	d46ba <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x116>
   d4678:	2b0f      	cmp	r3, #15
   d467a:	d060      	beq.n	d473e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
   d467c:	2b02      	cmp	r3, #2
   d467e:	d009      	beq.n	d4694 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf0>
   d4680:	e0ae      	b.n	d47e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d4682:	2b29      	cmp	r3, #41	; 0x29
   d4684:	d025      	beq.n	d46d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x12e>
   d4686:	2b37      	cmp	r3, #55	; 0x37
   d4688:	f000 80b0 	beq.w	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
   d468c:	2b14      	cmp	r3, #20
   d468e:	f040 80a7 	bne.w	d47e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d4692:	e054      	b.n	d473e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x19a>
            BLYNK_LOG1(BLYNK_F("Invalid token"));
            sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_INVALID_TOKEN);
            break;
        }
#endif
        if (state == CONNECTING) {
   d4694:	7f6b      	ldrb	r3, [r5, #29]
   d4696:	b943      	cbnz	r3, d46aa <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x106>
            BLYNK_LOG1(BLYNK_F("Ready"));
            state = CONNECTED;
   d4698:	2301      	movs	r3, #1
   d469a:	776b      	strb	r3, [r5, #29]
#ifdef BLYNK_DEBUG
            if (size_t ram = BlynkFreeRam()) {
                BLYNK_LOG2(BLYNK_F("Free RAM: "), ram);
            }
#endif
            this->sendInfo();
   d469c:	4628      	mov	r0, r5
   d469e:	f000 fa77 	bl	d4b90 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d46a2:	f7ff fd15 	bl	d40d0 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d46a6:	f001 fca3 	bl	d5ff0 <BlynkNoOpCbk>
        }
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d46aa:	2300      	movs	r3, #0
   d46ac:	21c8      	movs	r1, #200	; 0xc8
   d46ae:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d46b2:	9302      	str	r3, [sp, #8]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	9100      	str	r1, [sp, #0]
   d46b8:	e006      	b.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x124>
    } break;
    case BLYNK_CMD_PING: {
        sendCmd(BLYNK_CMD_RESPONSE, hdr.msg_id, NULL, BLYNK_SUCCESS);
   d46ba:	23c8      	movs	r3, #200	; 0xc8
   d46bc:	f8b7 200d 	ldrh.w	r2, [r7, #13]
   d46c0:	9300      	str	r3, [sp, #0]
   d46c2:	9402      	str	r4, [sp, #8]
   d46c4:	9401      	str	r4, [sp, #4]
   d46c6:	4623      	mov	r3, r4
   d46c8:	4619      	mov	r1, r3
   d46ca:	4628      	mov	r0, r5
   d46cc:	f000 f95c 	bl	d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d46d0:	e08c      	b.n	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
   d46d2:	68ab      	ldr	r3, [r5, #8]
   d46d4:	b91b      	cbnz	r3, d46de <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x13a>
             redir_serv = (char*)malloc(32);
   d46d6:	2020      	movs	r0, #32
   d46d8:	f001 ff16 	bl	d6508 <malloc>
   d46dc:	60a8      	str	r0, [r5, #8]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d46de:	f8b7 400f 	ldrh.w	r4, [r7, #15]
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d46e2:	61fe      	str	r6, [r7, #28]
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d46e4:	4434      	add	r4, r6
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit

        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d46e6:	42a6      	cmp	r6, r4
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d46e8:	623c      	str	r4, [r7, #32]
   d46ea:	d301      	bcc.n	d46f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x14c>
            return false;
   d46ec:	2000      	movs	r0, #0
   d46ee:	e07e      	b.n	d47ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        strncpy(redir_serv, it.asStr(), 32);
   d46f0:	2220      	movs	r2, #32
   d46f2:	4631      	mov	r1, r6
   d46f4:	68a8      	ldr	r0, [r5, #8]
   d46f6:	f004 f812 	bl	d871e <strncpy>
        if (++it < param.end())
   d46fa:	f107 001c 	add.w	r0, r7, #28
   d46fe:	f7ff fd27 	bl	d4150 <_ZN10BlynkParam8iteratorppEv>
   d4702:	6803      	ldr	r3, [r0, #0]
   d4704:	42a3      	cmp	r3, r4
   d4706:	d207      	bcs.n	d4718 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
        //long long   asLongLong() const  { return atoll(ptr); }
#ifndef BLYNK_NO_FLOAT
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4708:	69f8      	ldr	r0, [r7, #28]
   d470a:	b118      	cbz	r0, d4714 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d470c:	6a3b      	ldr	r3, [r7, #32]
   d470e:	4298      	cmp	r0, r3
   d4710:	d371      	bcc.n	d47f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x252>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d4712:	2000      	movs	r0, #0
            redir_port = it.asLong();
   d4714:	b284      	uxth	r4, r0
   d4716:	e000      	b.n	d471a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x176>
    case BLYNK_CMD_REDIRECT: {
        if (!redir_serv) {
             redir_serv = (char*)malloc(32);
        }
        BlynkParam param(inputBuffer, hdr.length);
        uint16_t redir_port = BLYNK_DEFAULT_PORT; // TODO: Fixit
   d4718:	2450      	movs	r4, #80	; 0x50
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d471a:	6828      	ldr	r0, [r5, #0]
   d471c:	f002 fe9b 	bl	d7456 <_ZN9TCPClient4stopEv>
        strncpy(redir_serv, it.asStr(), 32);
        if (++it < param.end())
            redir_port = it.asLong();
        BLYNK_LOG4(BLYNK_F("Redirecting to "), redir_serv, ':', redir_port);
        conn.disconnect();
        conn.begin(redir_serv, redir_port);
   d4720:	682b      	ldr	r3, [r5, #0]
   d4722:	68aa      	ldr	r2, [r5, #8]
        port = p;
        addr = a;
    }

    void begin(const char* d, uint16_t p) {
        domain = d;
   d4724:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d4726:	871c      	strh	r4, [r3, #56]	; 0x38
        state = CONNECTING;
   d4728:	2300      	movs	r3, #0
   d472a:	776b      	strb	r3, [r5, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d472c:	f001 fc5a 	bl	d5fe4 <_Z11BlynkMillisv>
   d4730:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4734:	3808      	subs	r0, #8
   d4736:	6128      	str	r0, [r5, #16]
   d4738:	60e8      	str	r0, [r5, #12]
   d473a:	6168      	str	r0, [r5, #20]
   d473c:	e056      	b.n	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d473e:	68fb      	ldr	r3, [r7, #12]
        this->processCmd(inputBuffer, hdr.length);
   d4740:	f8b7 200f 	ldrh.w	r2, [r7, #15]
        state = CONNECTING;
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
    } break;
    case BLYNK_CMD_HARDWARE:
    case BLYNK_CMD_BRIDGE: {
        msgIdOutOverride = hdr.msg_id;
   d4744:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4748:	836b      	strh	r3, [r5, #26]
        this->processCmd(inputBuffer, hdr.length);
   d474a:	4631      	mov	r1, r6
   d474c:	4628      	mov	r0, r5
   d474e:	f7ff fe1f 	bl	d4390 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d4752:	2300      	movs	r3, #0
   d4754:	836b      	strh	r3, [r5, #26]
   d4756:	e049      	b.n	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    double      asDouble() const    { return atof(buff); }
    float       asFloat() const     { return atof(buff); }
#endif
    bool isEmpty() const            { return *buff == '\0'; }

    iterator begin() const { return iterator(buff, buff+len); }
   d4758:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    } break;
    case BLYNK_CMD_INTERNAL: {
        BlynkReq req = { 0 };
   d475c:	713c      	strb	r4, [r7, #4]
   d475e:	4433      	add	r3, r6
        BlynkParam param(inputBuffer, hdr.length);
        BlynkParam::iterator it = param.begin();
        if (it >= param.end())
   d4760:	429e      	cmp	r6, r3
{
public:
    class iterator
    {
    public:
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4762:	617e      	str	r6, [r7, #20]
   d4764:	61bb      	str	r3, [r7, #24]
   d4766:	d241      	bcs.n	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
            return true;

        uint32_t cmd32;
        memcpy(&cmd32, it.asStr(), sizeof(cmd32));
   d4768:	6830      	ldr	r0, [r6, #0]
   d476a:	60b8      	str	r0, [r7, #8]

        ++it;
   d476c:	f107 0014 	add.w	r0, r7, #20
   d4770:	f7ff fcee 	bl	d4150 <_ZN10BlynkParam8iteratorppEv>
   d4774:	697a      	ldr	r2, [r7, #20]
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d4776:	f8b7 300f 	ldrh.w	r3, [r7, #15]
    };

public:
    explicit
    BlynkParam(const void* addr, size_t length)
        : buff((char*)addr), len(length), buff_size(length)
   d477a:	61fa      	str	r2, [r7, #28]
   d477c:	1b96      	subs	r6, r2, r6
   d477e:	1b9e      	subs	r6, r3, r6
        BlynkParam param2(start, length);

        switch (cmd32) {
   d4780:	4a20      	ldr	r2, [pc, #128]	; (d4804 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x260>)
   d4782:	68bb      	ldr	r3, [r7, #8]
   d4784:	623e      	str	r6, [r7, #32]
   d4786:	4293      	cmp	r3, r2
   d4788:	627e      	str	r6, [r7, #36]	; 0x24
   d478a:	d01d      	beq.n	d47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   d478c:	d80b      	bhi.n	d47a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x202>
   d478e:	f102 32fd 	add.w	r2, r2, #4261281277	; 0xfdfdfdfd
   d4792:	f102 2202 	add.w	r2, r2, #33554944	; 0x2000200
   d4796:	4293      	cmp	r3, r2
   d4798:	d128      	bne.n	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d479a:	f107 011c 	add.w	r1, r7, #28
   d479e:	1d38      	adds	r0, r7, #4
   d47a0:	f001 fc25 	bl	d5fee <BlynkWidgetWrite>
   d47a4:	e022      	b.n	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        ++it;
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
   d47a6:	4a18      	ldr	r2, [pc, #96]	; (d4808 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x264>)
   d47a8:	4293      	cmp	r3, r2
   d47aa:	d013      	beq.n	d47d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x230>
   d47ac:	f102 629f 	add.w	r2, r2, #83361792	; 0x4f80000
   d47b0:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
   d47b4:	f502 7280 	add.w	r2, r2, #256	; 0x100
   d47b8:	4293      	cmp	r3, r2
   d47ba:	d117      	bne.n	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d47bc:	f107 011c 	add.w	r1, r7, #28
   d47c0:	1d38      	adds	r0, r7, #4
   d47c2:	f001 fc14 	bl	d5fee <BlynkWidgetWrite>
   d47c6:	e011      	b.n	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        char* start = (char*)(it).asStr();
        unsigned length = hdr.length - (start - (char*)inputBuffer);
        BlynkParam param2(start, length);

        switch (cmd32) {
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d47c8:	f107 011c 	add.w	r1, r7, #28
   d47cc:	1d38      	adds	r0, r7, #4
   d47ce:	f001 fc0e 	bl	d5fee <BlynkWidgetWrite>
   d47d2:	e00b      	b.n	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d47d4:	f107 011c 	add.w	r1, r7, #28
   d47d8:	1d38      	adds	r0, r7, #4
   d47da:	f001 fc08 	bl	d5fee <BlynkWidgetWrite>
   d47de:	e005      	b.n	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    default: {
#ifdef BLYNK_DEBUG
        BLYNK_LOG2(BLYNK_F("Invalid header type: "), hdr.type);
#endif
        // TODO: Flush
        internalReconnect();
   d47e0:	4628      	mov	r0, r5
   d47e2:	f7ff fdcb 	bl	d437c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d47e6:	e001      	b.n	d47ec <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x248>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
#ifdef BLYNK_DEBUG
        BLYNK_LOG1(BLYNK_F("Can't read body"));
#endif
        return false;
   d47e8:	4620      	mov	r0, r4
   d47ea:	e000      	b.n	d47ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24a>
        // TODO: Flush
        internalReconnect();
    } break;
    }

    return true;
   d47ec:	2001      	movs	r0, #1
   d47ee:	46c5      	mov	sp, r8
   d47f0:	e004      	b.n	d47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
{
    BlynkHeader hdr;
    const int ret = readHeader(hdr);

    if (ret == 0) {
        return true; // Considered OK (no data on input)
   d47f2:	2001      	movs	r0, #1
   d47f4:	e002      	b.n	d47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x258>
        operator const char* () const   { return asStr(); }
        operator int () const           { return asInt(); }
        const char* asStr() const       { return ptr; }
        const char* asString() const    { return ptr; }
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d47f6:	f003 ff18 	bl	d862a <atol>
   d47fa:	e78b      	b.n	d4714 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
        internalReconnect();
    } break;
    }

    return true;
}
   d47fc:	3728      	adds	r7, #40	; 0x28
   d47fe:	46bd      	mov	sp, r7
   d4800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4804:	00637472 	.word	0x00637472
   d4808:	6e6f6361 	.word	0x6e6f6361

000d480c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
protected:
    BlynkState state;
};

template <class Transp>
bool BlynkProtocol<Transp>::run(bool avail)
   d480c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4810:	4604      	mov	r4, r0
   d4812:	b08a      	sub	sp, #40	; 0x28
   d4814:	460d      	mov	r5, r1
{
    BLYNK_RUN_YIELD();
   d4816:	f7ff fc5b 	bl	d40d0 <_ZN10CloudClass7processEv>

    if (state == DISCONNECTED) {
   d481a:	7f63      	ldrb	r3, [r4, #29]
   d481c:	2b02      	cmp	r3, #2
   d481e:	f000 809d 	beq.w	d495c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x150>
      avg -= 1;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d4822:	7f23      	ldrb	r3, [r4, #28]
        return false;
    }

    // Detect nesting
    BlynkHelperAutoInc guard(nesting);
    if (msgIdOutOverride || nesting > 2) {
   d4824:	8b62      	ldrh	r2, [r4, #26]
   d4826:	3301      	adds	r3, #1
   d4828:	b2db      	uxtb	r3, r3
   d482a:	7723      	strb	r3, [r4, #28]
   d482c:	2a00      	cmp	r2, #0
   d482e:	d141      	bne.n	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d4830:	2b02      	cmp	r3, #2
   d4832:	d83f      	bhi.n	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d4834:	6820      	ldr	r0, [r4, #0]
   d4836:	f002 fc3a 	bl	d70ae <_ZN9TCPClient9connectedEv>
      //BLYNK_LOG1(BLYNK_F("Nested run() skipped"));
      return true;
    }

    if (conn.connected()) {
   d483a:	b140      	cbz	r0, d484e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x42>
        while (avail || conn.available() > 0) {
   d483c:	2d00      	cmp	r5, #0
   d483e:	f040 808f 	bne.w	d4960 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
    int available() { return client.available(); }
   d4842:	6820      	ldr	r0, [r4, #0]
   d4844:	f002 fe1e 	bl	d7484 <_ZN9TCPClient9availableEv>
   d4848:	2800      	cmp	r0, #0
   d484a:	f300 8089 	bgt.w	d4960 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x154>
            avail = false;
            //BLYNK_LOG2(BLYNK_F("Proc time: "), micros() - t);
        }
    }

    const millis_time_t t = BlynkMillis();
   d484e:	f001 fbc9 	bl	d5fe4 <_Z11BlynkMillisv>
   d4852:	4606      	mov	r6, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d4854:	6820      	ldr	r0, [r4, #0]
   d4856:	f002 fc2a 	bl	d70ae <_ZN9TCPClient9connectedEv>

    // Update connection status after running commands
    const bool tconn = conn.connected();

    if (state == CONNECTED) {
   d485a:	7f67      	ldrb	r7, [r4, #29]
   d485c:	2f01      	cmp	r7, #1
   d485e:	4605      	mov	r5, r0
   d4860:	d12a      	bne.n	d48b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xac>
        if (!tconn) {
   d4862:	b920      	cbnz	r0, d486e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            lastHeartbeat = t;
   d4864:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d4866:	4620      	mov	r0, r4
   d4868:	f7ff fd88 	bl	d437c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d486c:	e072      	b.n	d4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        }

        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d486e:	68e3      	ldr	r3, [r4, #12]
   d4870:	f644 2238 	movw	r2, #19000	; 0x4a38
   d4874:	1af3      	subs	r3, r6, r3
   d4876:	4293      	cmp	r3, r2
   d4878:	d904      	bls.n	d4884 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x78>
#ifdef BLYNK_DEBUG
            BLYNK_LOG6(BLYNK_F("Heartbeat timeout: "), t, BLYNK_F(", "), lastActivityIn, BLYNK_F(", "), lastHeartbeat);
#else
            BLYNK_LOG1(BLYNK_F("Heartbeat timeout"));
#endif
            internalReconnect();
   d487a:	4620      	mov	r0, r4
   d487c:	f7ff fd7e 	bl	d437c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4880:	2500      	movs	r5, #0
   d4882:	e067      	b.n	d4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4884:	f242 7210 	movw	r2, #10000	; 0x2710
   d4888:	4293      	cmp	r3, r2
   d488a:	d803      	bhi.n	d4894 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x88>
   d488c:	6923      	ldr	r3, [r4, #16]
   d488e:	1af3      	subs	r3, r6, r3
   d4890:	4293      	cmp	r3, r2
   d4892:	d90f      	bls.n	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d4894:	6963      	ldr	r3, [r4, #20]
   d4896:	f640 32b8 	movw	r2, #3000	; 0xbb8
   d489a:	1af3      	subs	r3, r6, r3
   d489c:	4293      	cmp	r3, r2
   d489e:	d909      	bls.n	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
        {
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
   d48a0:	2300      	movs	r3, #0
   d48a2:	9302      	str	r3, [sp, #8]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	9300      	str	r3, [sp, #0]
   d48a8:	461a      	mov	r2, r3
   d48aa:	2106      	movs	r1, #6
   d48ac:	4620      	mov	r0, r4
   d48ae:	f000 f86b 	bl	d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d48b2:	6166      	str	r6, [r4, #20]
            lastLogin = lastActivityOut;
            return true;
        }
#endif
    }
    return true;
   d48b4:	2501      	movs	r5, #1
   d48b6:	e04d      	b.n	d4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            // Send ping if we didn't either send or receive something
            // for BLYNK_HEARTBEAT seconds
            sendCmd(BLYNK_CMD_PING);
            lastHeartbeat = t;
        }
    } else if (state == CONNECTING) {
   d48b8:	2f00      	cmp	r7, #0
   d48ba:	d1fb      	bne.n	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d48bc:	6962      	ldr	r2, [r4, #20]
#ifdef BLYNK_USE_DIRECT_CONNECT
        if (!tconn)
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d48be:	b150      	cbz	r0, d48d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
   d48c0:	1ab6      	subs	r6, r6, r2
   d48c2:	f640 33b8 	movw	r3, #3000	; 0xbb8
   d48c6:	429e      	cmp	r6, r3
   d48c8:	d9f4      	bls.n	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d48ca:	6820      	ldr	r0, [r4, #0]
   d48cc:	f002 fdc3 	bl	d7456 <_ZN9TCPClient4stopEv>
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
            return false;
   d48d0:	463d      	mov	r5, r7
            conn.connect();
#else
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
            BLYNK_LOG1(BLYNK_F("Login timeout"));
            conn.disconnect();
            state = CONNECTING;
   d48d2:	7767      	strb	r7, [r4, #29]
            return false;
   d48d4:	e03e      	b.n	d4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d48d6:	1ab2      	subs	r2, r6, r2
   d48d8:	f241 3388 	movw	r3, #5000	; 0x1388
   d48dc:	429a      	cmp	r2, r3
   d48de:	d9e9      	bls.n	d48b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
   d48e0:	6820      	ldr	r0, [r4, #0]
   d48e2:	f002 fdb8 	bl	d7456 <_ZN9TCPClient4stopEv>
            conn.disconnect();
            if (!conn.connect()) {
   d48e6:	f8d4 e000 	ldr.w	lr, [r4]
        domain = d;
        port = p;
    }

    bool connect() {
        if (domain) {
   d48ea:	f8de c034 	ldr.w	ip, [lr, #52]	; 0x34
   d48ee:	f8be 8038 	ldrh.w	r8, [lr, #56]	; 0x38
   d48f2:	f1bc 0f00 	cmp.w	ip, #0
   d48f6:	d006      	beq.n	d4906 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xfa>
            BLYNK_LOG4(BLYNK_F("Connecting to "), domain, ':', port);
            return (1 == client.connect(domain, port));
   d48f8:	462b      	mov	r3, r5
   d48fa:	4642      	mov	r2, r8
   d48fc:	4661      	mov	r1, ip
   d48fe:	4670      	mov	r0, lr
   d4900:	f002 fc02 	bl	d7108 <_ZN9TCPClient7connectEPKctm>
   d4904:	e00e      	b.n	d4924 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x118>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4906:	4b1f      	ldr	r3, [pc, #124]	; (d4984 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x178>)
   d4908:	9304      	str	r3, [sp, #16]
   d490a:	f10e 0720 	add.w	r7, lr, #32
   d490e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4910:	ad05      	add	r5, sp, #20
   d4912:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4914:	683b      	ldr	r3, [r7, #0]
   d4916:	702b      	strb	r3, [r5, #0]
        } else {
            BLYNK_LOG_IP("Connecting to ", addr);
            return (1 == client.connect(addr, port));
   d4918:	4642      	mov	r2, r8
   d491a:	4663      	mov	r3, ip
   d491c:	a904      	add	r1, sp, #16
   d491e:	4670      	mov	r0, lr
   d4920:	f002 fd1c 	bl	d735c <_ZN9TCPClient7connectE9IPAddresstm>
   d4924:	1e43      	subs	r3, r0, #1
   d4926:	425d      	negs	r5, r3
   d4928:	415d      	adcs	r5, r3
   d492a:	b90d      	cbnz	r5, d4930 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x124>
                lastLogin = t;
   d492c:	6166      	str	r6, [r4, #20]
                return false;
   d492e:	e011      	b.n	d4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            }

            msgIdOut = 1;
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d4930:	6867      	ldr	r7, [r4, #4]
            if (!conn.connect()) {
                lastLogin = t;
                return false;
            }

            msgIdOut = 1;
   d4932:	2601      	movs	r6, #1
   d4934:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_LOGIN, 1, authkey, strlen(authkey));
   d4936:	4638      	mov	r0, r7
   d4938:	f003 fed4 	bl	d86e4 <strlen>
   d493c:	2300      	movs	r3, #0
   d493e:	e88d 0009 	stmia.w	sp, {r0, r3}
   d4942:	9302      	str	r3, [sp, #8]
   d4944:	4632      	mov	r2, r6
   d4946:	463b      	mov	r3, r7
   d4948:	2102      	movs	r1, #2
   d494a:	4620      	mov	r0, r4
   d494c:	f000 f81c 	bl	d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4950:	6923      	ldr	r3, [r4, #16]
   d4952:	6163      	str	r3, [r4, #20]
    ~BlynkHelperAutoInc() { --c; }
   d4954:	7f23      	ldrb	r3, [r4, #28]
   d4956:	3b01      	subs	r3, #1
   d4958:	7723      	strb	r3, [r4, #28]
   d495a:	e00e      	b.n	d497a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>
bool BlynkProtocol<Transp>::run(bool avail)
{
    BLYNK_RUN_YIELD();

    if (state == DISCONNECTED) {
        return false;
   d495c:	2500      	movs	r5, #0
   d495e:	e00c      	b.n	d497a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16e>

    if (conn.connected()) {
        while (avail || conn.available() > 0) {
            //BLYNK_LOG2(BLYNK_F("Available: "), conn.available());
            //const unsigned long t = micros();
            if (!processInput()) {
   d4960:	4620      	mov	r0, r4
   d4962:	f7ff fe1f 	bl	d45a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d4966:	4605      	mov	r5, r0
   d4968:	2800      	cmp	r0, #0
   d496a:	f47f af6a 	bne.w	d4842 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x36>
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d496e:	6820      	ldr	r0, [r4, #0]
   d4970:	f002 fd71 	bl	d7456 <_ZN9TCPClient4stopEv>
                conn.disconnect();
// TODO: Only when in direct mode?
#ifdef BLYNK_USE_DIRECT_CONNECT
                state = CONNECTING;
#endif
                BlynkOnDisconnected();
   d4974:	f001 fb3c 	bl	d5ff0 <BlynkNoOpCbk>
                return false;
   d4978:	e7ec      	b.n	d4954 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x148>
            return true;
        }
#endif
    }
    return true;
}
   d497a:	4628      	mov	r0, r5
   d497c:	b00a      	add	sp, #40	; 0x28
   d497e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4982:	bf00      	nop
   d4984:	000daed0 	.word	0x000daed0

000d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d498c:	b083      	sub	sp, #12
   d498e:	af00      	add	r7, sp, #0
   d4990:	4604      	mov	r4, r0
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d4992:	6800      	ldr	r0, [r0, #0]
   d4994:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d4996:	4689      	mov	r9, r1
   d4998:	4616      	mov	r6, r2
   d499a:	469b      	mov	fp, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d499c:	46ea      	mov	sl, sp
   d499e:	f002 fb86 	bl	d70ae <_ZN9TCPClient9connectedEv>
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
   d49a2:	2800      	cmp	r0, #0
   d49a4:	d060      	beq.n	d4a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
   d49a6:	f019 0ffd 	tst.w	r9, #253	; 0xfd
   d49aa:	f000 80a0 	beq.w	d4aee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x166>
   d49ae:	f1b9 0f06 	cmp.w	r9, #6
   d49b2:	f000 809c 	beq.w	d4aee <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x166>
   d49b6:	7f63      	ldrb	r3, [r4, #29]
   d49b8:	2b01      	cmp	r3, #1
   d49ba:	d155      	bne.n	d4a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d49bc:	b916      	cbnz	r6, d49c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d49be:	8b66      	ldrh	r6, [r4, #26]
   d49c0:	2e00      	cmp	r6, #0
   d49c2:	d056      	beq.n	d4a72 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
    if (0 == id) {
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d49c4:	f1a9 030c 	sub.w	r3, r9, #12
   d49c8:	2b08      	cmp	r3, #8
   d49ca:	d95a      	bls.n	d4a82 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xfa>
    }
#endif

    const size_t full_length = (sizeof(BlynkHeader)) +
                               (data  ? length  : 0) +
                               (data2 ? length2 : 0);
   d49cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d49ce:	f1bb 0f00 	cmp.w	fp, #0
   d49d2:	bf14      	ite	ne
   d49d4:	46a8      	movne	r8, r5
   d49d6:	f04f 0800 	moveq.w	r8, #0
   d49da:	2a00      	cmp	r2, #0
   d49dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d49de:	f108 0305 	add.w	r3, r8, #5
   d49e2:	bf14      	ite	ne
   d49e4:	4690      	movne	r8, r2
   d49e6:	f04f 0800 	moveq.w	r8, #0
   d49ea:	4498      	add	r8, r3

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d49ec:	f108 0307 	add.w	r3, r8, #7
   d49f0:	f023 0307 	bic.w	r3, r3, #7

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d49f4:	18aa      	adds	r2, r5, r2
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d49f6:	ebad 0d03 	sub.w	sp, sp, r3

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);
   d49fa:	f3c2 2307 	ubfx	r3, r2, #8, #8

    uint8_t buff[full_length];

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
   d49fe:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4a00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               (data2 ? length2 : 0);

#if defined(BLYNK_SEND_ATOMIC) || defined(ESP8266) || defined(ESP32) || defined(SPARK) || defined(PARTICLE) || defined(ENERGIA)
    // Those have more RAM and like single write at a time...

    uint8_t buff[full_length];
   d4a04:	f8c7 d004 	str.w	sp, [r7, #4]

    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
   d4a08:	f88d 9000 	strb.w	r9, [sp]
    hdr->msg_id = htons(id);
   d4a0c:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4a10:	f8ad 3003 	strh.w	r3, [sp, #3]

    size_t pos = sizeof(BlynkHeader);
    if (data && length) {
   d4a14:	f1bb 0f00 	cmp.w	fp, #0
   d4a18:	d052      	beq.n	d4ac0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x138>
   d4a1a:	2d00      	cmp	r5, #0
   d4a1c:	d050      	beq.n	d4ac0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x138>
        memcpy(buff + pos, data, length);
   d4a1e:	462a      	mov	r2, r5
   d4a20:	4659      	mov	r1, fp
   d4a22:	f10d 0005 	add.w	r0, sp, #5
   d4a26:	f003 fe17 	bl	d8658 <memcpy>
        pos += length;
   d4a2a:	1d68      	adds	r0, r5, #5
    }
    if (data2 && length2) {
   d4a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4a2e:	2b00      	cmp	r3, #0
   d4a30:	d148      	bne.n	d4ac4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13c>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d4a32:	2500      	movs	r5, #0
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d4a34:	4545      	cmp	r5, r8
   d4a36:	d251      	bcs.n	d4adc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4a38:	ebc5 0208 	rsb	r2, r5, r8
    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
    }

    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
   d4a3c:	687b      	ldr	r3, [r7, #4]
   d4a3e:	6820      	ldr	r0, [r4, #0]
   d4a40:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4a44:	bf28      	it	cs
   d4a46:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4a4a:	1959      	adds	r1, r3, r5
   d4a4c:	f002 fb19 	bl	d7082 <_ZN9TCPClient5writeEPKhj>
   d4a50:	4606      	mov	r6, r0
        BLYNK_DBG_DUMP("<", buff + wlen, chunk);
        const size_t w = conn.write(buff + wlen, chunk);
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4a52:	2000      	movs	r0, #0
   d4a54:	f001 fac4 	bl	d5fe0 <_Z10BlynkDelaym>
        if (w == 0) {
   d4a58:	2e00      	cmp	r6, #0
   d4a5a:	d13d      	bne.n	d4ad8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4a5c:	6820      	ldr	r0, [r4, #0]
   d4a5e:	f002 fcfa 	bl	d7456 <_ZN9TCPClient4stopEv>
#ifdef BLYNK_DEBUG
            BLYNK_LOG1(BLYNK_F("Cmd error"));
#endif
            conn.disconnect();
            state = CONNECTING;
   d4a62:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4a64:	f001 fac4 	bl	d5ff0 <BlynkNoOpCbk>
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d4a68:	370c      	adds	r7, #12
{
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && state != CONNECTED) ) {
#ifdef BLYNK_DEBUG_ALL
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
   d4a6a:	46d5      	mov	sp, sl
        return;
    }

    lastActivityOut = BlynkMillis();

}
   d4a6c:	46bd      	mov	sp, r7
   d4a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d4a72:	8b23      	ldrh	r3, [r4, #24]
   d4a74:	3301      	adds	r3, #1
   d4a76:	b29b      	uxth	r3, r3
   d4a78:	b903      	cbnz	r3, d4a7c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf4>
        msgIdOut = 1;
   d4a7a:	2301      	movs	r3, #1
   d4a7c:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d4a7e:	8b26      	ldrh	r6, [r4, #24]
   d4a80:	e7a0      	b.n	d49c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x3c>
        id = getNextMsgId();
    }

#if defined(BLYNK_MSG_LIMIT) && BLYNK_MSG_LIMIT > 0
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4a82:	68e3      	ldr	r3, [r4, #12]
   d4a84:	6922      	ldr	r2, [r4, #16]
   d4a86:	4293      	cmp	r3, r2
   d4a88:	bf38      	it	cc
   d4a8a:	4613      	movcc	r3, r2
   d4a8c:	f103 0842 	add.w	r8, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4a90:	f001 faa8 	bl	d5fe4 <_Z11BlynkMillisv>
        if (wait_time >= 0) {
   d4a94:	ebc0 0008 	rsb	r0, r0, r8
   d4a98:	2800      	cmp	r0, #0
   d4a9a:	db0a      	blt.n	d4ab2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12a>
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
                run();
   d4a9c:	2100      	movs	r1, #0
   d4a9e:	4620      	mov	r0, r4
   d4aa0:	f7ff feb4 	bl	d480c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4aa4:	f001 fa9e 	bl	d5fe4 <_Z11BlynkMillisv>
        int32_t wait_time = allowed_time - BlynkMillis();
        if (wait_time >= 0) {
#ifdef BLYNK_DEBUG_ALL
            BLYNK_LOG2(BLYNK_F("Waiting:"), wait_time);
#endif
            while (wait_time >= 0) {
   d4aa8:	ebc0 0008 	rsb	r0, r0, r8
   d4aac:	2800      	cmp	r0, #0
   d4aae:	daf5      	bge.n	d4a9c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x114>
   d4ab0:	e78c      	b.n	d49cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
                run();
                wait_time = allowed_time - BlynkMillis();
            }
        } else if (nesting == 0) {
   d4ab2:	7f21      	ldrb	r1, [r4, #28]
   d4ab4:	2900      	cmp	r1, #0
   d4ab6:	d189      	bne.n	d49cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
            run();
   d4ab8:	4620      	mov	r0, r4
   d4aba:	f7ff fea7 	bl	d480c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4abe:	e785      	b.n	d49cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
    BlynkHeader* hdr = (BlynkHeader*)buff;
    hdr->type = cmd;
    hdr->msg_id = htons(id);
    hdr->length = htons(length+length2);

    size_t pos = sizeof(BlynkHeader);
   d4ac0:	2005      	movs	r0, #5
   d4ac2:	e7b3      	b.n	d4a2c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xa4>
    if (data && length) {
        memcpy(buff + pos, data, length);
        pos += length;
    }
    if (data2 && length2) {
   d4ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4ac6:	2b00      	cmp	r3, #0
   d4ac8:	d0b3      	beq.n	d4a32 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
        memcpy(buff + pos, data2, length2);
   d4aca:	461a      	mov	r2, r3
   d4acc:	687b      	ldr	r3, [r7, #4]
   d4ace:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4ad0:	4418      	add	r0, r3
   d4ad2:	f003 fdc1 	bl	d8658 <memcpy>
   d4ad6:	e7ac      	b.n	d4a32 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xaa>
            conn.disconnect();
            state = CONNECTING;
            BlynkOnDisconnected();
            return;
        }
        wlen += w;
   d4ad8:	4435      	add	r5, r6
    if (data2 && length2) {
        memcpy(buff + pos, data2, length2);
    }

    size_t wlen = 0;
    while (wlen < full_length) {
   d4ada:	e7ab      	b.n	d4a34 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xac>
        }
    }

#endif

    if (wlen != full_length) {
   d4adc:	d003      	beq.n	d4ae6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15e>
#ifdef BLYNK_DEBUG
        BLYNK_LOG4(BLYNK_F("Sent "), wlen, '/', full_length);
#endif
        internalReconnect();
   d4ade:	4620      	mov	r0, r4
   d4ae0:	f7ff fc4c 	bl	d437c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4ae4:	e7c0      	b.n	d4a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
    }

    lastActivityOut = BlynkMillis();
   d4ae6:	f001 fa7d 	bl	d5fe4 <_Z11BlynkMillisv>
   d4aea:	6120      	str	r0, [r4, #16]
   d4aec:	e7bc      	b.n	d4a68 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xe0>
        BLYNK_LOG2(BLYNK_F("Cmd skipped:"), cmd);
#endif
        return;
    }

    if (0 == id) {
   d4aee:	2e00      	cmp	r6, #0
   d4af0:	f47f af6c 	bne.w	d49cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
   d4af4:	e763      	b.n	d49be <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
	...

000d4af8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>:
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d4af8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4afa:	f2ad 4d2c 	subw	sp, sp, #1068	; 0x42c
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4afe:	ab0a      	add	r3, sp, #40	; 0x28
   d4b00:	2400      	movs	r4, #0
   d4b02:	4606      	mov	r6, r0
   d4b04:	460d      	mov	r5, r1
   d4b06:	9307      	str	r3, [sp, #28]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d4b08:	a807      	add	r0, sp, #28
   d4b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4b0e:	4917      	ldr	r1, [pc, #92]	; (d4b6c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x74>)
     *
     * @param pin  Virtual Pin number
     * @param data Value to be sent
     */
    template <typename... Args>
    void virtualWrite(int pin, Args... values) {
   d4b10:	ed8d 0a05 	vstr	s0, [sp, #20]
   d4b14:	9309      	str	r3, [sp, #36]	; 0x24
   d4b16:	9408      	str	r4, [sp, #32]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add("vw");
   d4b18:	f7ff fb29 	bl	d416e <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   d4b1c:	4629      	mov	r1, r5
   d4b1e:	a807      	add	r0, sp, #28
   d4b20:	f7ff fb42 	bl	d41a8 <_ZN10BlynkParam3addEi>
#else

    inline
    void BlynkParam::add(float value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.3f", value)+1;
   d4b24:	ed9d 0a05 	vldr	s0, [sp, #20]
   d4b28:	9b08      	ldr	r3, [sp, #32]
   d4b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4b2c:	9d07      	ldr	r5, [sp, #28]
   d4b2e:	ee10 0a10 	vmov	r0, s0
   d4b32:	1acf      	subs	r7, r1, r3
   d4b34:	441d      	add	r5, r3
   d4b36:	f003 f9d5 	bl	d7ee4 <__aeabi_f2d>
   d4b3a:	4a0d      	ldr	r2, [pc, #52]	; (d4b70 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_+0x78>)
   d4b3c:	e9cd 0100 	strd	r0, r1, [sp]
   d4b40:	4639      	mov	r1, r7
   d4b42:	4628      	mov	r0, r5
   d4b44:	f001 fcf0 	bl	d6528 <snprintf>
   d4b48:	9b08      	ldr	r3, [sp, #32]
        cmd.add_multi(values...);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4b4a:	9402      	str	r4, [sp, #8]
   d4b4c:	3001      	adds	r0, #1
   d4b4e:	4418      	add	r0, r3
   d4b50:	9008      	str	r0, [sp, #32]
   d4b52:	3801      	subs	r0, #1
   d4b54:	9000      	str	r0, [sp, #0]
   d4b56:	9401      	str	r4, [sp, #4]
   d4b58:	9b07      	ldr	r3, [sp, #28]
   d4b5a:	4622      	mov	r2, r4
   d4b5c:	2114      	movs	r1, #20
   d4b5e:	4630      	mov	r0, r6
   d4b60:	f7ff ff12 	bl	d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4b64:	f20d 4d2c 	addw	sp, sp, #1068	; 0x42c
   d4b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b6a:	bf00      	nop
   d4b6c:	000da367 	.word	0x000da367
   d4b70:	000da36a 	.word	0x000da36a

000d4b74 <_Z9send_tempv>:
Adafruit_SSD1306 myDisplay(128, 64);

//abusing the blynk library instead of writing a function to time things
BlynkTimer timer;

void send_temp() {
   d4b74:	b508      	push	{r3, lr}
  /* float currentTemp = 0;
  currentTemp = analogRead(TEMP_SENSOR_INPUT);
  float convertedTemp = (currentTemp * (3300.0/4095));
  convertedTemp = ((convertedTemp - 50)/10);*/
  Blynk.virtualWrite(blynk_temp_readout, convertedTemp);
   d4b76:	4b04      	ldr	r3, [pc, #16]	; (d4b88 <_Z9send_tempv+0x14>)
   d4b78:	4804      	ldr	r0, [pc, #16]	; (d4b8c <_Z9send_tempv+0x18>)
   d4b7a:	ed93 0a00 	vldr	s0, [r3]
   d4b7e:	2101      	movs	r1, #1
   d4b80:	f7ff ffba 	bl	d4af8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIIfEEEviDpT_>
   d4b84:	bd08      	pop	{r3, pc}
   d4b86:	bf00      	nop
   d4b88:	2003e118 	.word	0x2003e118
   d4b8c:	2003e360 	.word	0x2003e360

000d4b90 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:

#else

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::sendInfo()
   d4b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#ifdef BLYNK_HAS_PROGMEM
    char mem[profile_len];
    memcpy_P(mem, profile+8, profile_len);
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, mem, profile_len);
#else
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len);
   d4b92:	2200      	movs	r2, #0
   d4b94:	2349      	movs	r3, #73	; 0x49
   d4b96:	9300      	str	r3, [sp, #0]
   d4b98:	9202      	str	r2, [sp, #8]
   d4b9a:	9201      	str	r2, [sp, #4]
   d4b9c:	4b03      	ldr	r3, [pc, #12]	; (d4bac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x1c>)
   d4b9e:	2111      	movs	r1, #17
   d4ba0:	f7ff fef2 	bl	d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    return;
}
   d4ba4:	b005      	add	sp, #20
   d4ba6:	f85d fb04 	ldr.w	pc, [sp], #4
   d4baa:	bf00      	nop
   d4bac:	000da304 	.word	0x000da304

000d4bb0 <_Z8app_syncv>:
}

void app_sync() {
   d4bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    /**
     * Requests Server to re-send current values for all widgets.
     */
    void syncAll() {
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE_SYNC);
   d4bb2:	2300      	movs	r3, #0
   d4bb4:	9302      	str	r3, [sp, #8]
   d4bb6:	9301      	str	r3, [sp, #4]
   d4bb8:	9300      	str	r3, [sp, #0]
   d4bba:	461a      	mov	r2, r3
   d4bbc:	2110      	movs	r1, #16
   d4bbe:	4803      	ldr	r0, [pc, #12]	; (d4bcc <_Z8app_syncv+0x1c>)
   d4bc0:	f7ff fee2 	bl	d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
  Blynk.syncAll();
}
   d4bc4:	b005      	add	sp, #20
   d4bc6:	f85d fb04 	ldr.w	pc, [sp], #4
   d4bca:	bf00      	nop
   d4bcc:	2003e360 	.word	0x2003e360

000d4bd0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA42_cEEvRKT_>:
     * Sends a push notification to the App
     *
     * @param msg Text of the message
     */
    template<typename T>
    void notify(const T& msg) {
   d4bd0:	b530      	push	{r4, r5, lr}
   d4bd2:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(length)
    {}

    explicit
    BlynkParam(void* addr, size_t length, size_t buffsize)
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4bd6:	ab08      	add	r3, sp, #32
   d4bd8:	2400      	movs	r4, #0
   d4bda:	4605      	mov	r5, r0
   d4bdc:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
   d4bde:	a805      	add	r0, sp, #20
   d4be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4be4:	9307      	str	r3, [sp, #28]
   d4be6:	9406      	str	r4, [sp, #24]
   d4be8:	f7ff fac1 	bl	d416e <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4bec:	9b06      	ldr	r3, [sp, #24]
   d4bee:	9402      	str	r4, [sp, #8]
   d4bf0:	3b01      	subs	r3, #1
   d4bf2:	9300      	str	r3, [sp, #0]
   d4bf4:	9401      	str	r4, [sp, #4]
   d4bf6:	9b05      	ldr	r3, [sp, #20]
   d4bf8:	4622      	mov	r2, r4
   d4bfa:	210e      	movs	r1, #14
   d4bfc:	4628      	mov	r0, r5
   d4bfe:	f7ff fec3 	bl	d4988 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4c02:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4c06:	bd30      	pop	{r4, r5, pc}

000d4c08 <_Z9night_luxv>:

void lux_updater(){
  lux_level = analogRead(A2);
}

void night_lux() {
   d4c08:	b508      	push	{r3, lr}
  //night mode
  analogWrite(RED_LED_OUTPUT, 0);
   d4c0a:	2100      	movs	r1, #0
   d4c0c:	2002      	movs	r0, #2
   d4c0e:	f002 fe4d 	bl	d78ac <_Z11analogWritetm>
  analogWrite(GREEN_LED_OUTPUT, 0);
   d4c12:	2100      	movs	r1, #0
   d4c14:	2003      	movs	r0, #3
   d4c16:	f002 fe49 	bl	d78ac <_Z11analogWritetm>
  analogWrite(BLUE_LED_OUTPUT, 255);
   d4c1a:	21ff      	movs	r1, #255	; 0xff
   d4c1c:	2004      	movs	r0, #4
   d4c1e:	f002 fe45 	bl	d78ac <_Z11analogWritetm>
  if (lux_level > lux_alert_threshold){
   d4c22:	4b0a      	ldr	r3, [pc, #40]	; (d4c4c <_Z9night_luxv+0x44>)
   d4c24:	ed93 7a00 	vldr	s14, [r3]
   d4c28:	4b09      	ldr	r3, [pc, #36]	; (d4c50 <_Z9night_luxv+0x48>)
   d4c2a:	edd3 7a00 	vldr	s15, [r3]
   d4c2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4c36:	dd07      	ble.n	d4c48 <_Z9night_luxv+0x40>
    delay(10000);
   d4c38:	f242 7010 	movw	r0, #10000	; 0x2710
   d4c3c:	f001 fee4 	bl	d6a08 <delay>
    Blynk.notify("Your lighting threshold has been exceeded");
   d4c40:	4904      	ldr	r1, [pc, #16]	; (d4c54 <_Z9night_luxv+0x4c>)
   d4c42:	4805      	ldr	r0, [pc, #20]	; (d4c58 <_Z9night_luxv+0x50>)
   d4c44:	f7ff ffc4 	bl	d4bd0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA42_cEEvRKT_>
   d4c48:	bd08      	pop	{r3, pc}
   d4c4a:	bf00      	nop
   d4c4c:	2003e3c4 	.word	0x2003e3c4
   d4c50:	2003e020 	.word	0x2003e020
   d4c54:	000da370 	.word	0x000da370
   d4c58:	2003e360 	.word	0x2003e360

000d4c5c <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c60:	4614      	mov	r4, r2
   d4c62:	b08c      	sub	sp, #48	; 0x30
   d4c64:	4605      	mov	r5, r0
   d4c66:	3404      	adds	r4, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4c68:	f640 30b8 	movw	r0, #3000	; 0xbb8
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4c6c:	460f      	mov	r7, r1
   d4c6e:	4698      	mov	r8, r3
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4c70:	f001 f9b6 	bl	d5fe0 <_Z10BlynkDelaym>
   d4c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4c76:	ae01      	add	r6, sp, #4
   d4c78:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4c7a:	6823      	ldr	r3, [r4, #0]
    int readHeader(BlynkHeader& hdr);
    uint16_t getNextMsgId();

protected:
    void begin(const char* auth) {
        this->authkey = auth;
   d4c7c:	606f      	str	r7, [r5, #4]
   d4c7e:	7033      	strb	r3, [r6, #0]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4c80:	f001 f9b0 	bl	d5fe4 <_Z11BlynkMillisv>
   d4c84:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4c88:	3808      	subs	r0, #8
   d4c8a:	af01      	add	r7, sp, #4
   d4c8c:	6128      	str	r0, [r5, #16]
   d4c8e:	60e8      	str	r0, [r5, #12]
   d4c90:	6168      	str	r0, [r5, #20]
   d4c92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4c94:	ae07      	add	r6, sp, #28
   d4c96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4c98:	683b      	ldr	r3, [r7, #0]
   d4c9a:	7033      	strb	r3, [r6, #0]
   d4c9c:	af07      	add	r7, sp, #28
   d4c9e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    void config(const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        Base::begin(auth);
        this->conn.begin(addr, port);
   d4ca0:	682c      	ldr	r4, [r5, #0]
    BlynkTransportParticle()
        : domain(NULL), port(0)
    {}

    void begin(IPAddress a, uint16_t p) {
        domain = NULL;
   d4ca2:	f04f 0e00 	mov.w	lr, #0
   d4ca6:	f8c4 e034 	str.w	lr, [r4, #52]	; 0x34
        port = p;
   d4caa:	f8a4 8038 	strh.w	r8, [r4, #56]	; 0x38
   d4cae:	3420      	adds	r4, #32
   d4cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4cb2:	6833      	ldr	r3, [r6, #0]
   d4cb4:	7023      	strb	r3, [r4, #0]

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d4cb6:	f242 3627 	movw	r6, #8999	; 0x2327

    bool connected() { return state == CONNECTED; }

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
   d4cba:	4674      	mov	r4, lr
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d4cbc:	6828      	ldr	r0, [r5, #0]
   d4cbe:	f002 fbca 	bl	d7456 <_ZN9TCPClient4stopEv>
   d4cc2:	776c      	strb	r4, [r5, #29]
        millis_time_t started = BlynkMillis();
   d4cc4:	f001 f98e 	bl	d5fe4 <_Z11BlynkMillisv>
   d4cc8:	4607      	mov	r7, r0
        while ((state != CONNECTED) &&
   d4cca:	7f6b      	ldrb	r3, [r5, #29]
   d4ccc:	2b01      	cmp	r3, #1
   d4cce:	d009      	beq.n	d4ce4 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
               (BlynkMillis() - started < timeout))
   d4cd0:	f001 f988 	bl	d5fe4 <_Z11BlynkMillisv>

    bool connect(uint32_t timeout = BLYNK_TIMEOUT_MS*3) {
        conn.disconnect();
        state = CONNECTING;
        millis_time_t started = BlynkMillis();
        while ((state != CONNECTED) &&
   d4cd4:	1bc0      	subs	r0, r0, r7
   d4cd6:	42b0      	cmp	r0, r6
   d4cd8:	d804      	bhi.n	d4ce4 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
               (BlynkMillis() - started < timeout))
        {
            run();
   d4cda:	2100      	movs	r1, #0
   d4cdc:	4628      	mov	r0, r5
   d4cde:	f7ff fd95 	bl	d480c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4ce2:	e7f2      	b.n	d4cca <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
        config(auth, addr, port);
        while(this->connect() != true) {}
   d4ce4:	7f6b      	ldrb	r3, [r5, #29]
   d4ce6:	2b01      	cmp	r3, #1
   d4ce8:	d1e8      	bne.n	d4cbc <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d4cea:	b00c      	add	sp, #48	; 0x30
   d4cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4cf0 <setup>:
  else if(blynk_buttonState == FALSE){
    night_state = FALSE;
  }
}

void setup() {
   d4cf0:	b500      	push	{lr}
  pinMode(TEMP_SENSOR_INPUT, INPUT); //TEMP SENSOR INPUT
   d4cf2:	2100      	movs	r1, #0
  else if(blynk_buttonState == FALSE){
    night_state = FALSE;
  }
}

void setup() {
   d4cf4:	b089      	sub	sp, #36	; 0x24
  pinMode(TEMP_SENSOR_INPUT, INPUT); //TEMP SENSOR INPUT
   d4cf6:	2012      	movs	r0, #18
   d4cf8:	f002 fd84 	bl	d7804 <pinMode>
  pinMode(LUX_SENSOR_INPUT, INPUT); //LUX SENSOR INPUT
   d4cfc:	2100      	movs	r1, #0
   d4cfe:	2011      	movs	r0, #17
   d4d00:	f002 fd80 	bl	d7804 <pinMode>
  pinMode(RED_LED_OUTPUT, OUTPUT); //RED RGB LED OUTPUT
   d4d04:	2101      	movs	r1, #1
   d4d06:	2002      	movs	r0, #2
   d4d08:	f002 fd7c 	bl	d7804 <pinMode>
  pinMode(GREEN_LED_OUTPUT, OUTPUT); //GREEN RGB LED OUTPUT
   d4d0c:	2101      	movs	r1, #1
   d4d0e:	2003      	movs	r0, #3
   d4d10:	f002 fd78 	bl	d7804 <pinMode>
  pinMode(BLUE_LED_OUTPUT, OUTPUT); //BLUE RGB LED OUTPUT
   d4d14:	2101      	movs	r1, #1
   d4d16:	2004      	movs	r0, #4
   d4d18:	f002 fd74 	bl	d7804 <pinMode>
  myDisplay.begin(SSD1306_SWITCHCAPVCC); //STARTING DISPLAY
   d4d1c:	2301      	movs	r3, #1
   d4d1e:	223c      	movs	r2, #60	; 0x3c
   d4d20:	2102      	movs	r1, #2
   d4d22:	4810      	ldr	r0, [pc, #64]	; (d4d64 <setup+0x74>)
   d4d24:	f000 ff0a 	bl	d5b3c <_ZN16Adafruit_SSD13065beginEhhb>
  Blynk.begin("be2716a90e7c49dc8063fb7c0616500a",IPAddress(167,99,150,124),8080); //blynk config
   d4d28:	237c      	movs	r3, #124	; 0x7c
   d4d2a:	9300      	str	r3, [sp, #0]
   d4d2c:	2263      	movs	r2, #99	; 0x63
   d4d2e:	2396      	movs	r3, #150	; 0x96
   d4d30:	21a7      	movs	r1, #167	; 0xa7
   d4d32:	a802      	add	r0, sp, #8
   d4d34:	f001 ff70 	bl	d6c18 <_ZN9IPAddressC1Ehhhh>
   d4d38:	f641 7390 	movw	r3, #8080	; 0x1f90
   d4d3c:	aa02      	add	r2, sp, #8
   d4d3e:	490a      	ldr	r1, [pc, #40]	; (d4d68 <setup+0x78>)
   d4d40:	480a      	ldr	r0, [pc, #40]	; (d4d6c <setup+0x7c>)
   d4d42:	f7ff ff8b 	bl	d4c5c <_ZN13BlynkParticle5beginEPKc9IPAddresst>
  Serial.begin();
   d4d46:	f001 ffe1 	bl	d6d0c <_Z16_fetch_usbserialv>
   d4d4a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4d4e:	f001 ffd1 	bl	d6cf4 <_ZN9USBSerial5beginEl>
  timer.setInterval(100L, send_temp);
   d4d52:	4a07      	ldr	r2, [pc, #28]	; (d4d70 <setup+0x80>)
   d4d54:	4807      	ldr	r0, [pc, #28]	; (d4d74 <setup+0x84>)
   d4d56:	2164      	movs	r1, #100	; 0x64
   d4d58:	f001 f8d4 	bl	d5f04 <_ZN10BlynkTimer11setIntervalEmPFvvE>
}
   d4d5c:	b009      	add	sp, #36	; 0x24
   d4d5e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4d62:	bf00      	nop
   d4d64:	2003e0e0 	.word	0x2003e0e0
   d4d68:	000da39a 	.word	0x000da39a
   d4d6c:	2003e360 	.word	0x2003e360
   d4d70:	000d4b75 	.word	0x000d4b75
   d4d74:	2003e11c 	.word	0x2003e11c

000d4d78 <loop>:

void loop() {
   d4d78:	b508      	push	{r3, lr}
  Blynk.run();
   d4d7a:	2100      	movs	r1, #0
   d4d7c:	480c      	ldr	r0, [pc, #48]	; (d4db0 <loop+0x38>)
   d4d7e:	f7ff fd45 	bl	d480c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  calc_temp();
   d4d82:	f7ff fa69 	bl	d4258 <_Z9calc_tempv>
  timer.run();
   d4d86:	480b      	ldr	r0, [pc, #44]	; (d4db4 <loop+0x3c>)
   d4d88:	f001 f8de 	bl	d5f48 <_ZN10BlynkTimer3runEv>
  app_sync();
   d4d8c:	f7ff ff10 	bl	d4bb0 <_Z8app_syncv>
  state_test();
   d4d90:	f7ff fae8 	bl	d4364 <_Z10state_testv>
  lux_updater();
   d4d94:	f7ff fad8 	bl	d4348 <_Z11lux_updaterv>
  if (night_state == TRUE){
   d4d98:	4b07      	ldr	r3, [pc, #28]	; (d4db8 <loop+0x40>)
   d4d9a:	781b      	ldrb	r3, [r3, #0]
   d4d9c:	b11b      	cbz	r3, d4da6 <loop+0x2e>
    night_lux();
  }
  else if(night_state == FALSE){
    evening_lux();
  }
   d4d9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  timer.run();
  app_sync();
  state_test();
  lux_updater();
  if (night_state == TRUE){
    night_lux();
   d4da2:	f7ff bf31 	b.w	d4c08 <_Z9night_luxv>
  }
  else if(night_state == FALSE){
    evening_lux();
  }
   d4da6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  lux_updater();
  if (night_state == TRUE){
    night_lux();
  }
  else if(night_state == FALSE){
    evening_lux();
   d4daa:	f7ff bab5 	b.w	d4318 <_Z11evening_luxv>
   d4dae:	bf00      	nop
   d4db0:	2003e360 	.word	0x2003e360
   d4db4:	2003e11c 	.word	0x2003e11c
   d4db8:	2003e380 	.word	0x2003e380

000d4dbc <_ZN16Adafruit_SSD1306D0Ev>:
   d4dbc:	b510      	push	{r4, lr}
   d4dbe:	2134      	movs	r1, #52	; 0x34
   d4dc0:	4604      	mov	r4, r0
   d4dc2:	f002 fde0 	bl	d7986 <_ZdlPvj>
   d4dc6:	4620      	mov	r0, r4
   d4dc8:	bd10      	pop	{r4, pc}
	...

000d4dcc <_GLOBAL__sub_I_Blynk>:
  }
   d4dcc:	b570      	push	{r4, r5, r6, lr}

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   d4dce:	4d18      	ldr	r5, [pc, #96]	; (d4e30 <_GLOBAL__sub_I_Blynk+0x64>)
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4dd0:	4e18      	ldr	r6, [pc, #96]	; (d4e34 <_GLOBAL__sub_I_Blynk+0x68>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4dd2:	f001 f935 	bl	d6040 <HAL_Pin_Map>
   d4dd6:	4628      	mov	r0, r5
   d4dd8:	f002 fbf0 	bl	d75bc <_ZN9TCPClientC1Ev>
   d4ddc:	f105 001c 	add.w	r0, r5, #28
   d4de0:	2400      	movs	r4, #0
   d4de2:	f001 fed5 	bl	d6b90 <_ZN9IPAddressC1Ev>
   d4de6:	4632      	mov	r2, r6
   d4de8:	4913      	ldr	r1, [pc, #76]	; (d4e38 <_GLOBAL__sub_I_Blynk+0x6c>)
   d4dea:	636c      	str	r4, [r5, #52]	; 0x34
   d4dec:	4628      	mov	r0, r5
   d4dee:	872c      	strh	r4, [r5, #56]	; 0x38
   d4df0:	f002 fdc4 	bl	d797c <__aeabi_atexit>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   d4df4:	4b11      	ldr	r3, [pc, #68]	; (d4e3c <_GLOBAL__sub_I_Blynk+0x70>)
   d4df6:	605c      	str	r4, [r3, #4]
   d4df8:	609c      	str	r4, [r3, #8]
   d4dfa:	60dc      	str	r4, [r3, #12]
   d4dfc:	611c      	str	r4, [r3, #16]
   d4dfe:	615c      	str	r4, [r3, #20]
   d4e00:	831c      	strh	r4, [r3, #24]
   d4e02:	835c      	strh	r4, [r3, #26]
   d4e04:	771c      	strb	r4, [r3, #28]
   d4e06:	775c      	strb	r4, [r3, #29]
{
  blynk_blue = param.asInt();
}

//screen crap
Adafruit_SSD1306 myDisplay(128, 64);
   d4e08:	4c0d      	ldr	r4, [pc, #52]	; (d4e40 <_GLOBAL__sub_I_Blynk+0x74>)
   d4e0a:	601d      	str	r5, [r3, #0]
   d4e0c:	2240      	movs	r2, #64	; 0x40
   d4e0e:	f04f 33ff 	mov.w	r3, #4294967295
   d4e12:	2180      	movs	r1, #128	; 0x80
   d4e14:	4620      	mov	r0, r4
   d4e16:	f000 fdef 	bl	d59f8 <_ZN16Adafruit_SSD1306C1Ejja>
   d4e1a:	4632      	mov	r2, r6
   d4e1c:	4620      	mov	r0, r4
   d4e1e:	4909      	ldr	r1, [pc, #36]	; (d4e44 <_GLOBAL__sub_I_Blynk+0x78>)
   d4e20:	f002 fdac 	bl	d797c <__aeabi_atexit>

//abusing the blynk library instead of writing a function to time things
BlynkTimer timer;
   d4e24:	4808      	ldr	r0, [pc, #32]	; (d4e48 <_GLOBAL__sub_I_Blynk+0x7c>)
    night_lux();
  }
  else if(night_state == FALSE){
    evening_lux();
  }
   d4e26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

//screen crap
Adafruit_SSD1306 myDisplay(128, 64);

//abusing the blynk library instead of writing a function to time things
BlynkTimer timer;
   d4e2a:	f001 b810 	b.w	d5e4e <_ZN10BlynkTimerC1Ev>
   d4e2e:	bf00      	nop
   d4e30:	2003e384 	.word	0x2003e384
   d4e34:	2003e0d8 	.word	0x2003e0d8
   d4e38:	000d411d 	.word	0x000d411d
   d4e3c:	2003e360 	.word	0x2003e360
   d4e40:	2003e0e0 	.word	0x2003e0e0
   d4e44:	000d40cd 	.word	0x000d40cd
   d4e48:	2003e11c 	.word	0x2003e11c

000d4e4c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e50:	b085      	sub	sp, #20
   d4e52:	461e      	mov	r6, r3
   d4e54:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d4e58:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4e5c:	4615      	mov	r5, r2
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4e5e:	1a9a      	subs	r2, r3, r2
   d4e60:	2a00      	cmp	r2, #0
   d4e62:	bfb8      	it	lt
   d4e64:	4252      	neglt	r2, r2
   d4e66:	9200      	str	r2, [sp, #0]
   d4e68:	1a72      	subs	r2, r6, r1
   d4e6a:	2a00      	cmp	r2, #0
   d4e6c:	bfb8      	it	lt
   d4e6e:	4252      	neglt	r2, r2
   d4e70:	9201      	str	r2, [sp, #4]
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4e72:	460c      	mov	r4, r1
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
   d4e74:	9a00      	ldr	r2, [sp, #0]
   d4e76:	9901      	ldr	r1, [sp, #4]
   d4e78:	428a      	cmp	r2, r1
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4e7a:	4681      	mov	r9, r0
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
   d4e7c:	dd05      	ble.n	d4e8a <_ZN12Adafruit_GFX9writeLineEsssst+0x3e>
   d4e7e:	4632      	mov	r2, r6
        _swap_int16_t(x0, y0);
        _swap_int16_t(x1, y1);
   d4e80:	461e      	mov	r6, r3
   d4e82:	4613      	mov	r3, r2
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
   d4e84:	4622      	mov	r2, r4
        _swap_int16_t(x0, y0);
   d4e86:	462c      	mov	r4, r5
   d4e88:	4615      	mov	r5, r2
        _swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
   d4e8a:	42b4      	cmp	r4, r6
   d4e8c:	dd05      	ble.n	d4e9a <_ZN12Adafruit_GFX9writeLineEsssst+0x4e>
   d4e8e:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4e90:	461d      	mov	r5, r3
   d4e92:	4613      	mov	r3, r2
    if (steep) {
        _swap_int16_t(x0, y0);
        _swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
   d4e94:	4622      	mov	r2, r4
   d4e96:	4634      	mov	r4, r6
   d4e98:	4616      	mov	r6, r2
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);
   d4e9a:	1b5a      	subs	r2, r3, r5
   d4e9c:	2a00      	cmp	r2, #0
   d4e9e:	bfb8      	it	lt
   d4ea0:	4252      	neglt	r2, r2
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4ea2:	ebc4 0806 	rsb	r8, r4, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4ea6:	429d      	cmp	r5, r3
   d4ea8:	bfb4      	ite	lt
   d4eaa:	2301      	movlt	r3, #1
   d4eac:	f04f 33ff 	movge.w	r3, #4294967295
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4eb0:	fa1f f888 	uxth.w	r8, r8
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4eb4:	9302      	str	r3, [sp, #8]
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);
   d4eb6:	9203      	str	r2, [sp, #12]

    int16_t err = dx / 2;
   d4eb8:	fa0f f788 	sxth.w	r7, r8
   d4ebc:	2202      	movs	r2, #2
   d4ebe:	fb97 f7f2 	sdiv	r7, r7, r2
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
   d4ec2:	42b4      	cmp	r4, r6
   d4ec4:	dc1f      	bgt.n	d4f06 <_ZN12Adafruit_GFX9writeLineEsssst+0xba>
        if (steep) {
   d4ec6:	9a01      	ldr	r2, [sp, #4]
   d4ec8:	9b00      	ldr	r3, [sp, #0]
   d4eca:	4293      	cmp	r3, r2
   d4ecc:	f8d9 3000 	ldr.w	r3, [r9]
            writePixel(y0, x0, color);
   d4ed0:	bfc8      	it	gt
   d4ed2:	4622      	movgt	r2, r4
   d4ed4:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d4ed8:	bfc8      	it	gt
   d4eda:	4629      	movgt	r1, r5
   d4edc:	4653      	mov	r3, sl
        } else {
            writePixel(x0, y0, color);
   d4ede:	bfdc      	itt	le
   d4ee0:	462a      	movle	r2, r5
   d4ee2:	4621      	movle	r1, r4
   d4ee4:	4648      	mov	r0, r9
   d4ee6:	47d8      	blx	fp
        }
        err -= dy;
   d4ee8:	9b03      	ldr	r3, [sp, #12]
   d4eea:	1aff      	subs	r7, r7, r3
   d4eec:	b2bb      	uxth	r3, r7
   d4eee:	b21f      	sxth	r7, r3
        if (err < 0) {
   d4ef0:	2f00      	cmp	r7, #0
   d4ef2:	da05      	bge.n	d4f00 <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
            y0 += ystep;
   d4ef4:	9a02      	ldr	r2, [sp, #8]
            err += dx;
   d4ef6:	eb08 0703 	add.w	r7, r8, r3
        } else {
            writePixel(x0, y0, color);
        }
        err -= dy;
        if (err < 0) {
            y0 += ystep;
   d4efa:	4415      	add	r5, r2
   d4efc:	b22d      	sxth	r5, r5
            err += dx;
   d4efe:	b23f      	sxth	r7, r7
   d4f00:	3401      	adds	r4, #1
   d4f02:	b224      	sxth	r4, r4
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
   d4f04:	e7dd      	b.n	d4ec2 <_ZN12Adafruit_GFX9writeLineEsssst+0x76>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
   d4f06:	b005      	add	sp, #20
   d4f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4f0c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4f0c:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4f0e:	6804      	ldr	r4, [r0, #0]
   d4f10:	6924      	ldr	r4, [r4, #16]
   d4f12:	46a4      	mov	ip, r4
}
   d4f14:	f85d 4b04 	ldr.w	r4, [sp], #4
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
    drawPixel(x, y, color);
   d4f18:	4760      	bx	ip

000d4f1a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4f1a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4f1c:	6804      	ldr	r4, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4f1e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4f22:	9502      	str	r5, [sp, #8]
   d4f24:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d4f26:	46a4      	mov	ip, r4
}
   d4f28:	bc30      	pop	{r4, r5}
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4f2a:	4760      	bx	ip

000d4f2c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4f2c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4f2e:	6804      	ldr	r4, [r0, #0]
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4f30:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4f34:	9502      	str	r5, [sp, #8]
   d4f36:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d4f38:	46a4      	mov	ip, r4
}
   d4f3a:	bc30      	pop	{r4, r5}
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4f3c:	4760      	bx	ip

000d4f3e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4f3e:	b470      	push	{r4, r5, r6}
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4f40:	6804      	ldr	r4, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4f42:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d4f46:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4f4a:	9604      	str	r6, [sp, #16]
   d4f4c:	9503      	str	r5, [sp, #12]
   d4f4e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4f50:	46a4      	mov	ip, r4
}
   d4f52:	bc70      	pop	{r4, r5, r6}
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4f54:	4760      	bx	ip

000d4f56 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    End a display-writing routine, overwrite in subclasses if startWrite is defined!
*/
/**************************************************************************/
void Adafruit_GFX::endWrite(){
   d4f56:	4770      	bx	lr

000d4f58 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4f58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4f5c:	461c      	mov	r4, r3
    startWrite();
   d4f5e:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4f60:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4f64:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4f66:	4605      	mov	r5, r0
   d4f68:	4616      	mov	r6, r2
    startWrite();
    writeLine(x, y, x, y+h-1, color);
   d4f6a:	3c01      	subs	r4, #1
   d4f6c:	4434      	add	r4, r6
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4f6e:	460f      	mov	r7, r1
    startWrite();
    writeLine(x, y, x, y+h-1, color);
   d4f70:	b224      	sxth	r4, r4
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    startWrite();
   d4f72:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4f74:	682b      	ldr	r3, [r5, #0]
   d4f76:	f8cd 8004 	str.w	r8, [sp, #4]
   d4f7a:	9400      	str	r4, [sp, #0]
   d4f7c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4f7e:	4628      	mov	r0, r5
   d4f80:	463b      	mov	r3, r7
   d4f82:	4632      	mov	r2, r6
   d4f84:	4639      	mov	r1, r7
   d4f86:	47a0      	blx	r4
    endWrite();
   d4f88:	682b      	ldr	r3, [r5, #0]
   d4f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f8c:	4628      	mov	r0, r5
}
   d4f8e:	b002      	add	sp, #8
   d4f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    startWrite();
    writeLine(x, y, x, y+h-1, color);
    endWrite();
   d4f94:	4718      	bx	r3

000d4f96 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4f96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4f9a:	461d      	mov	r5, r3
    startWrite();
   d4f9c:	6803      	ldr	r3, [r0, #0]
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4f9e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4fa2:	695b      	ldr	r3, [r3, #20]
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4fa4:	4604      	mov	r4, r0
   d4fa6:	4617      	mov	r7, r2
   d4fa8:	460e      	mov	r6, r1
    startWrite();
   d4faa:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4fac:	e88d 0180 	stmia.w	sp, {r7, r8}
   d4fb0:	6822      	ldr	r2, [r4, #0]
   d4fb2:	1e6b      	subs	r3, r5, #1
   d4fb4:	4433      	add	r3, r6
   d4fb6:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d4fb8:	4620      	mov	r0, r4
   d4fba:	b21b      	sxth	r3, r3
   d4fbc:	463a      	mov	r2, r7
   d4fbe:	4631      	mov	r1, r6
   d4fc0:	47a8      	blx	r5
    endWrite();
   d4fc2:	6823      	ldr	r3, [r4, #0]
   d4fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4fc6:	4620      	mov	r0, r4
}
   d4fc8:	b002      	add	sp, #8
   d4fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    startWrite();
    writeLine(x, y, x+w-1, y, color);
    endWrite();
   d4fce:	4718      	bx	r3

000d4fd0 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4fd0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4fd4:	461e      	mov	r6, r3
    startWrite();
   d4fd6:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4fd8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
    startWrite();
   d4fdc:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4fde:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4fe2:	460c      	mov	r4, r1
   d4fe4:	4605      	mov	r5, r0
   d4fe6:	4617      	mov	r7, r2
    startWrite();
   d4fe8:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d4fea:	4426      	add	r6, r4
   d4fec:	42b4      	cmp	r4, r6
   d4fee:	682a      	ldr	r2, [r5, #0]
   d4ff0:	da0b      	bge.n	d500a <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d4ff2:	f8cd 9000 	str.w	r9, [sp]
   d4ff6:	f8d2 a020 	ldr.w	sl, [r2, #32]
   d4ffa:	4621      	mov	r1, r4
   d4ffc:	4643      	mov	r3, r8
   d4ffe:	463a      	mov	r2, r7
   d5000:	4628      	mov	r0, r5
   d5002:	3401      	adds	r4, #1
   d5004:	47d0      	blx	sl
   d5006:	b224      	sxth	r4, r4
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    startWrite();
    for (int16_t i=x; i<x+w; i++) {
   d5008:	e7f0      	b.n	d4fec <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
        writeFastVLine(i, y, h, color);
    }
    endWrite();
   d500a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d500c:	4628      	mov	r0, r5
}
   d500e:	b002      	add	sp, #8
   d5010:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        uint16_t color) {
    startWrite();
    for (int16_t i=x; i<x+w; i++) {
        writeFastVLine(i, y, h, color);
    }
    endWrite();
   d5014:	4718      	bx	r3

000d5016 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d5016:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d5018:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d501c:	6804      	ldr	r4, [r0, #0]
   d501e:	9101      	str	r1, [sp, #4]
   d5020:	9200      	str	r2, [sp, #0]
   d5022:	2200      	movs	r2, #0
   d5024:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5028:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d502a:	4611      	mov	r1, r2
   d502c:	47a0      	blx	r4
}
   d502e:	b002      	add	sp, #8
   d5030:	bd10      	pop	{r4, pc}

000d5032 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d5032:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   d5036:	4299      	cmp	r1, r3
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d5038:	4690      	mov	r8, r2
   d503a:	4607      	mov	r7, r0
   d503c:	460e      	mov	r6, r1
   d503e:	461c      	mov	r4, r3
   d5040:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
   d5044:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d5048:	6802      	ldr	r2, [r0, #0]
    // Update in subclasses if desired!
    if(x0 == x1){
   d504a:	d10b      	bne.n	d5064 <_ZN12Adafruit_GFX8drawLineEsssst+0x32>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d504c:	45a8      	cmp	r8, r5
   d504e:	bfc2      	ittt	gt
   d5050:	4643      	movgt	r3, r8
   d5052:	46a8      	movgt	r8, r5
   d5054:	461d      	movgt	r5, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d5056:	1c6b      	adds	r3, r5, #1
   d5058:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d505c:	ebc8 0303 	rsb	r3, r8, r3
   d5060:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d5062:	e00c      	b.n	d507e <_ZN12Adafruit_GFX8drawLineEsssst+0x4c>
    } else if(y0 == y1){
   d5064:	45a8      	cmp	r8, r5
   d5066:	d113      	bne.n	d5090 <_ZN12Adafruit_GFX8drawLineEsssst+0x5e>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d5068:	4299      	cmp	r1, r3
   d506a:	bfc4      	itt	gt
   d506c:	460b      	movgt	r3, r1
   d506e:	4626      	movgt	r6, r4
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5070:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    // Update in subclasses if desired!
    if(x0 == x1){
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
   d5074:	bfc8      	it	gt
   d5076:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d5078:	1c63      	adds	r3, r4, #1
   d507a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d507c:	1b9b      	subs	r3, r3, r6
   d507e:	b21b      	sxth	r3, r3
   d5080:	4642      	mov	r2, r8
   d5082:	4631      	mov	r1, r6
   d5084:	4638      	mov	r0, r7
   d5086:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   d5088:	b003      	add	sp, #12
   d508a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d508e:	4760      	bx	ip
    } else {
        startWrite();
   d5090:	6953      	ldr	r3, [r2, #20]
   d5092:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d5094:	683b      	ldr	r3, [r7, #0]
   d5096:	e88d 0220 	stmia.w	sp, {r5, r9}
   d509a:	4638      	mov	r0, r7
   d509c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   d509e:	4642      	mov	r2, r8
   d50a0:	4623      	mov	r3, r4
   d50a2:	4631      	mov	r1, r6
   d50a4:	47a8      	blx	r5
        endWrite();
   d50a6:	683b      	ldr	r3, [r7, #0]
   d50a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50aa:	4638      	mov	r0, r7
    }
}
   d50ac:	b003      	add	sp, #12
   d50ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
   d50b2:	4718      	bx	r3

000d50b4 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d50b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d50b8:	461e      	mov	r6, r3
    startWrite();
   d50ba:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d50bc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d50c0:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d50c2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d50c6:	4604      	mov	r4, r0
   d50c8:	460d      	mov	r5, r1
   d50ca:	4617      	mov	r7, r2
    startWrite();
   d50cc:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d50ce:	6823      	ldr	r3, [r4, #0]
   d50d0:	f8cd 8000 	str.w	r8, [sp]
   d50d4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d50d8:	463a      	mov	r2, r7
   d50da:	4633      	mov	r3, r6
   d50dc:	4629      	mov	r1, r5
   d50de:	4620      	mov	r0, r4
   d50e0:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d50e2:	6823      	ldr	r3, [r4, #0]
   d50e4:	f8cd 8000 	str.w	r8, [sp]
   d50e8:	f109 32ff 	add.w	r2, r9, #4294967295
   d50ec:	443a      	add	r2, r7
   d50ee:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d50f2:	4629      	mov	r1, r5
   d50f4:	4633      	mov	r3, r6
   d50f6:	4620      	mov	r0, r4
   d50f8:	b212      	sxth	r2, r2
   d50fa:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d50fc:	6823      	ldr	r3, [r4, #0]
   d50fe:	f8cd 8000 	str.w	r8, [sp]
   d5102:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d5106:	463a      	mov	r2, r7
   d5108:	464b      	mov	r3, r9
   d510a:	4629      	mov	r1, r5
   d510c:	4620      	mov	r0, r4
   d510e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d5110:	6823      	ldr	r3, [r4, #0]
   d5112:	f8cd 8000 	str.w	r8, [sp]
   d5116:	1e71      	subs	r1, r6, #1
   d5118:	4429      	add	r1, r5
   d511a:	4620      	mov	r0, r4
   d511c:	6a1d      	ldr	r5, [r3, #32]
   d511e:	463a      	mov	r2, r7
   d5120:	464b      	mov	r3, r9
   d5122:	b209      	sxth	r1, r1
   d5124:	47a8      	blx	r5
    endWrite();
   d5126:	6823      	ldr	r3, [r4, #0]
   d5128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d512a:	4620      	mov	r0, r4
}
   d512c:	b002      	add	sp, #8
   d512e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    startWrite();
    writeFastHLine(x, y, w, color);
    writeFastHLine(x, y+h-1, w, color);
    writeFastVLine(x, y, h, color);
    writeFastVLine(x+w-1, y, h, color);
    endWrite();
   d5132:	4718      	bx	r3

000d5134 <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
   d5134:	4770      	bx	lr

000d5136 <_ZN12Adafruit_GFX11setRotationEh>:
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    rotation = (x & 3);
   d5136:	f001 0103 	and.w	r1, r1, #3
    switch(rotation) {
   d513a:	2901      	cmp	r1, #1
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    rotation = (x & 3);
   d513c:	7641      	strb	r1, [r0, #25]
   d513e:	8903      	ldrh	r3, [r0, #8]
   d5140:	8942      	ldrh	r2, [r0, #10]
    switch(rotation) {
   d5142:	d004      	beq.n	d514e <_ZN12Adafruit_GFX11setRotationEh+0x18>
   d5144:	2903      	cmp	r1, #3
   d5146:	d002      	beq.n	d514e <_ZN12Adafruit_GFX11setRotationEh+0x18>
        case 0:
        case 2:
            _width  = WIDTH;
   d5148:	8183      	strh	r3, [r0, #12]
            _height = HEIGHT;
   d514a:	81c2      	strh	r2, [r0, #14]
   d514c:	4770      	bx	lr
            break;
        case 1:
        case 3:
            _width  = HEIGHT;
   d514e:	8182      	strh	r2, [r0, #12]
            _height = WIDTH;
   d5150:	81c3      	strh	r3, [r0, #14]
   d5152:	4770      	bx	lr

000d5154 <_ZN12Adafruit_GFXC1Ess>:
   @brief    Instatiate a GFX context for graphics! Can only be done by a superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d5154:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d5156:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5158:	2400      	movs	r4, #0
   d515a:	4d09      	ldr	r5, [pc, #36]	; (d5180 <_ZN12Adafruit_GFXC1Ess+0x2c>)
   d515c:	8142      	strh	r2, [r0, #10]
{
    _width    = WIDTH;
   d515e:	8181      	strh	r1, [r0, #12]
    _height   = HEIGHT;
   d5160:	81c2      	strh	r2, [r0, #14]
    rotation  = 0;
    cursor_y  = cursor_x    = 0;
    textsize  = 1;
    textcolor = textbgcolor = 0xFFFF;
   d5162:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    _width    = WIDTH;
    _height   = HEIGHT;
    rotation  = 0;
    cursor_y  = cursor_x    = 0;
    textsize  = 1;
   d5166:	2201      	movs	r2, #1
   d5168:	6044      	str	r4, [r0, #4]
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
WIDTH(w), HEIGHT(h)
   d516a:	6005      	str	r5, [r0, #0]
{
    _width    = WIDTH;
    _height   = HEIGHT;
    rotation  = 0;
   d516c:	7644      	strb	r4, [r0, #25]
    cursor_y  = cursor_x    = 0;
   d516e:	8204      	strh	r4, [r0, #16]
   d5170:	8244      	strh	r4, [r0, #18]
    textsize  = 1;
   d5172:	7602      	strb	r2, [r0, #24]
    textcolor = textbgcolor = 0xFFFF;
   d5174:	82c1      	strh	r1, [r0, #22]
   d5176:	8281      	strh	r1, [r0, #20]
    wrap      = true;
   d5178:	7682      	strb	r2, [r0, #26]
    _cp437    = false;
   d517a:	76c4      	strb	r4, [r0, #27]
    gfxFont   = NULL;
   d517c:	61c4      	str	r4, [r0, #28]
}
   d517e:	bd30      	pop	{r4, r5, pc}
   d5180:	000da3c4 	.word	0x000da3c4

000d5184 <_ZN12Adafruit_GFX8drawCharEsshtth>:
    @param    bg 16-bit 5-6-5 Color to fill background with (if same as color, no background)
    @param    size  Font magnification level, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
   d5184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5188:	b091      	sub	sp, #68	; 0x44
   d518a:	4691      	mov	r9, r2

    if(!gfxFont) { // 'Classic' built-in font
   d518c:	69c2      	ldr	r2, [r0, #28]
    @param    bg 16-bit 5-6-5 Color to fill background with (if same as color, no background)
    @param    size  Font magnification level, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
   d518e:	9105      	str	r1, [sp, #20]
   d5190:	461e      	mov	r6, r3
   d5192:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
   d5196:	9302      	str	r3, [sp, #8]
   d5198:	4604      	mov	r4, r0
   d519a:	f8bd a06c 	ldrh.w	sl, [sp, #108]	; 0x6c
   d519e:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70

    if(!gfxFont) { // 'Classic' built-in font
   d51a2:	2a00      	cmp	r2, #0
   d51a4:	f040 80b7 	bne.w	d5316 <_ZN12Adafruit_GFX8drawCharEsshtth+0x192>

        if((x >= _width)            || // Clip right
   d51a8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d51ac:	428b      	cmp	r3, r1
   d51ae:	f340 8145 	ble.w	d543c <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b8>
   d51b2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d51b6:	454b      	cmp	r3, r9
   d51b8:	f340 8140 	ble.w	d543c <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b8>
           (y >= _height)           || // Clip bottom
           ((x + 6 * size - 1) < 0) || // Clip left
   d51bc:	2306      	movs	r3, #6
  uint16_t color, uint16_t bg, uint8_t size) {

    if(!gfxFont) { // 'Classic' built-in font

        if((x >= _width)            || // Clip right
           (y >= _height)           || // Clip bottom
   d51be:	fb13 1305 	smlabb	r3, r3, r5, r1
   d51c2:	2b00      	cmp	r3, #0
   d51c4:	f340 813a 	ble.w	d543c <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b8>
           ((x + 6 * size - 1) < 0) || // Clip left
   d51c8:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   d51cc:	2b00      	cmp	r3, #0
   d51ce:	f340 8135 	ble.w	d543c <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b8>
           ((y + 8 * size - 1) < 0))   // Clip top
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d51d2:	7ec3      	ldrb	r3, [r0, #27]
   d51d4:	b91b      	cbnz	r3, d51de <_ZN12Adafruit_GFX8drawCharEsshtth+0x5a>
   d51d6:	2eaf      	cmp	r6, #175	; 0xaf
   d51d8:	bf84      	itt	hi
   d51da:	3601      	addhi	r6, #1
   d51dc:	b2f6      	uxtbhi	r6, r6

        startWrite();
   d51de:	6823      	ldr	r3, [r4, #0]
   d51e0:	4620      	mov	r0, r4
   d51e2:	695b      	ldr	r3, [r3, #20]
   d51e4:	4798      	blx	r3
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d51e6:	2305      	movs	r3, #5
   d51e8:	930c      	str	r3, [sp, #48]	; 0x30
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d51ea:	2300      	movs	r3, #0
   d51ec:	9303      	str	r3, [sp, #12]
   d51ee:	fa1f f389 	uxth.w	r3, r9
   d51f2:	9307      	str	r3, [sp, #28]
   d51f4:	3308      	adds	r3, #8
   d51f6:	b29b      	uxth	r3, r3
   d51f8:	930e      	str	r3, [sp, #56]	; 0x38
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d51fa:	2305      	movs	r3, #5
   d51fc:	461a      	mov	r2, r3
   d51fe:	9b03      	ldr	r3, [sp, #12]
   d5200:	f8dd 801c 	ldr.w	r8, [sp, #28]
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d5204:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5208:	fb12 3306 	smlabb	r3, r2, r6, r3
   d520c:	4a8d      	ldr	r2, [pc, #564]	; (d5444 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2c0>)
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d520e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d5212:	5cd3      	ldrb	r3, [r2, r3]
   d5214:	9308      	str	r3, [sp, #32]
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d5216:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d521a:	9304      	str	r3, [sp, #16]
   d521c:	9a04      	ldr	r2, [sp, #16]
   d521e:	9b03      	ldr	r3, [sp, #12]
   d5220:	b2af      	uxth	r7, r5
   d5222:	fb03 2307 	mla	r3, r3, r7, r2
   d5226:	b21b      	sxth	r3, r3
   d5228:	930b      	str	r3, [sp, #44]	; 0x2c
                } else if(bg != color) {
                    if(size == 1)
                        writePixel(x+i, y+j, bg);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d522a:	b22b      	sxth	r3, r5
   d522c:	9306      	str	r3, [sp, #24]
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
                } else if(bg != color) {
                    if(size == 1)
                        writePixel(x+i, y+j, bg);
   d522e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   d5232:	9b04      	ldr	r3, [sp, #16]
   d5234:	fa13 f382 	uxtah	r3, r3, r2
   d5238:	b21b      	sxth	r3, r3
   d523a:	930d      	str	r3, [sp, #52]	; 0x34

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
   d523c:	9b08      	ldr	r3, [sp, #32]
   d523e:	07d9      	lsls	r1, r3, #31
   d5240:	d510      	bpl.n	d5264 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe0>
                    if(size == 1)
   d5242:	2d01      	cmp	r5, #1
   d5244:	6823      	ldr	r3, [r4, #0]
   d5246:	d103      	bne.n	d5250 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
                        writePixel(x+i, y+j, color);
   d5248:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d524c:	9b02      	ldr	r3, [sp, #8]
   d524e:	e012      	b.n	d5276 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d5250:	9a02      	ldr	r2, [sp, #8]
   d5252:	9201      	str	r2, [sp, #4]
   d5254:	9a06      	ldr	r2, [sp, #24]
   d5256:	9200      	str	r2, [sp, #0]
   d5258:	f8d3 b01c 	ldr.w	fp, [r3, #28]
   d525c:	4613      	mov	r3, r2
   d525e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   d5262:	e017      	b.n	d5294 <_ZN12Adafruit_GFX8drawCharEsshtth+0x110>
                } else if(bg != color) {
   d5264:	9b02      	ldr	r3, [sp, #8]
   d5266:	4553      	cmp	r3, sl
   d5268:	d017      	beq.n	d529a <_ZN12Adafruit_GFX8drawCharEsshtth+0x116>
                    if(size == 1)
   d526a:	2d01      	cmp	r5, #1
   d526c:	6823      	ldr	r3, [r4, #0]
   d526e:	d108      	bne.n	d5282 <_ZN12Adafruit_GFX8drawCharEsshtth+0xfe>
                        writePixel(x+i, y+j, bg);
   d5270:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d5274:	4653      	mov	r3, sl
   d5276:	fa0f f288 	sxth.w	r2, r8
   d527a:	990d      	ldr	r1, [sp, #52]	; 0x34
   d527c:	4620      	mov	r0, r4
   d527e:	47d8      	blx	fp
   d5280:	e00b      	b.n	d529a <_ZN12Adafruit_GFX8drawCharEsshtth+0x116>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d5282:	9a06      	ldr	r2, [sp, #24]
   d5284:	9200      	str	r2, [sp, #0]
   d5286:	f8cd a004 	str.w	sl, [sp, #4]
   d528a:	f8d3 b01c 	ldr.w	fp, [r3, #28]
   d528e:	4613      	mov	r3, r2
   d5290:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
   d5294:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d5296:	4620      	mov	r0, r4
   d5298:	47d8      	blx	fp
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d529a:	9b08      	ldr	r3, [sp, #32]
   d529c:	085b      	lsrs	r3, r3, #1
   d529e:	9308      	str	r3, [sp, #32]
   d52a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d52a2:	443b      	add	r3, r7
   d52a4:	b29b      	uxth	r3, r3
   d52a6:	930a      	str	r3, [sp, #40]	; 0x28
   d52a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d52aa:	443b      	add	r3, r7
   d52ac:	b29b      	uxth	r3, r3
   d52ae:	9309      	str	r3, [sp, #36]	; 0x24
   d52b0:	f108 0801 	add.w	r8, r8, #1
   d52b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d52b6:	fa1f f888 	uxth.w	r8, r8
   d52ba:	4543      	cmp	r3, r8
   d52bc:	d1be      	bne.n	d523c <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d52be:	9b03      	ldr	r3, [sp, #12]
   d52c0:	3301      	adds	r3, #1
   d52c2:	b25b      	sxtb	r3, r3
   d52c4:	9303      	str	r3, [sp, #12]
   d52c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d52c8:	3b01      	subs	r3, #1
   d52ca:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d52ce:	930c      	str	r3, [sp, #48]	; 0x30
   d52d0:	d193      	bne.n	d51fa <_ZN12Adafruit_GFX8drawCharEsshtth+0x76>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
                }
            }
        }
        if(bg != color) { // If opaque, draw vertical line for last column
   d52d2:	9b02      	ldr	r3, [sp, #8]
   d52d4:	4553      	cmp	r3, sl
   d52d6:	f000 80aa 	beq.w	d542e <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
   d52da:	2d01      	cmp	r5, #1
   d52dc:	6823      	ldr	r3, [r4, #0]
   d52de:	d10a      	bne.n	d52f6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x172>
   d52e0:	9904      	ldr	r1, [sp, #16]
   d52e2:	f8cd a000 	str.w	sl, [sp]
   d52e6:	3105      	adds	r1, #5
   d52e8:	6a1d      	ldr	r5, [r3, #32]
   d52ea:	464a      	mov	r2, r9
   d52ec:	2308      	movs	r3, #8
   d52ee:	b209      	sxth	r1, r1
   d52f0:	4620      	mov	r0, r4
   d52f2:	47a8      	blx	r5
   d52f4:	e09b      	b.n	d542e <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
   d52f6:	9a04      	ldr	r2, [sp, #16]
   d52f8:	f8cd a004 	str.w	sl, [sp, #4]
   d52fc:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   d5300:	440a      	add	r2, r1
   d5302:	00ff      	lsls	r7, r7, #3
   d5304:	4611      	mov	r1, r2
   d5306:	9700      	str	r7, [sp, #0]
   d5308:	69de      	ldr	r6, [r3, #28]
   d530a:	464a      	mov	r2, r9
   d530c:	462b      	mov	r3, r5
   d530e:	b209      	sxth	r1, r1
   d5310:	4620      	mov	r0, r4
   d5312:	47b0      	blx	r6
   d5314:	e08b      	b.n	d542e <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d5316:	7a13      	ldrb	r3, [r2, #8]
   d5318:	1af6      	subs	r6, r6, r3
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
   d531a:	6853      	ldr	r3, [r2, #4]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d531c:	b2f6      	uxtb	r6, r6
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
   d531e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
   d5322:	6813      	ldr	r3, [r2, #0]
   d5324:	930b      	str	r3, [sp, #44]	; 0x2c

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d5326:	78b3      	ldrb	r3, [r6, #2]
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
   d5328:	f996 a006 	ldrsb.w	sl, [r6, #6]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d532c:	9307      	str	r3, [sp, #28]
                 h  = pgm_read_byte(&glyph->height);
   d532e:	78f3      	ldrb	r3, [r6, #3]
   d5330:	930c      	str	r3, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
   d5332:	2d01      	cmp	r5, #1
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d5334:	f996 3005 	ldrsb.w	r3, [r6, #5]
   d5338:	9308      	str	r3, [sp, #32]
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;
   d533a:	bf94      	ite	ls
   d533c:	2300      	movls	r3, #0

        if(size > 1) {
            xo16 = xo;
            yo16 = yo;
   d533e:	fa0f f38a 	sxthhi.w	r3, sl

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d5342:	f8b6 b000 	ldrh.w	fp, [r6]
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
            xo16 = xo;
            yo16 = yo;
   d5346:	bf8e      	itee	hi
   d5348:	9304      	strhi	r3, [sp, #16]
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;
   d534a:	461e      	movls	r6, r3
   d534c:	9304      	strls	r3, [sp, #16]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
   d534e:	6803      	ldr	r3, [r0, #0]
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
            xo16 = xo;
   d5350:	bf88      	it	hi
   d5352:	f9bd 6020 	ldrshhi.w	r6, [sp, #32]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
   d5356:	695b      	ldr	r3, [r3, #20]
   d5358:	4798      	blx	r3
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d535a:	b2ab      	uxth	r3, r5
   d535c:	9306      	str	r3, [sp, #24]
   d535e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d5362:	9305      	str	r3, [sp, #20]
   d5364:	9a05      	ldr	r2, [sp, #20]
   d5366:	9b06      	ldr	r3, [sp, #24]
   d5368:	fb06 2603 	mla	r6, r6, r3, r2
   d536c:	b2b3      	uxth	r3, r6
   d536e:	930a      	str	r3, [sp, #40]	; 0x28
   d5370:	fa1f f389 	uxth.w	r3, r9
   d5374:	2600      	movs	r6, #0
   d5376:	9309      	str	r3, [sp, #36]	; 0x24
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
   d5378:	4453      	add	r3, sl
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
   d537a:	46b0      	mov	r8, r6
   d537c:	9603      	str	r6, [sp, #12]
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
   d537e:	930f      	str	r3, [sp, #60]	; 0x3c
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
   d5380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d5382:	b2f2      	uxtb	r2, r6
   d5384:	429a      	cmp	r2, r3
   d5386:	d252      	bcs.n	d542e <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d5388:	9b04      	ldr	r3, [sp, #16]
   d538a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   d538e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   d5392:	18f3      	adds	r3, r6, r3
   d5394:	fb13 f301 	smulbb	r3, r3, r1
   d5398:	9909      	ldr	r1, [sp, #36]	; 0x24
   d539a:	440b      	add	r3, r1
   d539c:	b21b      	sxth	r3, r3
   d539e:	930d      	str	r3, [sp, #52]	; 0x34
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d53a2:	441a      	add	r2, r3
   d53a4:	b213      	sxth	r3, r2
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d53a6:	f04f 0a00 	mov.w	sl, #0
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53aa:	930e      	str	r3, [sp, #56]	; 0x38
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
   d53ac:	9907      	ldr	r1, [sp, #28]
   d53ae:	fa5f f28a 	uxtb.w	r2, sl
   d53b2:	eb08 0302 	add.w	r3, r8, r2
   d53b6:	4291      	cmp	r1, r2
   d53b8:	b2db      	uxtb	r3, r3
   d53ba:	d932      	bls.n	d5422 <_ZN12Adafruit_GFX8drawCharEsshtth+0x29e>
                if(!(bit++ & 7)) {
   d53bc:	075a      	lsls	r2, r3, #29
   d53be:	d107      	bne.n	d53d0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x24c>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d53c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d53c2:	f10b 0301 	add.w	r3, fp, #1
   d53c6:	f812 200b 	ldrb.w	r2, [r2, fp]
   d53ca:	9203      	str	r2, [sp, #12]
   d53cc:	fa1f fb83 	uxth.w	fp, r3
                }
                if(bits & 0x80) {
   d53d0:	9b03      	ldr	r3, [sp, #12]
   d53d2:	061b      	lsls	r3, r3, #24
   d53d4:	d51a      	bpl.n	d540c <_ZN12Adafruit_GFX8drawCharEsshtth+0x288>
                    if(size == 1) {
   d53d6:	2d01      	cmp	r5, #1
   d53d8:	d10c      	bne.n	d53f4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x270>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d53da:	9b05      	ldr	r3, [sp, #20]
   d53dc:	9a08      	ldr	r2, [sp, #32]
   d53de:	1899      	adds	r1, r3, r2
   d53e0:	6823      	ldr	r3, [r4, #0]
   d53e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d53e4:	699b      	ldr	r3, [r3, #24]
   d53e6:	4451      	add	r1, sl
   d53e8:	461f      	mov	r7, r3
   d53ea:	b209      	sxth	r1, r1
   d53ec:	9b02      	ldr	r3, [sp, #8]
   d53ee:	4620      	mov	r0, r4
   d53f0:	47b8      	blx	r7
   d53f2:	e00b      	b.n	d540c <_ZN12Adafruit_GFX8drawCharEsshtth+0x288>
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
                          size, size, color);
   d53f4:	9902      	ldr	r1, [sp, #8]
   d53f6:	6822      	ldr	r2, [r4, #0]
   d53f8:	9101      	str	r1, [sp, #4]
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d53fa:	b22b      	sxth	r3, r5
                          size, size, color);
   d53fc:	9300      	str	r3, [sp, #0]
   d53fe:	69d2      	ldr	r2, [r2, #28]
   d5400:	fa0f f189 	sxth.w	r1, r9
   d5404:	4617      	mov	r7, r2
   d5406:	4620      	mov	r0, r4
   d5408:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d540a:	47b8      	blx	r7
                    }
                }
                bits <<= 1;
   d540c:	9b03      	ldr	r3, [sp, #12]
   d540e:	005f      	lsls	r7, r3, #1
   d5410:	b2fb      	uxtb	r3, r7
   d5412:	9303      	str	r3, [sp, #12]
   d5414:	9b06      	ldr	r3, [sp, #24]
   d5416:	4499      	add	r9, r3
   d5418:	f10a 0a01 	add.w	sl, sl, #1
   d541c:	fa1f f989 	uxth.w	r9, r9
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
   d5420:	e7c4      	b.n	d53ac <_ZN12Adafruit_GFX8drawCharEsshtth+0x228>
   d5422:	9b07      	ldr	r3, [sp, #28]
   d5424:	4498      	add	r8, r3
   d5426:	fa5f f888 	uxtb.w	r8, r8
   d542a:	3601      	adds	r6, #1
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
   d542c:	e7a8      	b.n	d5380 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fc>
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();
   d542e:	6823      	ldr	r3, [r4, #0]
   d5430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5432:	4620      	mov	r0, r4

    } // End classic vs custom font
}
   d5434:	b011      	add	sp, #68	; 0x44
   d5436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();
   d543a:	4718      	bx	r3

    } // End classic vs custom font
}
   d543c:	b011      	add	sp, #68	; 0x44
   d543e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5442:	bf00      	nop
   d5444:	000da414 	.word	0x000da414

000d5448 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
   d5448:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d544a:	69c2      	ldr	r2, [r0, #28]
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
   d544c:	4604      	mov	r4, r0
   d544e:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d5450:	2a00      	cmp	r2, #0
   d5452:	d12d      	bne.n	d54b0 <_ZN12Adafruit_GFX5writeEh+0x68>

        if(c == '\n') {                        // Newline?
   d5454:	290a      	cmp	r1, #10
   d5456:	d105      	bne.n	d5464 <_ZN12Adafruit_GFX5writeEh+0x1c>
            cursor_x  = 0;                     // Reset x to zero,
   d5458:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize * 8;          // advance y one line
   d545a:	8a43      	ldrh	r3, [r0, #18]
   d545c:	7e02      	ldrb	r2, [r0, #24]
   d545e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5462:	e02e      	b.n	d54c2 <_ZN12Adafruit_GFX5writeEh+0x7a>
        } else if(c != '\r') {                 // Ignore carriage returns
   d5464:	290d      	cmp	r1, #13
   d5466:	d065      	beq.n	d5534 <_ZN12Adafruit_GFX5writeEh+0xec>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
   d5468:	7e81      	ldrb	r1, [r0, #26]
   d546a:	7e00      	ldrb	r0, [r0, #24]
   d546c:	b169      	cbz	r1, d548a <_ZN12Adafruit_GFX5writeEh+0x42>
   d546e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
   d5472:	2106      	movs	r1, #6
   d5474:	fb11 5100 	smlabb	r1, r1, r0, r5
   d5478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   d547c:	42a9      	cmp	r1, r5
                cursor_x  = 0;                 // Reset x to zero,
   d547e:	bfc1      	itttt	gt
   d5480:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize * 8;      // advance y one line
   d5482:	8a62      	ldrhgt	r2, [r4, #18]
   d5484:	eb02 02c0 	addgt.w	r2, r2, r0, lsl #3
   d5488:	8262      	strhgt	r2, [r4, #18]
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d548a:	9002      	str	r0, [sp, #8]
   d548c:	8ae0      	ldrh	r0, [r4, #22]
   d548e:	9001      	str	r0, [sp, #4]
   d5490:	8aa0      	ldrh	r0, [r4, #20]
   d5492:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d5496:	9000      	str	r0, [sp, #0]
   d5498:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d549c:	4620      	mov	r0, r4
   d549e:	f7ff fe71 	bl	d5184 <_ZN12Adafruit_GFX8drawCharEsshtth>
            cursor_x += textsize * 6;          // Advance x one char
   d54a2:	7e23      	ldrb	r3, [r4, #24]
   d54a4:	8a22      	ldrh	r2, [r4, #16]
   d54a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d54aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d54ae:	e040      	b.n	d5532 <_ZN12Adafruit_GFX5writeEh+0xea>
        }

    } else { // Custom font

        if(c == '\n') {
   d54b0:	290a      	cmp	r1, #10
   d54b2:	d108      	bne.n	d54c6 <_ZN12Adafruit_GFX5writeEh+0x7e>
            cursor_x  = 0;
   d54b4:	2300      	movs	r3, #0
   d54b6:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d54b8:	7e01      	ldrb	r1, [r0, #24]
   d54ba:	7a92      	ldrb	r2, [r2, #10]
   d54bc:	8a43      	ldrh	r3, [r0, #18]
   d54be:	fb01 3302 	mla	r3, r1, r2, r3
   d54c2:	8263      	strh	r3, [r4, #18]
   d54c4:	e036      	b.n	d5534 <_ZN12Adafruit_GFX5writeEh+0xec>
        } else if(c != '\r') {
   d54c6:	290d      	cmp	r1, #13
   d54c8:	d034      	beq.n	d5534 <_ZN12Adafruit_GFX5writeEh+0xec>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d54ca:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d54cc:	42a9      	cmp	r1, r5
   d54ce:	d331      	bcc.n	d5534 <_ZN12Adafruit_GFX5writeEh+0xec>
   d54d0:	7a51      	ldrb	r1, [r2, #9]
   d54d2:	4299      	cmp	r1, r3
   d54d4:	d32e      	bcc.n	d5534 <_ZN12Adafruit_GFX5writeEh+0xec>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
   d54d6:	6851      	ldr	r1, [r2, #4]
   d54d8:	1b5d      	subs	r5, r3, r5
   d54da:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d54de:	78a9      	ldrb	r1, [r5, #2]
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d54e0:	b311      	cbz	r1, d5528 <_ZN12Adafruit_GFX5writeEh+0xe0>
   d54e2:	78e8      	ldrb	r0, [r5, #3]
   d54e4:	b300      	cbz	r0, d5528 <_ZN12Adafruit_GFX5writeEh+0xe0>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
   d54e6:	7ea6      	ldrb	r6, [r4, #26]
   d54e8:	7e20      	ldrb	r0, [r4, #24]
   d54ea:	b18e      	cbz	r6, d5510 <_ZN12Adafruit_GFX5writeEh+0xc8>
   d54ec:	f995 6005 	ldrsb.w	r6, [r5, #5]
   d54f0:	4431      	add	r1, r6
   d54f2:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d54f6:	fb00 6101 	mla	r1, r0, r1, r6
   d54fa:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d54fe:	42b1      	cmp	r1, r6
   d5500:	dd06      	ble.n	d5510 <_ZN12Adafruit_GFX5writeEh+0xc8>
                        cursor_x  = 0;
   d5502:	2100      	movs	r1, #0
   d5504:	8221      	strh	r1, [r4, #16]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d5506:	7a92      	ldrb	r2, [r2, #10]
   d5508:	8a61      	ldrh	r1, [r4, #18]
   d550a:	fb02 1200 	mla	r2, r2, r0, r1
   d550e:	8262      	strh	r2, [r4, #18]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d5510:	9002      	str	r0, [sp, #8]
   d5512:	8ae0      	ldrh	r0, [r4, #22]
   d5514:	9001      	str	r0, [sp, #4]
   d5516:	8aa0      	ldrh	r0, [r4, #20]
   d5518:	9000      	str	r0, [sp, #0]
   d551a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d551e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d5522:	4620      	mov	r0, r4
   d5524:	f7ff fe2e 	bl	d5184 <_ZN12Adafruit_GFX8drawCharEsshtth>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
   d5528:	7929      	ldrb	r1, [r5, #4]
   d552a:	7e22      	ldrb	r2, [r4, #24]
   d552c:	8a23      	ldrh	r3, [r4, #16]
   d552e:	fb01 3302 	mla	r3, r1, r2, r3
   d5532:	8223      	strh	r3, [r4, #16]
            }
        }

    }
    return 1;
}
   d5534:	2001      	movs	r0, #1
   d5536:	b004      	add	sp, #16
   d5538:	bd70      	pop	{r4, r5, r6, pc}

000d553a <_ZN12Adafruit_GFX9setCursorEss>:
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
*/
/**************************************************************************/
void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   d553a:	8201      	strh	r1, [r0, #16]
    cursor_y = y;
   d553c:	8242      	strh	r2, [r0, #18]
   d553e:	4770      	bx	lr

000d5540 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    textsize = (s > 0) ? s : 1;
   d5540:	2900      	cmp	r1, #0
   d5542:	bf08      	it	eq
   d5544:	2101      	moveq	r1, #1
   d5546:	7601      	strb	r1, [r0, #24]
   d5548:	4770      	bx	lr

000d554a <_ZN12Adafruit_GFX12setTextColorEt>:
*/
/**************************************************************************/
void Adafruit_GFX::setTextColor(uint16_t c) {
    // For 'transparent' background, we'll set the bg
    // to the same as fg instead of using a flag
    textcolor = textbgcolor = c;
   d554a:	82c1      	strh	r1, [r0, #22]
   d554c:	8281      	strh	r1, [r0, #20]
   d554e:	4770      	bx	lr

000d5550 <_ZNK12Adafruit_GFX11getRotationEv>:
    @returns    0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
uint8_t Adafruit_GFX::getRotation(void) const {
    return rotation;
}
   d5550:	7e40      	ldrb	r0, [r0, #25]
   d5552:	4770      	bx	lr

000d5554 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d5554:	f000 bd74 	b.w	d6040 <HAL_Pin_Map>

000d5558 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
#endif
    }
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5558:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) {
   d555a:	7e44      	ldrb	r4, [r0, #25]
#endif
    }
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d555c:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  boolean bSwap = false;
  switch(rotation) {
   d5560:	2c02      	cmp	r4, #2
   d5562:	d009      	beq.n	d5578 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x20>
   d5564:	2c03      	cmp	r4, #3
   d5566:	d010      	beq.n	d558a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x32>
   d5568:	2c01      	cmp	r4, #1
   d556a:	f040 809d 	bne.w	d56a8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x150>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d556e:	8904      	ldrh	r4, [r0, #8]
   d5570:	3c01      	subs	r4, #1
   d5572:	1aa2      	subs	r2, r4, r2
   d5574:	b212      	sxth	r2, r2
      break;
   d5576:	e00c      	b.n	d5592 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for _height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d5578:	8944      	ldrh	r4, [r0, #10]
   d557a:	3c01      	subs	r4, #1
   d557c:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d557e:	8904      	ldrh	r4, [r0, #8]
   d5580:	1ae4      	subs	r4, r4, r3
   d5582:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for _height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d5584:	b212      	sxth	r2, r2
      x -= (w-1);
   d5586:	b209      	sxth	r1, r1
      break;
   d5588:	e08e      	b.n	d56a8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x150>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d558a:	8944      	ldrh	r4, [r0, #10]
   d558c:	1ae4      	subs	r4, r4, r3
   d558e:	1a61      	subs	r1, r4, r1
   d5590:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d5592:	2a00      	cmp	r2, #0
   d5594:	f2c0 8087 	blt.w	d56a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d5598:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d559c:	4294      	cmp	r4, r2
   d559e:	f340 80cd 	ble.w	d573c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>

  // make sure we don't try to draw below 0
  if(__y < 0) {
   d55a2:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d55a4:	bfbe      	ittt	lt
   d55a6:	185b      	addlt	r3, r3, r1
   d55a8:	b21b      	sxthlt	r3, r3
    __y = 0;
   d55aa:	2100      	movlt	r1, #0

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
   d55ac:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d55b0:	18cd      	adds	r5, r1, r3
   d55b2:	42a5      	cmp	r5, r4
    __h = (HEIGHT - __y);
   d55b4:	bfc4      	itt	gt
   d55b6:	1a63      	subgt	r3, r4, r1
   d55b8:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt
  if(__h <= 0) {
   d55ba:	2b00      	cmp	r3, #0
   d55bc:	f340 80be 	ble.w	d573c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d55c0:	b2c9      	uxtb	r1, r1
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d55c2:	6a05      	ldr	r5, [r0, #32]
  register uint8_t y = __y;
  register uint8_t h = __h;


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
   d55c4:	6b07      	ldr	r7, [r0, #48]	; 0x30
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d55c6:	08cc      	lsrs	r4, r1, #3
   d55c8:	fb05 2204 	mla	r2, r5, r4, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d55cc:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d55d0:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d55d2:	eb07 0502 	add.w	r5, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d55d6:	d02f      	beq.n	d5638 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
    // mask off the high n bits we want to set
    mod = 8-mod;
   d55d8:	f1c1 0408 	rsb	r4, r1, #8
   d55dc:	b2e4      	uxtb	r4, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d55de:	4958      	ldr	r1, [pc, #352]	; (d5740 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e8>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
   d55e0:	42a3      	cmp	r3, r4
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d55e2:	5d09      	ldrb	r1, [r1, r4]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
   d55e4:	d20d      	bcs.n	d5602 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      mask &= (0XFF >> (mod-h));
   d55e6:	ebc3 0c04 	rsb	ip, r3, r4
   d55ea:	f04f 0eff 	mov.w	lr, #255	; 0xff
   d55ee:	fa4e fe0c 	asr.w	lr, lr, ip
    }

  switch (color)
   d55f2:	2e01      	cmp	r6, #1
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
   d55f4:	ea0e 0101 	and.w	r1, lr, r1
    }

  switch (color)
   d55f8:	d005      	beq.n	d5606 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xae>
   d55fa:	d30a      	bcc.n	d5612 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xba>
   d55fc:	2e02      	cmp	r6, #2
   d55fe:	d00f      	beq.n	d5620 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc8>
   d5600:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5602:	2e01      	cmp	r6, #1
   d5604:	d104      	bne.n	d5610 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xb8>
    {
    case WHITE:   *pBuf |=  mask;  break;
   d5606:	f817 e002 	ldrb.w	lr, [r7, r2]
   d560a:	ea41 010e 	orr.w	r1, r1, lr
   d560e:	e00b      	b.n	d5628 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd0>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

  switch (color)
   d5610:	d204      	bcs.n	d561c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc4>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
   d5612:	f817 e002 	ldrb.w	lr, [r7, r2]
   d5616:	ea2e 0101 	bic.w	r1, lr, r1
   d561a:	e005      	b.n	d5628 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd0>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

  switch (color)
   d561c:	2e02      	cmp	r6, #2
   d561e:	d107      	bne.n	d5630 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd8>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
   d5620:	f817 e002 	ldrb.w	lr, [r7, r2]
   d5624:	ea81 010e 	eor.w	r1, r1, lr
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d5628:	42a3      	cmp	r3, r4

  switch (color)
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
   d562a:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d562c:	f0c0 8086 	bcc.w	d573c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>

    h -= mod;

    pBuf += _width;
   d5630:	6a02      	ldr	r2, [r0, #32]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }

    h -= mod;
   d5632:	1b1b      	subs	r3, r3, r4
   d5634:	b2db      	uxtb	r3, r3

    pBuf += _width;
   d5636:	4415      	add	r5, r2
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
   d5638:	2b07      	cmp	r3, #7
   d563a:	d91a      	bls.n	d5672 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x11a>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
   d563c:	2e02      	cmp	r6, #2
   d563e:	d10a      	bne.n	d5656 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xfe>
   d5640:	461a      	mov	r2, r3
      do  {
      *pBuf=~(*pBuf);
   d5642:	7829      	ldrb	r1, [r5, #0]
   d5644:	43c9      	mvns	r1, r1
   d5646:	7029      	strb	r1, [r5, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d5648:	3a08      	subs	r2, #8
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do  {
      *pBuf=~(*pBuf);

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d564a:	6a01      	ldr	r1, [r0, #32]

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d564c:	b2d2      	uxtb	r2, r2
      } while(h >= 8);
   d564e:	2a07      	cmp	r2, #7
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do  {
      *pBuf=~(*pBuf);

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d5650:	440d      	add	r5, r1

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
      } while(h >= 8);
   d5652:	d8f6      	bhi.n	d5642 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xea>
   d5654:	e01f      	b.n	d5696 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13e>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
   d5656:	2e01      	cmp	r6, #1
   d5658:	bf0c      	ite	eq
   d565a:	24ff      	moveq	r4, #255	; 0xff
   d565c:	2400      	movne	r4, #0
   d565e:	461a      	mov	r2, r3

      do  {
        // write our value in
      *pBuf = val;
   d5660:	702c      	strb	r4, [r5, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d5662:	3a08      	subs	r2, #8
      do  {
        // write our value in
      *pBuf = val;

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d5664:	6a01      	ldr	r1, [r0, #32]

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d5666:	b2d2      	uxtb	r2, r2
      } while(h >= 8);
   d5668:	2a07      	cmp	r2, #7
      do  {
        // write our value in
      *pBuf = val;

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d566a:	440d      	add	r5, r1

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
      } while(h >= 8);
   d566c:	d8f8      	bhi.n	d5660 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x108>
   d566e:	f003 0307 	and.w	r3, r3, #7
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
   d5672:	2b00      	cmp	r3, #0
   d5674:	d062      	beq.n	d573c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d5676:	4a33      	ldr	r2, [pc, #204]	; (d5744 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ec>)
    switch (color)
   d5678:	2e01      	cmp	r6, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d567a:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
   d567c:	d003      	beq.n	d5686 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x12e>
   d567e:	d305      	bcc.n	d568c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
   d5680:	2e02      	cmp	r6, #2
   d5682:	d15b      	bne.n	d573c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
   d5684:	e00c      	b.n	d56a0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x148>
    {
      case WHITE:   *pBuf |=  mask;  break;
   d5686:	782a      	ldrb	r2, [r5, #0]
   d5688:	4313      	orrs	r3, r2
   d568a:	e002      	b.n	d5692 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
      case BLACK:   *pBuf &= ~mask;  break;
   d568c:	782a      	ldrb	r2, [r5, #0]
   d568e:	ea22 0303 	bic.w	r3, r2, r3
   d5692:	702b      	strb	r3, [r5, #0]
   d5694:	bdf0      	pop	{r4, r5, r6, r7, pc}
      } while(h >= 8);
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
   d5696:	f013 0307 	ands.w	r3, r3, #7
   d569a:	d04f      	beq.n	d573c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d569c:	4a29      	ldr	r2, [pc, #164]	; (d5744 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ec>)
   d569e:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
   d56a0:	782a      	ldrb	r2, [r5, #0]
   d56a2:	4053      	eors	r3, r2
   d56a4:	e7f5      	b.n	d5692 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
   d56a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d56a8:	2a00      	cmp	r2, #0
   d56aa:	db46      	blt.n	d573a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
   d56ac:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d56b0:	4294      	cmp	r4, r2
   d56b2:	dd43      	ble.n	d573c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>

  // make sure we don't try to draw below 0
  if(x < 0) {
   d56b4:	2900      	cmp	r1, #0
    w += x;
   d56b6:	bfbc      	itt	lt
   d56b8:	18c9      	addlt	r1, r1, r3
   d56ba:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
   d56bc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) {
    w += x;
    x = 0;
   d56c0:	bfb8      	it	lt
   d56c2:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
   d56c4:	18cd      	adds	r5, r1, r3
   d56c6:	42a5      	cmp	r5, r4
    w = (WIDTH - x);
   d56c8:	bfc4      	itt	gt
   d56ca:	1a63      	subgt	r3, r4, r1
   d56cc:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d56ce:	2b00      	cmp	r3, #0
   d56d0:	dd34      	ble.n	d573c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
   d56d2:	6b05      	ldr	r5, [r0, #48]	; 0x30
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d56d4:	6a00      	ldr	r0, [r0, #32]
   d56d6:	2408      	movs	r4, #8
   d56d8:	fb92 f4f4 	sdiv	r4, r2, r4
   d56dc:	fb00 1104 	mla	r1, r0, r4, r1
   d56e0:	1868      	adds	r0, r5, r1

  register uint8_t mask = 1 << (y&7);
   d56e2:	f002 0207 	and.w	r2, r2, #7
   d56e6:	2101      	movs	r1, #1
   d56e8:	fa01 f202 	lsl.w	r2, r1, r2

  switch (color)
   d56ec:	428e      	cmp	r6, r1
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d56ee:	b2d2      	uxtb	r2, r2

  switch (color)
   d56f0:	d003      	beq.n	d56fa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1a2>
   d56f2:	d30c      	bcc.n	d570e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1b6>
   d56f4:	2e02      	cmp	r6, #2
   d56f6:	d016      	beq.n	d5726 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ce>
   d56f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d56fa:	3b01      	subs	r3, #1
   d56fc:	b21b      	sxth	r3, r3
  {
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
   d56fe:	1c5d      	adds	r5, r3, #1
   d5700:	d01c      	beq.n	d573c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
   d5702:	f810 1b01 	ldrb.w	r1, [r0], #1
   d5706:	4311      	orrs	r1, r2
   d5708:	f800 1c01 	strb.w	r1, [r0, #-1]
   d570c:	e7f5      	b.n	d56fa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1a2>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
   d570e:	43d2      	mvns	r2, r2
   d5710:	b2d2      	uxtb	r2, r2
   d5712:	3b01      	subs	r3, #1
   d5714:	b21b      	sxth	r3, r3
   d5716:	1c5c      	adds	r4, r3, #1
   d5718:	d010      	beq.n	d573c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
   d571a:	f810 1b01 	ldrb.w	r1, [r0], #1
   d571e:	4011      	ands	r1, r2
   d5720:	f800 1c01 	strb.w	r1, [r0, #-1]
   d5724:	e7f5      	b.n	d5712 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ba>
   d5726:	3b01      	subs	r3, #1
   d5728:	b21b      	sxth	r3, r3
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
   d572a:	1c59      	adds	r1, r3, #1
   d572c:	d006      	beq.n	d573c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
   d572e:	f810 1b01 	ldrb.w	r1, [r0], #1
   d5732:	4051      	eors	r1, r2
   d5734:	f800 1c01 	strb.w	r1, [r0, #-1]
   d5738:	e7f5      	b.n	d5726 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ce>
   d573a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d573e:	bf00      	nop
   d5740:	2003e02c 	.word	0x2003e02c
   d5744:	2003e024 	.word	0x2003e024

000d5748 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d5748:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) {
   d574a:	7e44      	ldrb	r4, [r0, #25]
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d574c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) {
   d5750:	2c02      	cmp	r4, #2
   d5752:	d008      	beq.n	d5766 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d5754:	2c03      	cmp	r4, #3
   d5756:	d00f      	beq.n	d5778 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d5758:	2c01      	cmp	r4, #1
   d575a:	d160      	bne.n	d581e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d575c:	8904      	ldrh	r4, [r0, #8]
   d575e:	1ae4      	subs	r4, r4, r3
   d5760:	1aa2      	subs	r2, r4, r2
   d5762:	b212      	sxth	r2, r2
      break;
   d5764:	e00c      	b.n	d5780 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d5766:	8904      	ldrh	r4, [r0, #8]
   d5768:	3c01      	subs	r4, #1
   d576a:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d576c:	8944      	ldrh	r4, [r0, #10]
   d576e:	1ae4      	subs	r4, r4, r3
   d5770:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d5772:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d5774:	b212      	sxth	r2, r2
      break;
   d5776:	e052      	b.n	d581e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y
      bSwap = true;
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
   d5778:	8944      	ldrh	r4, [r0, #10]
   d577a:	3c01      	subs	r4, #1
   d577c:	1a61      	subs	r1, r4, r1
   d577e:	b209      	sxth	r1, r1
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d5780:	2900      	cmp	r1, #0
   d5782:	db4b      	blt.n	d581c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd4>
   d5784:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d5788:	428c      	cmp	r4, r1
   d578a:	f340 80cf 	ble.w	d592c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>

  // make sure we don't try to draw below 0
  if(x < 0) {
   d578e:	2a00      	cmp	r2, #0
    w += x;
   d5790:	bfbc      	itt	lt
   d5792:	18d2      	addlt	r2, r2, r3
   d5794:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
   d5796:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) {
    w += x;
    x = 0;
   d579a:	bfb8      	it	lt
   d579c:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
   d579e:	18d6      	adds	r6, r2, r3
   d57a0:	42a6      	cmp	r6, r4
    w = (WIDTH - x);
   d57a2:	bfc4      	itt	gt
   d57a4:	1aa3      	subgt	r3, r4, r2
   d57a6:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d57a8:	2b00      	cmp	r3, #0
   d57aa:	f340 80bf 	ble.w	d592c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
   d57ae:	6b06      	ldr	r6, [r0, #48]	; 0x30
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d57b0:	6a00      	ldr	r0, [r0, #32]
   d57b2:	2408      	movs	r4, #8
   d57b4:	fb91 f4f4 	sdiv	r4, r1, r4
   d57b8:	fb00 2204 	mla	r2, r0, r4, r2
   d57bc:	18b0      	adds	r0, r6, r2

  register uint8_t mask = 1 << (y&7);
   d57be:	f001 0107 	and.w	r1, r1, #7
   d57c2:	2201      	movs	r2, #1
   d57c4:	fa02 f101 	lsl.w	r1, r2, r1

  switch (color)
   d57c8:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d57ca:	b2c9      	uxtb	r1, r1

  switch (color)
   d57cc:	d003      	beq.n	d57d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x8e>
   d57ce:	d30d      	bcc.n	d57ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xa4>
   d57d0:	2d02      	cmp	r5, #2
   d57d2:	d018      	beq.n	d5806 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xbe>
   d57d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d57d6:	3b01      	subs	r3, #1
   d57d8:	b21b      	sxth	r3, r3
  {
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
   d57da:	1c5d      	adds	r5, r3, #1
   d57dc:	f000 80a6 	beq.w	d592c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
   d57e0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d57e4:	430a      	orrs	r2, r1
   d57e6:	f800 2c01 	strb.w	r2, [r0, #-1]
   d57ea:	e7f4      	b.n	d57d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x8e>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
   d57ec:	43c9      	mvns	r1, r1
   d57ee:	b2c9      	uxtb	r1, r1
   d57f0:	3b01      	subs	r3, #1
   d57f2:	b21b      	sxth	r3, r3
   d57f4:	1c5c      	adds	r4, r3, #1
   d57f6:	f000 8099 	beq.w	d592c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
   d57fa:	f810 2b01 	ldrb.w	r2, [r0], #1
   d57fe:	400a      	ands	r2, r1
   d5800:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5804:	e7f4      	b.n	d57f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xa8>
   d5806:	3b01      	subs	r3, #1
   d5808:	b21b      	sxth	r3, r3
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
   d580a:	1c5a      	adds	r2, r3, #1
   d580c:	f000 808e 	beq.w	d592c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
   d5810:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5814:	404a      	eors	r2, r1
   d5816:	f800 2c01 	strb.w	r2, [r0, #-1]
   d581a:	e7f4      	b.n	d5806 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xbe>
   d581c:	bdf0      	pop	{r4, r5, r6, r7, pc}


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d581e:	2900      	cmp	r1, #0
   d5820:	f2c0 8083 	blt.w	d592a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e2>
   d5824:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d5828:	428c      	cmp	r4, r1
   d582a:	dd7f      	ble.n	d592c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>

  // make sure we don't try to draw below 0
  if(__y < 0) {
   d582c:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d582e:	bfbe      	ittt	lt
   d5830:	189b      	addlt	r3, r3, r2
   d5832:	b21b      	sxthlt	r3, r3
    __y = 0;
   d5834:	2200      	movlt	r2, #0

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
   d5836:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d583a:	18d6      	adds	r6, r2, r3
   d583c:	42a6      	cmp	r6, r4
    __h = (HEIGHT - __y);
   d583e:	bfc4      	itt	gt
   d5840:	1aa3      	subgt	r3, r4, r2
   d5842:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt
  if(__h <= 0) {
   d5844:	2b00      	cmp	r3, #0
   d5846:	dd71      	ble.n	d592c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d5848:	b2d2      	uxtb	r2, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d584a:	6a06      	ldr	r6, [r0, #32]
  register uint8_t y = __y;
  register uint8_t h = __h;


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
   d584c:	6b07      	ldr	r7, [r0, #48]	; 0x30
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d584e:	08d4      	lsrs	r4, r2, #3
   d5850:	fb06 1104 	mla	r1, r6, r4, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d5854:	f012 0207 	ands.w	r2, r2, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d5858:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d585a:	eb07 0601 	add.w	r6, r7, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d585e:	d02e      	beq.n	d58be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x176>
    // mask off the high n bits we want to set
    mod = 8-mod;
   d5860:	f1c2 0408 	rsb	r4, r2, #8
   d5864:	b2e4      	uxtb	r4, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d5866:	4a32      	ldr	r2, [pc, #200]	; (d5930 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e8>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
   d5868:	42a3      	cmp	r3, r4
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d586a:	5d12      	ldrb	r2, [r2, r4]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
   d586c:	d20d      	bcs.n	d588a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
      mask &= (0XFF >> (mod-h));
   d586e:	ebc3 0c04 	rsb	ip, r3, r4
   d5872:	f04f 0eff 	mov.w	lr, #255	; 0xff
   d5876:	fa4e fe0c 	asr.w	lr, lr, ip
    }

  switch (color)
   d587a:	2d01      	cmp	r5, #1
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
   d587c:	ea0e 0202 	and.w	r2, lr, r2
    }

  switch (color)
   d5880:	d005      	beq.n	d588e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   d5882:	d30a      	bcc.n	d589a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d5884:	2d02      	cmp	r5, #2
   d5886:	d00f      	beq.n	d58a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x160>
   d5888:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d588a:	2d01      	cmp	r5, #1
   d588c:	d104      	bne.n	d5898 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x150>
    {
    case WHITE:   *pBuf |=  mask;  break;
   d588e:	f817 e001 	ldrb.w	lr, [r7, r1]
   d5892:	ea42 020e 	orr.w	r2, r2, lr
   d5896:	e00b      	b.n	d58b0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

  switch (color)
   d5898:	d204      	bcs.n	d58a4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x15c>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
   d589a:	f817 e001 	ldrb.w	lr, [r7, r1]
   d589e:	ea2e 0202 	bic.w	r2, lr, r2
   d58a2:	e005      	b.n	d58b0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

  switch (color)
   d58a4:	2d02      	cmp	r5, #2
   d58a6:	d106      	bne.n	d58b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16e>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
   d58a8:	f817 e001 	ldrb.w	lr, [r7, r1]
   d58ac:	ea82 020e 	eor.w	r2, r2, lr
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d58b0:	42a3      	cmp	r3, r4

  switch (color)
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
   d58b2:	547a      	strb	r2, [r7, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d58b4:	d33a      	bcc.n	d592c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>

    h -= mod;

    pBuf += _width;
   d58b6:	6a02      	ldr	r2, [r0, #32]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }

    h -= mod;
   d58b8:	1b1b      	subs	r3, r3, r4
   d58ba:	b2db      	uxtb	r3, r3

    pBuf += _width;
   d58bc:	4416      	add	r6, r2
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
   d58be:	2b07      	cmp	r3, #7
   d58c0:	d91a      	bls.n	d58f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1b0>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
   d58c2:	2d02      	cmp	r5, #2
   d58c4:	d10a      	bne.n	d58dc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x194>
   d58c6:	461a      	mov	r2, r3
      do  {
      *pBuf=~(*pBuf);
   d58c8:	7831      	ldrb	r1, [r6, #0]
   d58ca:	43c9      	mvns	r1, r1
   d58cc:	7031      	strb	r1, [r6, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d58ce:	3a08      	subs	r2, #8
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do  {
      *pBuf=~(*pBuf);

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d58d0:	6a01      	ldr	r1, [r0, #32]

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d58d2:	b2d2      	uxtb	r2, r2
      } while(h >= 8);
   d58d4:	2a07      	cmp	r2, #7
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do  {
      *pBuf=~(*pBuf);

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d58d6:	440e      	add	r6, r1

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
      } while(h >= 8);
   d58d8:	d8f6      	bhi.n	d58c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x180>
   d58da:	e01d      	b.n	d5918 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1d0>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
   d58dc:	2d01      	cmp	r5, #1
   d58de:	bf0c      	ite	eq
   d58e0:	24ff      	moveq	r4, #255	; 0xff
   d58e2:	2400      	movne	r4, #0
   d58e4:	461a      	mov	r2, r3

      do  {
        // write our value in
      *pBuf = val;
   d58e6:	7034      	strb	r4, [r6, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d58e8:	3a08      	subs	r2, #8
      do  {
        // write our value in
      *pBuf = val;

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d58ea:	6a01      	ldr	r1, [r0, #32]

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d58ec:	b2d2      	uxtb	r2, r2
      } while(h >= 8);
   d58ee:	2a07      	cmp	r2, #7
      do  {
        // write our value in
      *pBuf = val;

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d58f0:	440e      	add	r6, r1

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
      } while(h >= 8);
   d58f2:	d8f8      	bhi.n	d58e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x19e>
   d58f4:	f003 0307 	and.w	r3, r3, #7
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
   d58f8:	b1c3      	cbz	r3, d592c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d58fa:	4a0e      	ldr	r2, [pc, #56]	; (d5934 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ec>)
    switch (color)
   d58fc:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d58fe:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
   d5900:	d003      	beq.n	d590a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1c2>
   d5902:	d305      	bcc.n	d5910 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1c8>
   d5904:	2d02      	cmp	r5, #2
   d5906:	d111      	bne.n	d592c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
   d5908:	e00b      	b.n	d5922 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1da>
    {
      case WHITE:   *pBuf |=  mask;  break;
   d590a:	7832      	ldrb	r2, [r6, #0]
   d590c:	4313      	orrs	r3, r2
   d590e:	e00a      	b.n	d5926 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1de>
      case BLACK:   *pBuf &= ~mask;  break;
   d5910:	7832      	ldrb	r2, [r6, #0]
   d5912:	ea22 0303 	bic.w	r3, r2, r3
   d5916:	e006      	b.n	d5926 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1de>
      } while(h >= 8);
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
   d5918:	f013 0307 	ands.w	r3, r3, #7
   d591c:	d006      	beq.n	d592c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d591e:	4a05      	ldr	r2, [pc, #20]	; (d5934 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ec>)
   d5920:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
   d5922:	7832      	ldrb	r2, [r6, #0]
   d5924:	4053      	eors	r3, r2
   d5926:	7033      	strb	r3, [r6, #0]
  if(bSwap) {
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d5928:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d592a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d592c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d592e:	bf00      	nop
   d5930:	2003e02c 	.word	0x2003e02c
   d5934:	2003e024 	.word	0x2003e024

000d5938 <_ZN16Adafruit_SSD13069drawPixelEsst>:


#define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }

// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
   d593a:	1e0e      	subs	r6, r1, #0


#define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }

// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d593c:	4605      	mov	r5, r0
   d593e:	4614      	mov	r4, r2
   d5940:	461f      	mov	r7, r3
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
   d5942:	db57      	blt.n	d59f4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xbc>
   d5944:	6a03      	ldr	r3, [r0, #32]
   d5946:	429e      	cmp	r6, r3
   d5948:	d254      	bcs.n	d59f4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xbc>
   d594a:	2a00      	cmp	r2, #0
   d594c:	db52      	blt.n	d59f4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xbc>
   d594e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d5950:	429a      	cmp	r2, r3
   d5952:	d24f      	bcs.n	d59f4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xbc>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d5954:	f7ff fdfc 	bl	d5550 <_ZNK12Adafruit_GFX11getRotationEv>
   d5958:	2802      	cmp	r0, #2
   d595a:	d009      	beq.n	d5970 <_ZN16Adafruit_SSD13069drawPixelEsst+0x38>
   d595c:	2803      	cmp	r0, #3
   d595e:	d010      	beq.n	d5982 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4a>
   d5960:	2801      	cmp	r0, #1
   d5962:	d113      	bne.n	d598c <_ZN16Adafruit_SSD13069drawPixelEsst+0x54>
  case 1:
    ssd1306_swap(x, y);
    x = _width - x - 1;
   d5964:	6a2b      	ldr	r3, [r5, #32]
   d5966:	3b01      	subs	r3, #1
   d5968:	1b1b      	subs	r3, r3, r4
   d596a:	4634      	mov	r4, r6
   d596c:	b21e      	sxth	r6, r3
   d596e:	e00d      	b.n	d598c <_ZN16Adafruit_SSD13069drawPixelEsst+0x54>
    break;
  case 2:
    x = _width - x - 1;
   d5970:	6a29      	ldr	r1, [r5, #32]
    y = _height - y - 1;
   d5972:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  case 1:
    ssd1306_swap(x, y);
    x = _width - x - 1;
    break;
  case 2:
    x = _width - x - 1;
   d5974:	3901      	subs	r1, #1
    y = _height - y - 1;
   d5976:	3a01      	subs	r2, #1
  case 1:
    ssd1306_swap(x, y);
    x = _width - x - 1;
    break;
  case 2:
    x = _width - x - 1;
   d5978:	1b8e      	subs	r6, r1, r6
    y = _height - y - 1;
   d597a:	1b14      	subs	r4, r2, r4
  case 1:
    ssd1306_swap(x, y);
    x = _width - x - 1;
    break;
  case 2:
    x = _width - x - 1;
   d597c:	b236      	sxth	r6, r6
    y = _height - y - 1;
   d597e:	b224      	sxth	r4, r4
   d5980:	e004      	b.n	d598c <_ZN16Adafruit_SSD13069drawPixelEsst+0x54>
    break;
  case 3:
    ssd1306_swap(x, y);
    y = _height - y - 1;
   d5982:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5984:	3b01      	subs	r3, #1
   d5986:	1b9b      	subs	r3, r3, r6
   d5988:	4626      	mov	r6, r4
   d598a:	b21c      	sxth	r4, r3
    break;
  }

  // x is which column
    switch (color)
   d598c:	2f01      	cmp	r7, #1
   d598e:	d003      	beq.n	d5998 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d5990:	d310      	bcc.n	d59b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   d5992:	2f02      	cmp	r7, #2
   d5994:	d01f      	beq.n	d59d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
      case WHITE:   buffer[x+ (y/8)*_width] |=  (1 << (y&7)); break;
   d5998:	6a2b      	ldr	r3, [r5, #32]
   d599a:	2108      	movs	r1, #8
   d599c:	fb94 f1f1 	sdiv	r1, r4, r1
   d59a0:	fb03 6601 	mla	r6, r3, r1, r6
   d59a4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d59a6:	f004 0407 	and.w	r4, r4, #7
   d59aa:	5d8b      	ldrb	r3, [r1, r6]
   d59ac:	40a7      	lsls	r7, r4
   d59ae:	431f      	orrs	r7, r3
   d59b0:	558f      	strb	r7, [r1, r6]
   d59b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      case BLACK:   buffer[x+ (y/8)*_width] &= ~(1 << (y&7)); break;
   d59b4:	6a29      	ldr	r1, [r5, #32]
   d59b6:	6b28      	ldr	r0, [r5, #48]	; 0x30
   d59b8:	2308      	movs	r3, #8
   d59ba:	fb94 f3f3 	sdiv	r3, r4, r3
   d59be:	fb01 6603 	mla	r6, r1, r3, r6
   d59c2:	f004 0407 	and.w	r4, r4, #7
   d59c6:	5d83      	ldrb	r3, [r0, r6]
   d59c8:	2101      	movs	r1, #1
   d59ca:	fa01 f404 	lsl.w	r4, r1, r4
   d59ce:	ea23 0404 	bic.w	r4, r3, r4
   d59d2:	5584      	strb	r4, [r0, r6]
   d59d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      case INVERSE: buffer[x+ (y/8)*_width] ^=  (1 << (y&7)); break;
   d59d6:	6a29      	ldr	r1, [r5, #32]
   d59d8:	2308      	movs	r3, #8
   d59da:	fb94 f3f3 	sdiv	r3, r4, r3
   d59de:	fb01 6603 	mla	r6, r1, r3, r6
   d59e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d59e4:	f004 0407 	and.w	r4, r4, #7
   d59e8:	5d8b      	ldrb	r3, [r1, r6]
   d59ea:	2201      	movs	r2, #1
   d59ec:	fa02 f404 	lsl.w	r4, r2, r4
   d59f0:	405c      	eors	r4, r3
   d59f2:	558c      	strb	r4, [r1, r6]
   d59f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d59f8 <_ZN16Adafruit_SSD1306C1Ejja>:
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(size_t width, size_t height, int8_t reset) : Adafruit_GFX(width, height), _width(width), _height(height) {
   d59f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d59fc:	4604      	mov	r4, r0
   d59fe:	460f      	mov	r7, r1
   d5a00:	4615      	mov	r5, r2
   d5a02:	b209      	sxth	r1, r1
   d5a04:	b212      	sxth	r2, r2
   d5a06:	2600      	movs	r6, #0
   d5a08:	4698      	mov	r8, r3
   d5a0a:	f7ff fba3 	bl	d5154 <_ZN12Adafruit_GFXC1Ess>
   d5a0e:	22ff      	movs	r2, #255	; 0xff
   d5a10:	4b11      	ldr	r3, [pc, #68]	; (d5a58 <_ZN16Adafruit_SSD1306C1Ejja+0x60>)
   d5a12:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
  rst = reset;

  buffer = new uint8_t[_width * _height / 8];
   d5a14:	fb05 f007 	mul.w	r0, r5, r7
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(size_t width, size_t height, int8_t reset) : Adafruit_GFX(width, height), _width(width), _height(height) {
   d5a18:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  sclk = dc = cs = sid = -1;
   d5a1c:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
   d5a20:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
   d5a24:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(size_t width, size_t height, int8_t reset) : Adafruit_GFX(width, height), _width(width), _height(height) {
   d5a28:	6227      	str	r7, [r4, #32]
   d5a2a:	6265      	str	r5, [r4, #36]	; 0x24
   d5a2c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
   d5a30:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
   d5a34:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
  sclk = dc = cs = sid = -1;
  rst = reset;
   d5a38:	f884 802d 	strb.w	r8, [r4, #45]	; 0x2d

  buffer = new uint8_t[_width * _height / 8];
   d5a3c:	08c0      	lsrs	r0, r0, #3
   d5a3e:	f7fe fb2c 	bl	d409a <_Znaj>
  memset(buffer, 0, _width * _height / 8);
   d5a42:	6a22      	ldr	r2, [r4, #32]
   d5a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(size_t width, size_t height, int8_t reset) : Adafruit_GFX(width, height), _width(width), _height(height) {
  sclk = dc = cs = sid = -1;
  rst = reset;

  buffer = new uint8_t[_width * _height / 8];
   d5a46:	6320      	str	r0, [r4, #48]	; 0x30
  memset(buffer, 0, _width * _height / 8);
   d5a48:	435a      	muls	r2, r3
   d5a4a:	08d2      	lsrs	r2, r2, #3
   d5a4c:	4631      	mov	r1, r6
   d5a4e:	f002 fe0e 	bl	d866e <memset>
}
   d5a52:	4620      	mov	r0, r4
   d5a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a58:	000da91c 	.word	0x000da91c

000d5a5c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (_width*_height/8));
   d5a5c:	6a02      	ldr	r2, [r0, #32]
   d5a5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d5a60:	6b00      	ldr	r0, [r0, #48]	; 0x30
   d5a62:	435a      	muls	r2, r3
   d5a64:	08d2      	lsrs	r2, r2, #3
   d5a66:	2100      	movs	r1, #0
   d5a68:	f002 be01 	b.w	d866e <memset>

000d5a6c <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d5a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if(hwSPI) {
   d5a6e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (_width*_height/8));
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d5a72:	4605      	mov	r5, r0
   d5a74:	460f      	mov	r7, r1

  if(hwSPI) {
   d5a76:	b123      	cbz	r3, d5a82 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x16>
    (void)SPI.transfer(d);
   d5a78:	4810      	ldr	r0, [pc, #64]	; (d5abc <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x50>)
      else        digitalWrite(sid, LOW);
      digitalWrite(sclk, HIGH);
#endif
    }
  }
}
   d5a7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {

  if(hwSPI) {
    (void)SPI.transfer(d);
   d5a7e:	f000 be25 	b.w	d66cc <_ZN8SPIClass8transferEh>
   d5a82:	2608      	movs	r6, #8
   d5a84:	2480      	movs	r4, #128	; 0x80
      *clkport &= ~clkpinmask;
      if(d & bit) *mosiport |=  mosipinmask;
      else        *mosiport &= ~mosipinmask;
      *clkport |=  clkpinmask;
#else
      digitalWrite(sclk, LOW);
   d5a86:	f995 002b 	ldrsb.w	r0, [r5, #43]	; 0x2b
   d5a8a:	2100      	movs	r1, #0
   d5a8c:	b280      	uxth	r0, r0
   d5a8e:	f001 feca 	bl	d7826 <digitalWrite>
   d5a92:	f995 002a 	ldrsb.w	r0, [r5, #42]	; 0x2a
      if(d & bit) digitalWrite(sid, HIGH);
   d5a96:	ea17 0104 	ands.w	r1, r7, r4
   d5a9a:	bf18      	it	ne
   d5a9c:	2101      	movne	r1, #1
      else        digitalWrite(sid, LOW);
   d5a9e:	b280      	uxth	r0, r0
   d5aa0:	f001 fec1 	bl	d7826 <digitalWrite>
      digitalWrite(sclk, HIGH);
   d5aa4:	f995 002b 	ldrsb.w	r0, [r5, #43]	; 0x2b
   d5aa8:	2101      	movs	r1, #1
   d5aaa:	b280      	uxth	r0, r0
   d5aac:	f001 febb 	bl	d7826 <digitalWrite>
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {

  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5ab0:	3e01      	subs	r6, #1
   d5ab2:	ea4f 0454 	mov.w	r4, r4, lsr #1
   d5ab6:	d1e6      	bne.n	d5a86 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
      else        digitalWrite(sid, LOW);
      digitalWrite(sclk, HIGH);
#endif
    }
  }
}
   d5ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5aba:	bf00      	nop
   d5abc:	2003e714 	.word	0x2003e714

000d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
   d5ac0:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d5ac2:	f990 302a 	ldrsb.w	r3, [r0, #42]	; 0x2a
   d5ac6:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
   d5ac8:	4604      	mov	r4, r0
   d5aca:	460d      	mov	r5, r1
  if (sid != -1)
   d5acc:	d01d      	beq.n	d5b0a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
    *dcport &= ~dcpinmask;
    *csport &= ~cspinmask;
#else
    digitalWrite(cs, HIGH);
   d5ace:	f990 002e 	ldrsb.w	r0, [r0, #46]	; 0x2e
   d5ad2:	2101      	movs	r1, #1
   d5ad4:	b280      	uxth	r0, r0
   d5ad6:	f001 fea6 	bl	d7826 <digitalWrite>
    digitalWrite(dc, LOW);
   d5ada:	f994 002c 	ldrsb.w	r0, [r4, #44]	; 0x2c
   d5ade:	2100      	movs	r1, #0
   d5ae0:	b280      	uxth	r0, r0
   d5ae2:	f001 fea0 	bl	d7826 <digitalWrite>
    digitalWrite(cs, LOW);
   d5ae6:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5aea:	2100      	movs	r1, #0
   d5aec:	b280      	uxth	r0, r0
   d5aee:	f001 fe9a 	bl	d7826 <digitalWrite>
#endif
    fastSPIwrite(c);
   d5af2:	4629      	mov	r1, r5
   d5af4:	4620      	mov	r0, r4
   d5af6:	f7ff ffb9 	bl	d5a6c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
#else
    digitalWrite(cs, HIGH);
   d5afa:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5afe:	2101      	movs	r1, #1
   d5b00:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d5b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    fastSPIwrite(c);
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
#else
    digitalWrite(cs, HIGH);
   d5b06:	f001 be8e 	b.w	d7826 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d5b0a:	f001 ff17 	bl	d793c <_Z19__fetch_global_Wirev>
   d5b0e:	f994 1028 	ldrsb.w	r1, [r4, #40]	; 0x28
   d5b12:	f001 f9eb 	bl	d6eec <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d5b16:	f001 ff11 	bl	d793c <_Z19__fetch_global_Wirev>
   d5b1a:	6803      	ldr	r3, [r0, #0]
   d5b1c:	2100      	movs	r1, #0
   d5b1e:	689b      	ldr	r3, [r3, #8]
   d5b20:	4798      	blx	r3
    Wire.write(c);
   d5b22:	f001 ff0b 	bl	d793c <_Z19__fetch_global_Wirev>
   d5b26:	6803      	ldr	r3, [r0, #0]
   d5b28:	4629      	mov	r1, r5
   d5b2a:	689b      	ldr	r3, [r3, #8]
   d5b2c:	4798      	blx	r3
    Wire.endTransmission();
   d5b2e:	f001 ff05 	bl	d793c <_Z19__fetch_global_Wirev>
  }
}
   d5b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d5b36:	f001 b9e0 	b.w	d6efa <_ZN7TwoWire15endTransmissionEv>
	...

000d5b3c <_ZN16Adafruit_SSD13065beginEhhb>:
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}


void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
   d5b3c:	b570      	push	{r4, r5, r6, lr}
   d5b3e:	4604      	mov	r4, r0
   d5b40:	461e      	mov	r6, r3
  _vccstate = vccstate;
   d5b42:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d5b46:	f990 302a 	ldrsb.w	r3, [r0, #42]	; 0x2a
}


void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d5b4a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28

  // set pin directions
  if (sid != -1){
   d5b4e:	3301      	adds	r3, #1
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}


void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
   d5b50:	460d      	mov	r5, r1
  _vccstate = vccstate;
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d5b52:	d025      	beq.n	d5ba0 <_ZN16Adafruit_SSD13065beginEhhb+0x64>
    pinMode(dc, OUTPUT);
   d5b54:	f990 002c 	ldrsb.w	r0, [r0, #44]	; 0x2c
   d5b58:	2101      	movs	r1, #1
   d5b5a:	b280      	uxth	r0, r0
   d5b5c:	f001 fe52 	bl	d7804 <pinMode>
    pinMode(cs, OUTPUT);
   d5b60:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5b64:	2101      	movs	r1, #1
   d5b66:	b280      	uxth	r0, r0
   d5b68:	f001 fe4c 	bl	d7804 <pinMode>
    csport      = portOutputRegister(digitalPinToPort(cs));
    cspinmask   = digitalPinToBitMask(cs);
    dcport      = portOutputRegister(digitalPinToPort(dc));
    dcpinmask   = digitalPinToBitMask(dc);
#endif
    if (!hwSPI){
   d5b6c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   d5b70:	b95b      	cbnz	r3, d5b8a <_ZN16Adafruit_SSD13065beginEhhb+0x4e>
      // set pins for software-SPI
      pinMode(sid, OUTPUT);
   d5b72:	f994 002a 	ldrsb.w	r0, [r4, #42]	; 0x2a
   d5b76:	2101      	movs	r1, #1
   d5b78:	b280      	uxth	r0, r0
   d5b7a:	f001 fe43 	bl	d7804 <pinMode>
      pinMode(sclk, OUTPUT);
   d5b7e:	f994 002b 	ldrsb.w	r0, [r4, #43]	; 0x2b
   d5b82:	2101      	movs	r1, #1
   d5b84:	b280      	uxth	r0, r0
   d5b86:	f001 fe3d 	bl	d7804 <pinMode>
      clkpinmask  = digitalPinToBitMask(sclk);
      mosiport    = portOutputRegister(digitalPinToPort(sid));
      mosipinmask = digitalPinToBitMask(sid);
#endif
      }
    if (hwSPI){
   d5b8a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   d5b8e:	b15b      	cbz	r3, d5ba8 <_ZN16Adafruit_SSD13065beginEhhb+0x6c>
      SPI.begin();
   d5b90:	486b      	ldr	r0, [pc, #428]	; (d5d40 <_ZN16Adafruit_SSD13065beginEhhb+0x204>)
   d5b92:	f000 fd3b 	bl	d660c <_ZN8SPIClass5beginEv>
#ifdef SPI_HAS_TRANSACTION
      SPI.beginTransaction(SPISettings(8000000, MSBFIRST, SPI_MODE0));
#else
      SPI.setClockDivider (4);
   d5b96:	2104      	movs	r1, #4
   d5b98:	4869      	ldr	r0, [pc, #420]	; (d5d40 <_ZN16Adafruit_SSD13065beginEhhb+0x204>)
   d5b9a:	f000 fd83 	bl	d66a4 <_ZN8SPIClass15setClockDividerEh>
   d5b9e:	e003      	b.n	d5ba8 <_ZN16Adafruit_SSD13065beginEhhb+0x6c>
    }
  }
  else
  {
    // I2C Init
    Wire.begin();
   d5ba0:	f001 fecc 	bl	d793c <_Z19__fetch_global_Wirev>
   d5ba4:	f001 f998 	bl	d6ed8 <_ZN7TwoWire5beginEv>
    // Force 400 KHz I2C, rawr! (Uses pins 20, 21 for SDA, SCL)
    TWI1->TWI_CWGR = 0;
    TWI1->TWI_CWGR = ((VARIANT_MCK / (2 * 400000)) - 4) * 0x101;
#endif
  }
  if ((reset) && (rst >= 0)) {
   d5ba8:	b1fe      	cbz	r6, d5bea <_ZN16Adafruit_SSD13065beginEhhb+0xae>
   d5baa:	f994 002d 	ldrsb.w	r0, [r4, #45]	; 0x2d
   d5bae:	2800      	cmp	r0, #0
   d5bb0:	db1b      	blt.n	d5bea <_ZN16Adafruit_SSD13065beginEhhb+0xae>
    // Setup reset pin direction (used by both SPI and I2C)
    pinMode(rst, OUTPUT);
   d5bb2:	2101      	movs	r1, #1
   d5bb4:	b280      	uxth	r0, r0
   d5bb6:	f001 fe25 	bl	d7804 <pinMode>
    digitalWrite(rst, HIGH);
   d5bba:	f994 002d 	ldrsb.w	r0, [r4, #45]	; 0x2d
   d5bbe:	2101      	movs	r1, #1
   d5bc0:	b280      	uxth	r0, r0
   d5bc2:	f001 fe30 	bl	d7826 <digitalWrite>
    // VDD (3.3V) goes high at start, lets just chill for a ms
    delay(1);
   d5bc6:	2001      	movs	r0, #1
   d5bc8:	f000 ff1e 	bl	d6a08 <delay>
    // bring reset low
    digitalWrite(rst, LOW);
   d5bcc:	f994 002d 	ldrsb.w	r0, [r4, #45]	; 0x2d
   d5bd0:	2100      	movs	r1, #0
   d5bd2:	b280      	uxth	r0, r0
   d5bd4:	f001 fe27 	bl	d7826 <digitalWrite>
    // wait 10ms
    delay(10);
   d5bd8:	200a      	movs	r0, #10
   d5bda:	f000 ff15 	bl	d6a08 <delay>
    // bring out of reset
    digitalWrite(rst, HIGH);
   d5bde:	f994 002d 	ldrsb.w	r0, [r4, #45]	; 0x2d
   d5be2:	2101      	movs	r1, #1
   d5be4:	b280      	uxth	r0, r0
   d5be6:	f001 fe1e 	bl	d7826 <digitalWrite>
    // turn on VCC (9V?)
  }

  // Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d5bea:	21ae      	movs	r1, #174	; 0xae
   d5bec:	4620      	mov	r0, r4
   d5bee:	f7ff ff67 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d5bf2:	21d5      	movs	r1, #213	; 0xd5
   d5bf4:	4620      	mov	r0, r4
   d5bf6:	f7ff ff63 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d5bfa:	2180      	movs	r1, #128	; 0x80
   d5bfc:	4620      	mov	r0, r4
   d5bfe:	f7ff ff5f 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d5c02:	21a8      	movs	r1, #168	; 0xa8
   d5c04:	4620      	mov	r0, r4
   d5c06:	f7ff ff5b 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(_height - 1);
   d5c0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   d5c0c:	3901      	subs	r1, #1
   d5c0e:	b2c9      	uxtb	r1, r1
   d5c10:	4620      	mov	r0, r4
   d5c12:	f7ff ff55 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d5c16:	21d3      	movs	r1, #211	; 0xd3
   d5c18:	4620      	mov	r0, r4
   d5c1a:	f7ff ff51 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x0);                                   // no offset
   d5c1e:	2100      	movs	r1, #0
   d5c20:	4620      	mov	r0, r4
   d5c22:	f7ff ff4d 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d5c26:	2140      	movs	r1, #64	; 0x40
   d5c28:	4620      	mov	r0, r4
   d5c2a:	f7ff ff49 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d5c2e:	218d      	movs	r1, #141	; 0x8d
   d5c30:	4620      	mov	r0, r4
   d5c32:	f7ff ff45 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (vccstate == SSD1306_EXTERNALVCC)
   d5c36:	2d01      	cmp	r5, #1
    { ssd1306_command(0x10); }
   d5c38:	bf0c      	ite	eq
   d5c3a:	2110      	moveq	r1, #16
  else
    { ssd1306_command(0x14); }
   d5c3c:	2114      	movne	r1, #20
   d5c3e:	4620      	mov	r0, r4
   d5c40:	f7ff ff3e 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d5c44:	2120      	movs	r1, #32
   d5c46:	4620      	mov	r0, r4
   d5c48:	f7ff ff3a 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d5c4c:	2100      	movs	r1, #0
   d5c4e:	4620      	mov	r0, r4
   d5c50:	f7ff ff36 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d5c54:	21a1      	movs	r1, #161	; 0xa1
   d5c56:	4620      	mov	r0, r4
   d5c58:	f7ff ff32 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_COMSCANDEC);
   d5c5c:	21c8      	movs	r1, #200	; 0xc8
   d5c5e:	4620      	mov	r0, r4
   d5c60:	f7ff ff2e 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (_width == 128 && _height == 32) {
   d5c64:	6a23      	ldr	r3, [r4, #32]
   d5c66:	2b80      	cmp	r3, #128	; 0x80
   d5c68:	d112      	bne.n	d5c90 <_ZN16Adafruit_SSD13065beginEhhb+0x154>
   d5c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c6c:	2b20      	cmp	r3, #32
   d5c6e:	d10f      	bne.n	d5c90 <_ZN16Adafruit_SSD13065beginEhhb+0x154>
	  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5c70:	21da      	movs	r1, #218	; 0xda
   d5c72:	4620      	mov	r0, r4
   d5c74:	f7ff ff24 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(0x02);
   d5c78:	2102      	movs	r1, #2
   d5c7a:	4620      	mov	r0, r4
   d5c7c:	f7ff ff20 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5c80:	2181      	movs	r1, #129	; 0x81
   d5c82:	4620      	mov	r0, r4
   d5c84:	f7ff ff1c 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(0x8F);
   d5c88:	218f      	movs	r1, #143	; 0x8f
   d5c8a:	4620      	mov	r0, r4
   d5c8c:	f7ff ff18 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }

  if (_width == 128 && _height == 64) {
   d5c90:	6a23      	ldr	r3, [r4, #32]
   d5c92:	2b80      	cmp	r3, #128	; 0x80
   d5c94:	d115      	bne.n	d5cc2 <_ZN16Adafruit_SSD13065beginEhhb+0x186>
   d5c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c98:	2b40      	cmp	r3, #64	; 0x40
   d5c9a:	d112      	bne.n	d5cc2 <_ZN16Adafruit_SSD13065beginEhhb+0x186>
	  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5c9c:	21da      	movs	r1, #218	; 0xda
   d5c9e:	4620      	mov	r0, r4
   d5ca0:	f7ff ff0e 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(0x12);
   d5ca4:	2112      	movs	r1, #18
   d5ca6:	4620      	mov	r0, r4
   d5ca8:	f7ff ff0a 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5cac:	2181      	movs	r1, #129	; 0x81
   d5cae:	4620      	mov	r0, r4
   d5cb0:	f7ff ff06 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  if (vccstate == SSD1306_EXTERNALVCC)
   d5cb4:	2d01      	cmp	r5, #1
		{ ssd1306_command(0x9F); }
   d5cb6:	bf0c      	ite	eq
   d5cb8:	219f      	moveq	r1, #159	; 0x9f
	  else
		{ ssd1306_command(0xCF); }
   d5cba:	21cf      	movne	r1, #207	; 0xcf
   d5cbc:	4620      	mov	r0, r4
   d5cbe:	f7ff feff 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }

  if (_width == 96 && _height == 16) {
   d5cc2:	6a23      	ldr	r3, [r4, #32]
   d5cc4:	2b60      	cmp	r3, #96	; 0x60
   d5cc6:	d115      	bne.n	d5cf4 <_ZN16Adafruit_SSD13065beginEhhb+0x1b8>
   d5cc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d5cca:	2e10      	cmp	r6, #16
   d5ccc:	d112      	bne.n	d5cf4 <_ZN16Adafruit_SSD13065beginEhhb+0x1b8>
	  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5cce:	21da      	movs	r1, #218	; 0xda
   d5cd0:	4620      	mov	r0, r4
   d5cd2:	f7ff fef5 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(0x2);   //ada x12
   d5cd6:	2102      	movs	r1, #2
   d5cd8:	4620      	mov	r0, r4
   d5cda:	f7ff fef1 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5cde:	2181      	movs	r1, #129	; 0x81
   d5ce0:	4620      	mov	r0, r4
   d5ce2:	f7ff feed 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  if (vccstate == SSD1306_EXTERNALVCC)
   d5ce6:	2d01      	cmp	r5, #1
		{ ssd1306_command(0x10); }
   d5ce8:	bf0c      	ite	eq
   d5cea:	4631      	moveq	r1, r6
	  else
		{ ssd1306_command(0xAF); }
   d5cec:	21af      	movne	r1, #175	; 0xaf
   d5cee:	4620      	mov	r0, r4
   d5cf0:	f7ff fee6 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d5cf4:	21d9      	movs	r1, #217	; 0xd9
   d5cf6:	4620      	mov	r0, r4
   d5cf8:	f7ff fee2 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (vccstate == SSD1306_EXTERNALVCC)
   d5cfc:	2d01      	cmp	r5, #1
    { ssd1306_command(0x22); }
   d5cfe:	bf0c      	ite	eq
   d5d00:	2122      	moveq	r1, #34	; 0x22
  else
    { ssd1306_command(0xF1); }
   d5d02:	21f1      	movne	r1, #241	; 0xf1
   d5d04:	4620      	mov	r0, r4
   d5d06:	f7ff fedb 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d5d0a:	4620      	mov	r0, r4
   d5d0c:	21db      	movs	r1, #219	; 0xdb
   d5d0e:	f7ff fed7 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x40);
   d5d12:	4620      	mov	r0, r4
   d5d14:	2140      	movs	r1, #64	; 0x40
   d5d16:	f7ff fed3 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d5d1a:	4620      	mov	r0, r4
   d5d1c:	21a4      	movs	r1, #164	; 0xa4
   d5d1e:	f7ff fecf 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d5d22:	4620      	mov	r0, r4
   d5d24:	21a6      	movs	r1, #166	; 0xa6
   d5d26:	f7ff fecb 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
   d5d2a:	4620      	mov	r0, r4
   d5d2c:	212e      	movs	r1, #46	; 0x2e
   d5d2e:	f7ff fec7 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5d32:	4620      	mov	r0, r4
   d5d34:	21af      	movs	r1, #175	; 0xaf
}
   d5d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5d3a:	f7ff bec1 	b.w	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
   d5d3e:	bf00      	nop
   d5d40:	2003e714 	.word	0x2003e714

000d5d44 <_ZN16Adafruit_SSD13067displayEv>:
  // it is useful to dim the display
  ssd1306_command(SSD1306_SETCONTRAST);
  ssd1306_command(contrast);
}

void Adafruit_SSD1306::display(void) {
   d5d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d5d46:	2121      	movs	r1, #33	; 0x21
  // it is useful to dim the display
  ssd1306_command(SSD1306_SETCONTRAST);
  ssd1306_command(contrast);
}

void Adafruit_SSD1306::display(void) {
   d5d48:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d5d4a:	f7ff feb9 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d5d4e:	2100      	movs	r1, #0
   d5d50:	4620      	mov	r0, r4
   d5d52:	f7ff feb5 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(_width-1); // Column end address (127 = reset)
   d5d56:	6a21      	ldr	r1, [r4, #32]
   d5d58:	3901      	subs	r1, #1
   d5d5a:	b2c9      	uxtb	r1, r1
   d5d5c:	4620      	mov	r0, r4
   d5d5e:	f7ff feaf 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d5d62:	2122      	movs	r1, #34	; 0x22
   d5d64:	4620      	mov	r0, r4
   d5d66:	f7ff feab 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d5d6a:	2100      	movs	r1, #0
   d5d6c:	4620      	mov	r0, r4
   d5d6e:	f7ff fea7 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (_height == 64) {
   d5d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5d74:	2b40      	cmp	r3, #64	; 0x40
   d5d76:	d103      	bne.n	d5d80 <_ZN16Adafruit_SSD13067displayEv+0x3c>
    ssd1306_command(7); // Page end address
   d5d78:	2107      	movs	r1, #7
   d5d7a:	4620      	mov	r0, r4
   d5d7c:	f7ff fea0 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }
  if (_height == 32) {
   d5d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5d82:	2b20      	cmp	r3, #32
   d5d84:	d103      	bne.n	d5d8e <_ZN16Adafruit_SSD13067displayEv+0x4a>
    ssd1306_command(3); // Page end address
   d5d86:	2103      	movs	r1, #3
   d5d88:	4620      	mov	r0, r4
   d5d8a:	f7ff fe99 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }
  if (_height == 16) {
   d5d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5d90:	2b10      	cmp	r3, #16
   d5d92:	d103      	bne.n	d5d9c <_ZN16Adafruit_SSD13067displayEv+0x58>
    ssd1306_command(1); // Page end address
   d5d94:	2101      	movs	r1, #1
   d5d96:	4620      	mov	r0, r4
   d5d98:	f7ff fe92 	bl	d5ac0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }

  if (sid != -1)
   d5d9c:	f994 302a 	ldrsb.w	r3, [r4, #42]	; 0x2a
   d5da0:	3301      	adds	r3, #1
   d5da2:	d101      	bne.n	d5da8 <_ZN16Adafruit_SSD13067displayEv+0x64>
   d5da4:	2500      	movs	r5, #0
   d5da6:	e03b      	b.n	d5e20 <_ZN16Adafruit_SSD13067displayEv+0xdc>
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
    *dcport |= dcpinmask;
    *csport &= ~cspinmask;
#else
    digitalWrite(cs, HIGH);
   d5da8:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5dac:	2101      	movs	r1, #1
   d5dae:	b280      	uxth	r0, r0
   d5db0:	f001 fd39 	bl	d7826 <digitalWrite>
    digitalWrite(dc, HIGH);
   d5db4:	f994 002c 	ldrsb.w	r0, [r4, #44]	; 0x2c
   d5db8:	2101      	movs	r1, #1
   d5dba:	b280      	uxth	r0, r0
   d5dbc:	f001 fd33 	bl	d7826 <digitalWrite>
    digitalWrite(cs, LOW);
   d5dc0:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5dc4:	2100      	movs	r1, #0
   d5dc6:	b280      	uxth	r0, r0
   d5dc8:	f001 fd2d 	bl	d7826 <digitalWrite>
   d5dcc:	2500      	movs	r5, #0
#endif

    for (uint16_t i=0; i<(_width*_height/8); i++) {
   d5dce:	6a21      	ldr	r1, [r4, #32]
   d5dd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5dd2:	b2aa      	uxth	r2, r5
   d5dd4:	434b      	muls	r3, r1
   d5dd6:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   d5dda:	f105 0501 	add.w	r5, r5, #1
   d5dde:	d205      	bcs.n	d5dec <_ZN16Adafruit_SSD13067displayEv+0xa8>
      fastSPIwrite(buffer[i]);
   d5de0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d5de2:	4620      	mov	r0, r4
   d5de4:	5c99      	ldrb	r1, [r3, r2]
   d5de6:	f7ff fe41 	bl	d5a6c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
#endif

    for (uint16_t i=0; i<(_width*_height/8); i++) {
   d5dea:	e7f0      	b.n	d5dce <_ZN16Adafruit_SSD13067displayEv+0x8a>
      fastSPIwrite(buffer[i]);
    }
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
#else
    digitalWrite(cs, HIGH);
   d5dec:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5df0:	2101      	movs	r1, #1
   d5df2:	b280      	uxth	r0, r0
    }
#ifdef TWBR
    TWBR = twbrbackup;
#endif
  }
}
   d5df4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      fastSPIwrite(buffer[i]);
    }
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
#else
    digitalWrite(cs, HIGH);
   d5df8:	f001 bd15 	b.w	d7826 <digitalWrite>
    for (uint16_t i=0; i<(_width*_height/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      WIRE_WRITE(0x40);
      for (uint8_t x=0; x<16; x++) {
        WIRE_WRITE(buffer[i]);
   d5dfc:	f001 fd9e 	bl	d793c <_Z19__fetch_global_Wirev>
   d5e00:	19af      	adds	r7, r5, r6
   d5e02:	6b22      	ldr	r2, [r4, #48]	; 0x30
   d5e04:	6803      	ldr	r3, [r0, #0]
   d5e06:	b2bf      	uxth	r7, r7
   d5e08:	689b      	ldr	r3, [r3, #8]
   d5e0a:	5dd1      	ldrb	r1, [r2, r7]
   d5e0c:	3601      	adds	r6, #1
   d5e0e:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(_width*_height/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      WIRE_WRITE(0x40);
      for (uint8_t x=0; x<16; x++) {
   d5e10:	2e10      	cmp	r6, #16
   d5e12:	d1f3      	bne.n	d5dfc <_ZN16Adafruit_SSD13067displayEv+0xb8>
   d5e14:	3510      	adds	r5, #16
   d5e16:	b2ad      	uxth	r5, r5
        WIRE_WRITE(buffer[i]);
        i++;
      }
      i--;
      Wire.endTransmission();
   d5e18:	f001 fd90 	bl	d793c <_Z19__fetch_global_Wirev>
   d5e1c:	f001 f86d 	bl	d6efa <_ZN7TwoWire15endTransmissionEv>

    //Serial.println(TWBR, DEC);
    //Serial.println(TWSR & 0x3, DEC);

    // I2C
    for (uint16_t i=0; i<(_width*_height/8); i++) {
   d5e20:	6a22      	ldr	r2, [r4, #32]
   d5e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5e24:	4353      	muls	r3, r2
   d5e26:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
   d5e2a:	d20d      	bcs.n	d5e48 <_ZN16Adafruit_SSD13067displayEv+0x104>
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d5e2c:	f001 fd86 	bl	d793c <_Z19__fetch_global_Wirev>
   d5e30:	f994 1028 	ldrsb.w	r1, [r4, #40]	; 0x28
   d5e34:	f001 f85a 	bl	d6eec <_ZN7TwoWire17beginTransmissionEi>
      WIRE_WRITE(0x40);
   d5e38:	f001 fd80 	bl	d793c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5e3c:	6803      	ldr	r3, [r0, #0]
   d5e3e:	2140      	movs	r1, #64	; 0x40
   d5e40:	689b      	ldr	r3, [r3, #8]
   d5e42:	4798      	blx	r3
   d5e44:	2600      	movs	r6, #0
   d5e46:	e7d9      	b.n	d5dfc <_ZN16Adafruit_SSD13067displayEv+0xb8>
   d5e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e4a <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d5e4a:	f000 b8f9 	b.w	d6040 <HAL_Pin_Map>

000d5e4e <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
   d5e4e:	f04f 33ff 	mov.w	r3, #4294967295
   d5e52:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
{
}
   d5e56:	4770      	bx	lr

000d5e58 <_ZN10BlynkTimer4initEv>:

void SimpleTimer::init() {
   d5e58:	b570      	push	{r4, r5, r6, lr}
   d5e5a:	4605      	mov	r5, r0
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d5e5c:	f000 f8c2 	bl	d5fe4 <_Z11BlynkMillisv>
   d5e60:	2400      	movs	r4, #0
   d5e62:	4606      	mov	r6, r0

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        memset(&timer[i], 0, sizeof (timer_t));
   d5e64:	1928      	adds	r0, r5, r4
   d5e66:	2224      	movs	r2, #36	; 0x24
   d5e68:	2100      	movs	r1, #0
   d5e6a:	f002 fc00 	bl	d866e <memset>
        timer[i].prev_millis = current_millis;
   d5e6e:	512e      	str	r6, [r5, r4]
   d5e70:	3424      	adds	r4, #36	; 0x24
}

void SimpleTimer::init() {
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
   d5e72:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
   d5e76:	d1f5      	bne.n	d5e64 <_ZN10BlynkTimer4initEv+0xc>
        memset(&timer[i], 0, sizeof (timer_t));
        timer[i].prev_millis = current_millis;
    }

    numTimers = 0;
   d5e78:	2300      	movs	r3, #0
   d5e7a:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240
   d5e7e:	bd70      	pop	{r4, r5, r6, pc}

000d5e80 <_ZN10BlynkTimer17findFirstFreeSlotEv>:

// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
   d5e80:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d5e84:	2b0f      	cmp	r3, #15
   d5e86:	dc08      	bgt.n	d5e9a <_ZN10BlynkTimer17findFirstFreeSlotEv+0x1a>
   d5e88:	2300      	movs	r3, #0
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].callback == NULL) {
   d5e8a:	2224      	movs	r2, #36	; 0x24
   d5e8c:	fb02 0103 	mla	r1, r2, r3, r0
   d5e90:	6849      	ldr	r1, [r1, #4]
   d5e92:	b129      	cbz	r1, d5ea0 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x20>
    if (numTimers >= MAX_TIMERS) {
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
   d5e94:	3301      	adds	r3, #1
   d5e96:	2b10      	cmp	r3, #16
   d5e98:	d1f8      	bne.n	d5e8c <_ZN10BlynkTimer17findFirstFreeSlotEv+0xc>
// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
        return -1;
   d5e9a:	f04f 30ff 	mov.w	r0, #4294967295
   d5e9e:	4770      	bx	lr
   d5ea0:	4618      	mov	r0, r3
        }
    }

    // no free slots found
    return -1;
}
   d5ea2:	4770      	bx	lr

000d5ea4 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>:


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d5ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5ea8:	4698      	mov	r8, r3
    int freeTimer;

    if (numTimers < 0) {
   d5eaa:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d5eae:	2b00      	cmp	r3, #0
    // no free slots found
    return -1;
}


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d5eb0:	4605      	mov	r5, r0
   d5eb2:	4689      	mov	r9, r1
   d5eb4:	4617      	mov	r7, r2
    int freeTimer;

    if (numTimers < 0) {
   d5eb6:	da01      	bge.n	d5ebc <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x18>
        init();
   d5eb8:	f7ff ffce 	bl	d5e58 <_ZN10BlynkTimer4initEv>
    }

    freeTimer = findFirstFreeSlot();
   d5ebc:	4628      	mov	r0, r5
   d5ebe:	f7ff ffdf 	bl	d5e80 <_ZN10BlynkTimer17findFirstFreeSlotEv>
    if (freeTimer < 0) {
   d5ec2:	1e04      	subs	r4, r0, #0
   d5ec4:	db1a      	blt.n	d5efc <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    if (f == NULL) {
   d5ec6:	b1cf      	cbz	r7, d5efc <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x58>
        return -1;
    }

    timer[freeTimer].delay = d;
   d5ec8:	2624      	movs	r6, #36	; 0x24
   d5eca:	4366      	muls	r6, r4
   d5ecc:	19ab      	adds	r3, r5, r6
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
   d5ece:	f89d 2020 	ldrb.w	r2, [sp, #32]
   d5ed2:	731a      	strb	r2, [r3, #12]
    timer[freeTimer].maxNumRuns = n;
   d5ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d5ed6:	615a      	str	r2, [r3, #20]
    timer[freeTimer].enabled = true;
   d5ed8:	2201      	movs	r2, #1

    if (f == NULL) {
        return -1;
    }

    timer[freeTimer].delay = d;
   d5eda:	f8c3 9010 	str.w	r9, [r3, #16]
    timer[freeTimer].callback = f;
   d5ede:	605f      	str	r7, [r3, #4]
    timer[freeTimer].param = p;
   d5ee0:	f8c3 8008 	str.w	r8, [r3, #8]
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
   d5ee4:	771a      	strb	r2, [r3, #28]
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d5ee6:	f000 f87d 	bl	d5fe4 <_Z11BlynkMillisv>
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
    timer[freeTimer].maxNumRuns = n;
    timer[freeTimer].enabled = true;
    timer[freeTimer].prev_millis = elapsed();
   d5eea:	51a8      	str	r0, [r5, r6]

    numTimers++;
   d5eec:	f8d5 3240 	ldr.w	r3, [r5, #576]	; 0x240
   d5ef0:	3301      	adds	r3, #1
   d5ef2:	f8c5 3240 	str.w	r3, [r5, #576]	; 0x240

    return freeTimer;
   d5ef6:	4620      	mov	r0, r4
   d5ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        init();
    }

    freeTimer = findFirstFreeSlot();
    if (freeTimer < 0) {
        return -1;
   d5efc:	f04f 30ff 	mov.w	r0, #4294967295
    timer[freeTimer].prev_millis = elapsed();

    numTimers++;

    return freeTimer;
}
   d5f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5f04 <_ZN10BlynkTimer11setIntervalEmPFvvE>:

int SimpleTimer::setTimer(unsigned long d, timer_callback_p f, void* p, unsigned n) {
  return setupTimer(d, (void *)f, p, true, n);
}

int SimpleTimer::setInterval(unsigned long d, timer_callback f) {
   d5f04:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_FOREVER);
   d5f06:	2300      	movs	r3, #0
   d5f08:	9301      	str	r3, [sp, #4]
   d5f0a:	9300      	str	r3, [sp, #0]
   d5f0c:	f7ff ffca 	bl	d5ea4 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
   d5f10:	b003      	add	sp, #12
   d5f12:	f85d fb04 	ldr.w	pc, [sp], #4

000d5f16 <_ZN10BlynkTimer11deleteTimerEj>:
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
    if (timerId >= MAX_TIMERS) {
   d5f16:	290f      	cmp	r1, #15
    }
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
   d5f18:	b538      	push	{r3, r4, r5, lr}
   d5f1a:	4604      	mov	r4, r0
    if (timerId >= MAX_TIMERS) {
   d5f1c:	d813      	bhi.n	d5f46 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
   d5f1e:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d5f22:	b183      	cbz	r3, d5f46 <_ZN10BlynkTimer11deleteTimerEj+0x30>
   d5f24:	2224      	movs	r2, #36	; 0x24
   d5f26:	fb02 f501 	mul.w	r5, r2, r1
   d5f2a:	4428      	add	r0, r5
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
   d5f2c:	6843      	ldr	r3, [r0, #4]
   d5f2e:	b153      	cbz	r3, d5f46 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        memset(&timer[timerId], 0, sizeof (timer_t));
   d5f30:	2100      	movs	r1, #0
   d5f32:	f002 fb9c 	bl	d866e <memset>
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d5f36:	f000 f855 	bl	d5fe4 <_Z11BlynkMillisv>

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
        memset(&timer[timerId], 0, sizeof (timer_t));
        timer[timerId].prev_millis = elapsed();
   d5f3a:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
   d5f3c:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
   d5f40:	3b01      	subs	r3, #1
   d5f42:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
   d5f46:	bd38      	pop	{r3, r4, r5, pc}

000d5f48 <_ZN10BlynkTimer3runEv>:

    numTimers = 0;
}


void SimpleTimer::run() {
   d5f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f4c:	4605      	mov	r5, r0
   d5f4e:	f505 7711 	add.w	r7, r5, #580	; 0x244
#include "Blynk/BlynkTimer.h"
#include <string.h>

// Select time function:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }
   d5f52:	f000 f847 	bl	d5fe4 <_Z11BlynkMillisv>
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d5f56:	2601      	movs	r6, #1
   d5f58:	1d2b      	adds	r3, r5, #4
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d5f5a:	f04f 0e00 	mov.w	lr, #0
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d5f5e:	f04f 0c02 	mov.w	ip, #2
    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   d5f62:	681a      	ldr	r2, [r3, #0]
    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {

        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d5f64:	f8c3 e01c 	str.w	lr, [r3, #28]

        // no callback == no timer, i.e. jump over empty slots
        if (timer[i].callback != NULL) {
   d5f68:	b1e2      	cbz	r2, d5fa4 <_ZN10BlynkTimer3runEv+0x5c>

            // is it time to process this timer ?
            // see http://arduino.cc/forum/index.php/topic,124048.msg932592.html#msg932592

            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
   d5f6a:	f853 8c04 	ldr.w	r8, [r3, #-4]
   d5f6e:	68dc      	ldr	r4, [r3, #12]
   d5f70:	ebc8 0200 	rsb	r2, r8, r0
   d5f74:	42a2      	cmp	r2, r4
   d5f76:	d315      	bcc.n	d5fa4 <_ZN10BlynkTimer3runEv+0x5c>

                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
                // update time
                timer[i].prev_millis += timer[i].delay * skipTimes;
   d5f78:	fbb2 f1f4 	udiv	r1, r2, r4
   d5f7c:	fb04 8201 	mla	r2, r4, r1, r8
   d5f80:	f843 2c04 	str.w	r2, [r3, #-4]

                // check if the timer callback has to be executed
                if (timer[i].enabled) {
   d5f84:	7e1a      	ldrb	r2, [r3, #24]
   d5f86:	b16a      	cbz	r2, d5fa4 <_ZN10BlynkTimer3runEv+0x5c>

                    // "run forever" timers must always be executed
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
   d5f88:	6919      	ldr	r1, [r3, #16]
   d5f8a:	b909      	cbnz	r1, d5f90 <_ZN10BlynkTimer3runEv+0x48>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d5f8c:	61de      	str	r6, [r3, #28]
   d5f8e:	e009      	b.n	d5fa4 <_ZN10BlynkTimer3runEv+0x5c>
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
   d5f90:	695a      	ldr	r2, [r3, #20]
   d5f92:	4291      	cmp	r1, r2
   d5f94:	d906      	bls.n	d5fa4 <_ZN10BlynkTimer3runEv+0x5c>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                        timer[i].numRuns++;
   d5f96:	3201      	adds	r2, #1

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
   d5f98:	4291      	cmp	r1, r2
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
                    }
                    // other timers get executed the specified number of times
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d5f9a:	61de      	str	r6, [r3, #28]
                        timer[i].numRuns++;
   d5f9c:	615a      	str	r2, [r3, #20]

                        // after the last run, delete the timer
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d5f9e:	bf98      	it	ls
   d5fa0:	f8c3 c01c 	strls.w	ip, [r3, #28]
   d5fa4:	3324      	adds	r3, #36	; 0x24
    unsigned long current_millis;

    // get current time
    current_millis = elapsed();

    for (i = 0; i < MAX_TIMERS; i++) {
   d5fa6:	42bb      	cmp	r3, r7
   d5fa8:	d1db      	bne.n	d5f62 <_ZN10BlynkTimer3runEv+0x1a>
   d5faa:	462c      	mov	r4, r5
   d5fac:	2600      	movs	r6, #0
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
   d5fae:	6a23      	ldr	r3, [r4, #32]
   d5fb0:	b16b      	cbz	r3, d5fce <_ZN10BlynkTimer3runEv+0x86>
            continue;

        if (timer[i].hasParam)
   d5fb2:	7b22      	ldrb	r2, [r4, #12]
   d5fb4:	6863      	ldr	r3, [r4, #4]
   d5fb6:	b112      	cbz	r2, d5fbe <_ZN10BlynkTimer3runEv+0x76>
            (*(timer_callback_p)timer[i].callback)(timer[i].param);
   d5fb8:	68a0      	ldr	r0, [r4, #8]
   d5fba:	4798      	blx	r3
   d5fbc:	e000      	b.n	d5fc0 <_ZN10BlynkTimer3runEv+0x78>
        else
            (*(timer_callback)timer[i].callback)();
   d5fbe:	4798      	blx	r3

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
   d5fc0:	6a23      	ldr	r3, [r4, #32]
   d5fc2:	2b02      	cmp	r3, #2
   d5fc4:	d103      	bne.n	d5fce <_ZN10BlynkTimer3runEv+0x86>
            deleteTimer(i);
   d5fc6:	4631      	mov	r1, r6
   d5fc8:	4628      	mov	r0, r5
   d5fca:	f7ff ffa4 	bl	d5f16 <_ZN10BlynkTimer11deleteTimerEj>
                }
            }
        }
    }

    for (i = 0; i < MAX_TIMERS; i++) {
   d5fce:	3601      	adds	r6, #1
   d5fd0:	2e10      	cmp	r6, #16
   d5fd2:	f104 0424 	add.w	r4, r4, #36	; 0x24
   d5fd6:	d1ea      	bne.n	d5fae <_ZN10BlynkTimer3runEv+0x66>
            (*(timer_callback)timer[i].callback)();

        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
            deleteTimer(i);
    }
}
   d5fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5fdc <_GLOBAL__sub_I__ZN10BlynkTimerC2Ev>:
   d5fdc:	f000 b830 	b.w	d6040 <HAL_Pin_Map>

000d5fe0 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d5fe0:	f000 bd12 	b.w	d6a08 <delay>

000d5fe4 <_Z11BlynkMillisv>:
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5fe4:	f000 b8bc 	b.w	d6160 <HAL_Timer_Get_Milli_Seconds>

000d5fe8 <_GLOBAL__sub_I__Z10BlynkResetv>:
   d5fe8:	f000 b82a 	b.w	d6040 <HAL_Pin_Map>

000d5fec <BlynkWidgetRead>:

void BlynkNoOpCbk()
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
   d5fec:	4770      	bx	lr

000d5fee <BlynkWidgetWrite>:
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
   d5fee:	4770      	bx	lr

000d5ff0 <BlynkNoOpCbk>:
#include <Blynk/BlynkConfig.h>
#include <Blynk/BlynkHandlers.h>
#include <Blynk/BlynkDebug.h>

void BlynkNoOpCbk()
{}
   d5ff0:	4770      	bx	lr
	...

000d5ff4 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d5ff4:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d5ff6:	bf9a      	itte	ls
   d5ff8:	4b02      	ldrls	r3, [pc, #8]	; (d6004 <GetReadHandler+0x10>)
   d5ffa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
        return NULL;
   d5ffe:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
#endif
}
   d6000:	4770      	bx	lr
   d6002:	bf00      	nop
   d6004:	000dab6c 	.word	0x000dab6c

000d6008 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d6008:	287f      	cmp	r0, #127	; 0x7f
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d600a:	bf9a      	itte	ls
   d600c:	4b02      	ldrls	r3, [pc, #8]	; (d6018 <GetWriteHandler+0x10>)
   d600e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
}

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
        return NULL;
   d6012:	2000      	movhi	r0, #0
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
#endif
}
   d6014:	4770      	bx	lr
   d6016:	bf00      	nop
   d6018:	000da96c 	.word	0x000da96c

000d601c <_GLOBAL__sub_I_BlynkNoOpCbk>:
   d601c:	f000 b810 	b.w	d6040 <HAL_Pin_Map>

000d6020 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6020:	b508      	push	{r3, lr}
   d6022:	4b02      	ldr	r3, [pc, #8]	; (d602c <netdb_freeaddrinfo+0xc>)
   d6024:	681b      	ldr	r3, [r3, #0]
   d6026:	689b      	ldr	r3, [r3, #8]
   d6028:	9301      	str	r3, [sp, #4]
   d602a:	bd08      	pop	{r3, pc}
   d602c:	00030268 	.word	0x00030268

000d6030 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6030:	b508      	push	{r3, lr}
   d6032:	4b02      	ldr	r3, [pc, #8]	; (d603c <netdb_getaddrinfo+0xc>)
   d6034:	681b      	ldr	r3, [r3, #0]
   d6036:	68db      	ldr	r3, [r3, #12]
   d6038:	9301      	str	r3, [sp, #4]
   d603a:	bd08      	pop	{r3, pc}
   d603c:	00030268 	.word	0x00030268

000d6040 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d6040:	b508      	push	{r3, lr}
   d6042:	4b02      	ldr	r3, [pc, #8]	; (d604c <HAL_Pin_Map+0xc>)
   d6044:	681b      	ldr	r3, [r3, #0]
   d6046:	681b      	ldr	r3, [r3, #0]
   d6048:	9301      	str	r3, [sp, #4]
   d604a:	bd08      	pop	{r3, pc}
   d604c:	0003022c 	.word	0x0003022c

000d6050 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6050:	b508      	push	{r3, lr}
   d6052:	4b02      	ldr	r3, [pc, #8]	; (d605c <HAL_Validate_Pin_Function+0xc>)
   d6054:	681b      	ldr	r3, [r3, #0]
   d6056:	685b      	ldr	r3, [r3, #4]
   d6058:	9301      	str	r3, [sp, #4]
   d605a:	bd08      	pop	{r3, pc}
   d605c:	0003022c 	.word	0x0003022c

000d6060 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6060:	b508      	push	{r3, lr}
   d6062:	4b02      	ldr	r3, [pc, #8]	; (d606c <HAL_Pin_Mode+0xc>)
   d6064:	681b      	ldr	r3, [r3, #0]
   d6066:	689b      	ldr	r3, [r3, #8]
   d6068:	9301      	str	r3, [sp, #4]
   d606a:	bd08      	pop	{r3, pc}
   d606c:	0003022c 	.word	0x0003022c

000d6070 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6070:	b508      	push	{r3, lr}
   d6072:	4b02      	ldr	r3, [pc, #8]	; (d607c <HAL_Get_Pin_Mode+0xc>)
   d6074:	681b      	ldr	r3, [r3, #0]
   d6076:	68db      	ldr	r3, [r3, #12]
   d6078:	9301      	str	r3, [sp, #4]
   d607a:	bd08      	pop	{r3, pc}
   d607c:	0003022c 	.word	0x0003022c

000d6080 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6080:	b508      	push	{r3, lr}
   d6082:	4b02      	ldr	r3, [pc, #8]	; (d608c <HAL_GPIO_Write+0xc>)
   d6084:	681b      	ldr	r3, [r3, #0]
   d6086:	691b      	ldr	r3, [r3, #16]
   d6088:	9301      	str	r3, [sp, #4]
   d608a:	bd08      	pop	{r3, pc}
   d608c:	0003022c 	.word	0x0003022c

000d6090 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6090:	b508      	push	{r3, lr}
   d6092:	4b02      	ldr	r3, [pc, #8]	; (d609c <HAL_GPIO_Read+0xc>)
   d6094:	681b      	ldr	r3, [r3, #0]
   d6096:	695b      	ldr	r3, [r3, #20]
   d6098:	9301      	str	r3, [sp, #4]
   d609a:	bd08      	pop	{r3, pc}
   d609c:	0003022c 	.word	0x0003022c

000d60a0 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d60a0:	b508      	push	{r3, lr}
   d60a2:	4b02      	ldr	r3, [pc, #8]	; (d60ac <HAL_DAC_Write+0xc>)
   d60a4:	681b      	ldr	r3, [r3, #0]
   d60a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d60a8:	9301      	str	r3, [sp, #4]
   d60aa:	bd08      	pop	{r3, pc}
   d60ac:	0003022c 	.word	0x0003022c

000d60b0 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d60b0:	b508      	push	{r3, lr}
   d60b2:	4b02      	ldr	r3, [pc, #8]	; (d60bc <HAL_ADC_Read+0xc>)
   d60b4:	681b      	ldr	r3, [r3, #0]
   d60b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d60b8:	9301      	str	r3, [sp, #4]
   d60ba:	bd08      	pop	{r3, pc}
   d60bc:	0003022c 	.word	0x0003022c

000d60c0 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d60c0:	b508      	push	{r3, lr}
   d60c2:	4b02      	ldr	r3, [pc, #8]	; (d60cc <HAL_PWM_Write_Ext+0xc>)
   d60c4:	681b      	ldr	r3, [r3, #0]
   d60c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d60c8:	9301      	str	r3, [sp, #4]
   d60ca:	bd08      	pop	{r3, pc}
   d60cc:	0003022c 	.word	0x0003022c

000d60d0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d60d0:	b508      	push	{r3, lr}
   d60d2:	4b02      	ldr	r3, [pc, #8]	; (d60dc <HAL_SPI_Begin+0xc>)
   d60d4:	681b      	ldr	r3, [r3, #0]
   d60d6:	681b      	ldr	r3, [r3, #0]
   d60d8:	9301      	str	r3, [sp, #4]
   d60da:	bd08      	pop	{r3, pc}
   d60dc:	00030230 	.word	0x00030230

000d60e0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d60e0:	b508      	push	{r3, lr}
   d60e2:	4b02      	ldr	r3, [pc, #8]	; (d60ec <HAL_SPI_Set_Clock_Divider+0xc>)
   d60e4:	681b      	ldr	r3, [r3, #0]
   d60e6:	691b      	ldr	r3, [r3, #16]
   d60e8:	9301      	str	r3, [sp, #4]
   d60ea:	bd08      	pop	{r3, pc}
   d60ec:	00030230 	.word	0x00030230

000d60f0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d60f0:	b508      	push	{r3, lr}
   d60f2:	4b02      	ldr	r3, [pc, #8]	; (d60fc <HAL_SPI_Send_Receive_Data+0xc>)
   d60f4:	681b      	ldr	r3, [r3, #0]
   d60f6:	695b      	ldr	r3, [r3, #20]
   d60f8:	9301      	str	r3, [sp, #4]
   d60fa:	bd08      	pop	{r3, pc}
   d60fc:	00030230 	.word	0x00030230

000d6100 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6100:	b508      	push	{r3, lr}
   d6102:	4b02      	ldr	r3, [pc, #8]	; (d610c <HAL_SPI_Init+0xc>)
   d6104:	681b      	ldr	r3, [r3, #0]
   d6106:	69db      	ldr	r3, [r3, #28]
   d6108:	9301      	str	r3, [sp, #4]
   d610a:	bd08      	pop	{r3, pc}
   d610c:	00030230 	.word	0x00030230

000d6110 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6110:	b508      	push	{r3, lr}
   d6112:	4b02      	ldr	r3, [pc, #8]	; (d611c <HAL_SPI_Is_Enabled+0xc>)
   d6114:	681b      	ldr	r3, [r3, #0]
   d6116:	6a1b      	ldr	r3, [r3, #32]
   d6118:	9301      	str	r3, [sp, #4]
   d611a:	bd08      	pop	{r3, pc}
   d611c:	00030230 	.word	0x00030230

000d6120 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6120:	b508      	push	{r3, lr}
   d6122:	4b02      	ldr	r3, [pc, #8]	; (d612c <HAL_SPI_Info+0xc>)
   d6124:	681b      	ldr	r3, [r3, #0]
   d6126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6128:	9301      	str	r3, [sp, #4]
   d612a:	bd08      	pop	{r3, pc}
   d612c:	00030230 	.word	0x00030230

000d6130 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6130:	b508      	push	{r3, lr}
   d6132:	4b02      	ldr	r3, [pc, #8]	; (d613c <if_index_to_name+0xc>)
   d6134:	681b      	ldr	r3, [r3, #0]
   d6136:	695b      	ldr	r3, [r3, #20]
   d6138:	9301      	str	r3, [sp, #4]
   d613a:	bd08      	pop	{r3, pc}
   d613c:	0003026c 	.word	0x0003026c

000d6140 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6140:	b508      	push	{r3, lr}
   d6142:	4b02      	ldr	r3, [pc, #8]	; (d614c <HAL_RNG_GetRandomNumber+0xc>)
   d6144:	681b      	ldr	r3, [r3, #0]
   d6146:	685b      	ldr	r3, [r3, #4]
   d6148:	9301      	str	r3, [sp, #4]
   d614a:	bd08      	pop	{r3, pc}
   d614c:	00030218 	.word	0x00030218

000d6150 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6150:	b508      	push	{r3, lr}
   d6152:	4b02      	ldr	r3, [pc, #8]	; (d615c <HAL_Delay_Microseconds+0xc>)
   d6154:	681b      	ldr	r3, [r3, #0]
   d6156:	68db      	ldr	r3, [r3, #12]
   d6158:	9301      	str	r3, [sp, #4]
   d615a:	bd08      	pop	{r3, pc}
   d615c:	00030218 	.word	0x00030218

000d6160 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6160:	b508      	push	{r3, lr}
   d6162:	4b02      	ldr	r3, [pc, #8]	; (d616c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6164:	681b      	ldr	r3, [r3, #0]
   d6166:	695b      	ldr	r3, [r3, #20]
   d6168:	9301      	str	r3, [sp, #4]
   d616a:	bd08      	pop	{r3, pc}
   d616c:	00030218 	.word	0x00030218

000d6170 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6170:	b508      	push	{r3, lr}
   d6172:	4b02      	ldr	r3, [pc, #8]	; (d617c <os_thread_is_current+0xc>)
   d6174:	681b      	ldr	r3, [r3, #0]
   d6176:	689b      	ldr	r3, [r3, #8]
   d6178:	9301      	str	r3, [sp, #4]
   d617a:	bd08      	pop	{r3, pc}
   d617c:	00030248 	.word	0x00030248

000d6180 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6180:	b508      	push	{r3, lr}
   d6182:	4b02      	ldr	r3, [pc, #8]	; (d618c <os_thread_join+0xc>)
   d6184:	681b      	ldr	r3, [r3, #0]
   d6186:	691b      	ldr	r3, [r3, #16]
   d6188:	9301      	str	r3, [sp, #4]
   d618a:	bd08      	pop	{r3, pc}
   d618c:	00030248 	.word	0x00030248

000d6190 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6190:	b508      	push	{r3, lr}
   d6192:	4b02      	ldr	r3, [pc, #8]	; (d619c <os_thread_cleanup+0xc>)
   d6194:	681b      	ldr	r3, [r3, #0]
   d6196:	695b      	ldr	r3, [r3, #20]
   d6198:	9301      	str	r3, [sp, #4]
   d619a:	bd08      	pop	{r3, pc}
   d619c:	00030248 	.word	0x00030248

000d61a0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d61a0:	b508      	push	{r3, lr}
   d61a2:	4b02      	ldr	r3, [pc, #8]	; (d61ac <os_mutex_create+0xc>)
   d61a4:	681b      	ldr	r3, [r3, #0]
   d61a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61a8:	9301      	str	r3, [sp, #4]
   d61aa:	bd08      	pop	{r3, pc}
   d61ac:	00030248 	.word	0x00030248

000d61b0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d61b0:	b508      	push	{r3, lr}
   d61b2:	4b02      	ldr	r3, [pc, #8]	; (d61bc <os_mutex_recursive_create+0xc>)
   d61b4:	681b      	ldr	r3, [r3, #0]
   d61b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d61b8:	9301      	str	r3, [sp, #4]
   d61ba:	bd08      	pop	{r3, pc}
   d61bc:	00030248 	.word	0x00030248

000d61c0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d61c0:	b508      	push	{r3, lr}
   d61c2:	4b02      	ldr	r3, [pc, #8]	; (d61cc <inet_inet_ntop+0xc>)
   d61c4:	681b      	ldr	r3, [r3, #0]
   d61c6:	695b      	ldr	r3, [r3, #20]
   d61c8:	9301      	str	r3, [sp, #4]
   d61ca:	bd08      	pop	{r3, pc}
   d61cc:	00030264 	.word	0x00030264

000d61d0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d61d0:	b508      	push	{r3, lr}
   d61d2:	4b02      	ldr	r3, [pc, #8]	; (d61dc <inet_htonl+0xc>)
   d61d4:	681b      	ldr	r3, [r3, #0]
   d61d6:	6a1b      	ldr	r3, [r3, #32]
   d61d8:	9301      	str	r3, [sp, #4]
   d61da:	bd08      	pop	{r3, pc}
   d61dc:	00030264 	.word	0x00030264

000d61e0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d61e0:	b508      	push	{r3, lr}
   d61e2:	4b02      	ldr	r3, [pc, #8]	; (d61ec <inet_htons+0xc>)
   d61e4:	681b      	ldr	r3, [r3, #0]
   d61e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d61e8:	9301      	str	r3, [sp, #4]
   d61ea:	bd08      	pop	{r3, pc}
   d61ec:	00030264 	.word	0x00030264

000d61f0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d61f0:	b508      	push	{r3, lr}
   d61f2:	4b02      	ldr	r3, [pc, #8]	; (d61fc <HAL_USART_Init+0xc>)
   d61f4:	681b      	ldr	r3, [r3, #0]
   d61f6:	681b      	ldr	r3, [r3, #0]
   d61f8:	9301      	str	r3, [sp, #4]
   d61fa:	bd08      	pop	{r3, pc}
   d61fc:	0003023c 	.word	0x0003023c

000d6200 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6200:	b508      	push	{r3, lr}
   d6202:	4b02      	ldr	r3, [pc, #8]	; (d620c <HAL_USART_Write_Data+0xc>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	68db      	ldr	r3, [r3, #12]
   d6208:	9301      	str	r3, [sp, #4]
   d620a:	bd08      	pop	{r3, pc}
   d620c:	0003023c 	.word	0x0003023c

000d6210 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6210:	b508      	push	{r3, lr}
   d6212:	4b02      	ldr	r3, [pc, #8]	; (d621c <HAL_USART_Available_Data+0xc>)
   d6214:	681b      	ldr	r3, [r3, #0]
   d6216:	691b      	ldr	r3, [r3, #16]
   d6218:	9301      	str	r3, [sp, #4]
   d621a:	bd08      	pop	{r3, pc}
   d621c:	0003023c 	.word	0x0003023c

000d6220 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6220:	b508      	push	{r3, lr}
   d6222:	4b02      	ldr	r3, [pc, #8]	; (d622c <HAL_USART_Read_Data+0xc>)
   d6224:	681b      	ldr	r3, [r3, #0]
   d6226:	695b      	ldr	r3, [r3, #20]
   d6228:	9301      	str	r3, [sp, #4]
   d622a:	bd08      	pop	{r3, pc}
   d622c:	0003023c 	.word	0x0003023c

000d6230 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6230:	b508      	push	{r3, lr}
   d6232:	4b02      	ldr	r3, [pc, #8]	; (d623c <HAL_USART_Peek_Data+0xc>)
   d6234:	681b      	ldr	r3, [r3, #0]
   d6236:	699b      	ldr	r3, [r3, #24]
   d6238:	9301      	str	r3, [sp, #4]
   d623a:	bd08      	pop	{r3, pc}
   d623c:	0003023c 	.word	0x0003023c

000d6240 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6240:	b508      	push	{r3, lr}
   d6242:	4b02      	ldr	r3, [pc, #8]	; (d624c <HAL_USART_Flush_Data+0xc>)
   d6244:	681b      	ldr	r3, [r3, #0]
   d6246:	69db      	ldr	r3, [r3, #28]
   d6248:	9301      	str	r3, [sp, #4]
   d624a:	bd08      	pop	{r3, pc}
   d624c:	0003023c 	.word	0x0003023c

000d6250 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6250:	b508      	push	{r3, lr}
   d6252:	4b02      	ldr	r3, [pc, #8]	; (d625c <HAL_USART_Is_Enabled+0xc>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	6a1b      	ldr	r3, [r3, #32]
   d6258:	9301      	str	r3, [sp, #4]
   d625a:	bd08      	pop	{r3, pc}
   d625c:	0003023c 	.word	0x0003023c

000d6260 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b02      	ldr	r3, [pc, #8]	; (d626c <HAL_USART_Available_Data_For_Write+0xc>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6268:	9301      	str	r3, [sp, #4]
   d626a:	bd08      	pop	{r3, pc}
   d626c:	0003023c 	.word	0x0003023c

000d6270 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6270:	b508      	push	{r3, lr}
   d6272:	4b02      	ldr	r3, [pc, #8]	; (d627c <HAL_I2C_Begin+0xc>)
   d6274:	681b      	ldr	r3, [r3, #0]
   d6276:	68db      	ldr	r3, [r3, #12]
   d6278:	9301      	str	r3, [sp, #4]
   d627a:	bd08      	pop	{r3, pc}
   d627c:	00030228 	.word	0x00030228

000d6280 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <HAL_I2C_Begin_Transmission+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	699b      	ldr	r3, [r3, #24]
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	00030228 	.word	0x00030228

000d6290 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b02      	ldr	r3, [pc, #8]	; (d629c <HAL_I2C_End_Transmission+0xc>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	69db      	ldr	r3, [r3, #28]
   d6298:	9301      	str	r3, [sp, #4]
   d629a:	bd08      	pop	{r3, pc}
   d629c:	00030228 	.word	0x00030228

000d62a0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b02      	ldr	r3, [pc, #8]	; (d62ac <HAL_I2C_Write_Data+0xc>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	6a1b      	ldr	r3, [r3, #32]
   d62a8:	9301      	str	r3, [sp, #4]
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	00030228 	.word	0x00030228

000d62b0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <HAL_I2C_Available_Data+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	00030228 	.word	0x00030228

000d62c0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d62c0:	b508      	push	{r3, lr}
   d62c2:	4b02      	ldr	r3, [pc, #8]	; (d62cc <HAL_I2C_Read_Data+0xc>)
   d62c4:	681b      	ldr	r3, [r3, #0]
   d62c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d62c8:	9301      	str	r3, [sp, #4]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	00030228 	.word	0x00030228

000d62d0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b02      	ldr	r3, [pc, #8]	; (d62dc <HAL_I2C_Peek_Data+0xc>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d62d8:	9301      	str	r3, [sp, #4]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	00030228 	.word	0x00030228

000d62e0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d62e0:	b508      	push	{r3, lr}
   d62e2:	4b02      	ldr	r3, [pc, #8]	; (d62ec <HAL_I2C_Flush_Data+0xc>)
   d62e4:	681b      	ldr	r3, [r3, #0]
   d62e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62e8:	9301      	str	r3, [sp, #4]
   d62ea:	bd08      	pop	{r3, pc}
   d62ec:	00030228 	.word	0x00030228

000d62f0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d62f0:	b508      	push	{r3, lr}
   d62f2:	4b02      	ldr	r3, [pc, #8]	; (d62fc <HAL_I2C_Is_Enabled+0xc>)
   d62f4:	681b      	ldr	r3, [r3, #0]
   d62f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d62f8:	9301      	str	r3, [sp, #4]
   d62fa:	bd08      	pop	{r3, pc}
   d62fc:	00030228 	.word	0x00030228

000d6300 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d6300:	b508      	push	{r3, lr}
   d6302:	4b02      	ldr	r3, [pc, #8]	; (d630c <HAL_I2C_Init+0xc>)
   d6304:	681b      	ldr	r3, [r3, #0]
   d6306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6308:	9301      	str	r3, [sp, #4]
   d630a:	bd08      	pop	{r3, pc}
   d630c:	00030228 	.word	0x00030228

000d6310 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6310:	b508      	push	{r3, lr}
   d6312:	4b02      	ldr	r3, [pc, #8]	; (d631c <sock_setsockopt+0xc>)
   d6314:	681b      	ldr	r3, [r3, #0]
   d6316:	699b      	ldr	r3, [r3, #24]
   d6318:	9301      	str	r3, [sp, #4]
   d631a:	bd08      	pop	{r3, pc}
   d631c:	00030238 	.word	0x00030238

000d6320 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6320:	b508      	push	{r3, lr}
   d6322:	4b02      	ldr	r3, [pc, #8]	; (d632c <sock_close+0xc>)
   d6324:	681b      	ldr	r3, [r3, #0]
   d6326:	69db      	ldr	r3, [r3, #28]
   d6328:	9301      	str	r3, [sp, #4]
   d632a:	bd08      	pop	{r3, pc}
   d632c:	00030238 	.word	0x00030238

000d6330 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6330:	b508      	push	{r3, lr}
   d6332:	4b02      	ldr	r3, [pc, #8]	; (d633c <sock_connect+0xc>)
   d6334:	681b      	ldr	r3, [r3, #0]
   d6336:	6a1b      	ldr	r3, [r3, #32]
   d6338:	9301      	str	r3, [sp, #4]
   d633a:	bd08      	pop	{r3, pc}
   d633c:	00030238 	.word	0x00030238

000d6340 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6340:	b508      	push	{r3, lr}
   d6342:	4b02      	ldr	r3, [pc, #8]	; (d634c <sock_recv+0xc>)
   d6344:	681b      	ldr	r3, [r3, #0]
   d6346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6348:	9301      	str	r3, [sp, #4]
   d634a:	bd08      	pop	{r3, pc}
   d634c:	00030238 	.word	0x00030238

000d6350 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6350:	b508      	push	{r3, lr}
   d6352:	4b02      	ldr	r3, [pc, #8]	; (d635c <sock_send+0xc>)
   d6354:	681b      	ldr	r3, [r3, #0]
   d6356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6358:	9301      	str	r3, [sp, #4]
   d635a:	bd08      	pop	{r3, pc}
   d635c:	00030238 	.word	0x00030238

000d6360 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6360:	b508      	push	{r3, lr}
   d6362:	4b02      	ldr	r3, [pc, #8]	; (d636c <sock_socket+0xc>)
   d6364:	681b      	ldr	r3, [r3, #0]
   d6366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6368:	9301      	str	r3, [sp, #4]
   d636a:	bd08      	pop	{r3, pc}
   d636c:	00030238 	.word	0x00030238

000d6370 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6370:	b508      	push	{r3, lr}
   d6372:	4b02      	ldr	r3, [pc, #8]	; (d637c <HAL_USB_USART_Init+0xc>)
   d6374:	681b      	ldr	r3, [r3, #0]
   d6376:	681b      	ldr	r3, [r3, #0]
   d6378:	9301      	str	r3, [sp, #4]
   d637a:	bd08      	pop	{r3, pc}
   d637c:	0003024c 	.word	0x0003024c

000d6380 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6380:	b508      	push	{r3, lr}
   d6382:	4b02      	ldr	r3, [pc, #8]	; (d638c <HAL_USB_USART_Begin+0xc>)
   d6384:	681b      	ldr	r3, [r3, #0]
   d6386:	685b      	ldr	r3, [r3, #4]
   d6388:	9301      	str	r3, [sp, #4]
   d638a:	bd08      	pop	{r3, pc}
   d638c:	0003024c 	.word	0x0003024c

000d6390 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6390:	b508      	push	{r3, lr}
   d6392:	4b02      	ldr	r3, [pc, #8]	; (d639c <HAL_USB_USART_Available_Data+0xc>)
   d6394:	681b      	ldr	r3, [r3, #0]
   d6396:	691b      	ldr	r3, [r3, #16]
   d6398:	9301      	str	r3, [sp, #4]
   d639a:	bd08      	pop	{r3, pc}
   d639c:	0003024c 	.word	0x0003024c

000d63a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d63a0:	b508      	push	{r3, lr}
   d63a2:	4b02      	ldr	r3, [pc, #8]	; (d63ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d63a4:	681b      	ldr	r3, [r3, #0]
   d63a6:	695b      	ldr	r3, [r3, #20]
   d63a8:	9301      	str	r3, [sp, #4]
   d63aa:	bd08      	pop	{r3, pc}
   d63ac:	0003024c 	.word	0x0003024c

000d63b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d63b0:	b508      	push	{r3, lr}
   d63b2:	4b02      	ldr	r3, [pc, #8]	; (d63bc <HAL_USB_USART_Receive_Data+0xc>)
   d63b4:	681b      	ldr	r3, [r3, #0]
   d63b6:	699b      	ldr	r3, [r3, #24]
   d63b8:	9301      	str	r3, [sp, #4]
   d63ba:	bd08      	pop	{r3, pc}
   d63bc:	0003024c 	.word	0x0003024c

000d63c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d63c0:	b508      	push	{r3, lr}
   d63c2:	4b02      	ldr	r3, [pc, #8]	; (d63cc <HAL_USB_USART_Send_Data+0xc>)
   d63c4:	681b      	ldr	r3, [r3, #0]
   d63c6:	69db      	ldr	r3, [r3, #28]
   d63c8:	9301      	str	r3, [sp, #4]
   d63ca:	bd08      	pop	{r3, pc}
   d63cc:	0003024c 	.word	0x0003024c

000d63d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d63d0:	b508      	push	{r3, lr}
   d63d2:	4b02      	ldr	r3, [pc, #8]	; (d63dc <HAL_USB_USART_Flush_Data+0xc>)
   d63d4:	681b      	ldr	r3, [r3, #0]
   d63d6:	6a1b      	ldr	r3, [r3, #32]
   d63d8:	9301      	str	r3, [sp, #4]
   d63da:	bd08      	pop	{r3, pc}
   d63dc:	0003024c 	.word	0x0003024c

000d63e0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d63e0:	b508      	push	{r3, lr}
   d63e2:	4b02      	ldr	r3, [pc, #8]	; (d63ec <panic_+0xc>)
   d63e4:	681b      	ldr	r3, [r3, #0]
   d63e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d63e8:	9301      	str	r3, [sp, #4]
   d63ea:	bd08      	pop	{r3, pc}
   d63ec:	00030260 	.word	0x00030260

000d63f0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d63f0:	b508      	push	{r3, lr}
   d63f2:	4b02      	ldr	r3, [pc, #8]	; (d63fc <log_message+0xc>)
   d63f4:	681b      	ldr	r3, [r3, #0]
   d63f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d63f8:	9301      	str	r3, [sp, #4]
   d63fa:	bd08      	pop	{r3, pc}
   d63fc:	00030260 	.word	0x00030260

000d6400 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6400:	b508      	push	{r3, lr}
   d6402:	4b02      	ldr	r3, [pc, #8]	; (d640c <set_system_mode+0xc>)
   d6404:	681b      	ldr	r3, [r3, #0]
   d6406:	685b      	ldr	r3, [r3, #4]
   d6408:	9301      	str	r3, [sp, #4]
   d640a:	bd08      	pop	{r3, pc}
   d640c:	00030220 	.word	0x00030220

000d6410 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6410:	b508      	push	{r3, lr}
   d6412:	4b02      	ldr	r3, [pc, #8]	; (d641c <system_delay_ms+0xc>)
   d6414:	681b      	ldr	r3, [r3, #0]
   d6416:	695b      	ldr	r3, [r3, #20]
   d6418:	9301      	str	r3, [sp, #4]
   d641a:	bd08      	pop	{r3, pc}
   d641c:	00030220 	.word	0x00030220

000d6420 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6420:	b508      	push	{r3, lr}
   d6422:	4b03      	ldr	r3, [pc, #12]	; (d6430 <system_ctrl_set_app_request_handler+0x10>)
   d6424:	681b      	ldr	r3, [r3, #0]
   d6426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d642a:	9301      	str	r3, [sp, #4]
   d642c:	bd08      	pop	{r3, pc}
   d642e:	0000      	.short	0x0000
   d6430:	00030220 	.word	0x00030220

000d6434 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6434:	b508      	push	{r3, lr}
   d6436:	4b03      	ldr	r3, [pc, #12]	; (d6444 <system_ctrl_set_result+0x10>)
   d6438:	681b      	ldr	r3, [r3, #0]
   d643a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d643e:	9301      	str	r3, [sp, #4]
   d6440:	bd08      	pop	{r3, pc}
   d6442:	0000      	.short	0x0000
   d6444:	00030220 	.word	0x00030220

000d6448 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6448:	b508      	push	{r3, lr}
   d644a:	4b02      	ldr	r3, [pc, #8]	; (d6454 <network_connect+0xc>)
   d644c:	681b      	ldr	r3, [r3, #0]
   d644e:	685b      	ldr	r3, [r3, #4]
   d6450:	9301      	str	r3, [sp, #4]
   d6452:	bd08      	pop	{r3, pc}
   d6454:	00030240 	.word	0x00030240

000d6458 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6458:	b508      	push	{r3, lr}
   d645a:	4b02      	ldr	r3, [pc, #8]	; (d6464 <network_connecting+0xc>)
   d645c:	681b      	ldr	r3, [r3, #0]
   d645e:	689b      	ldr	r3, [r3, #8]
   d6460:	9301      	str	r3, [sp, #4]
   d6462:	bd08      	pop	{r3, pc}
   d6464:	00030240 	.word	0x00030240

000d6468 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6468:	b508      	push	{r3, lr}
   d646a:	4b02      	ldr	r3, [pc, #8]	; (d6474 <network_disconnect+0xc>)
   d646c:	681b      	ldr	r3, [r3, #0]
   d646e:	68db      	ldr	r3, [r3, #12]
   d6470:	9301      	str	r3, [sp, #4]
   d6472:	bd08      	pop	{r3, pc}
   d6474:	00030240 	.word	0x00030240

000d6478 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6478:	b508      	push	{r3, lr}
   d647a:	4b02      	ldr	r3, [pc, #8]	; (d6484 <network_ready+0xc>)
   d647c:	681b      	ldr	r3, [r3, #0]
   d647e:	691b      	ldr	r3, [r3, #16]
   d6480:	9301      	str	r3, [sp, #4]
   d6482:	bd08      	pop	{r3, pc}
   d6484:	00030240 	.word	0x00030240

000d6488 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6488:	b508      	push	{r3, lr}
   d648a:	4b02      	ldr	r3, [pc, #8]	; (d6494 <network_on+0xc>)
   d648c:	681b      	ldr	r3, [r3, #0]
   d648e:	695b      	ldr	r3, [r3, #20]
   d6490:	9301      	str	r3, [sp, #4]
   d6492:	bd08      	pop	{r3, pc}
   d6494:	00030240 	.word	0x00030240

000d6498 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6498:	b508      	push	{r3, lr}
   d649a:	4b02      	ldr	r3, [pc, #8]	; (d64a4 <network_off+0xc>)
   d649c:	681b      	ldr	r3, [r3, #0]
   d649e:	699b      	ldr	r3, [r3, #24]
   d64a0:	9301      	str	r3, [sp, #4]
   d64a2:	bd08      	pop	{r3, pc}
   d64a4:	00030240 	.word	0x00030240

000d64a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d64a8:	b508      	push	{r3, lr}
   d64aa:	4b02      	ldr	r3, [pc, #8]	; (d64b4 <network_listen+0xc>)
   d64ac:	681b      	ldr	r3, [r3, #0]
   d64ae:	69db      	ldr	r3, [r3, #28]
   d64b0:	9301      	str	r3, [sp, #4]
   d64b2:	bd08      	pop	{r3, pc}
   d64b4:	00030240 	.word	0x00030240

000d64b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d64b8:	b508      	push	{r3, lr}
   d64ba:	4b02      	ldr	r3, [pc, #8]	; (d64c4 <network_listening+0xc>)
   d64bc:	681b      	ldr	r3, [r3, #0]
   d64be:	6a1b      	ldr	r3, [r3, #32]
   d64c0:	9301      	str	r3, [sp, #4]
   d64c2:	bd08      	pop	{r3, pc}
   d64c4:	00030240 	.word	0x00030240

000d64c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d64c8:	b508      	push	{r3, lr}
   d64ca:	4b02      	ldr	r3, [pc, #8]	; (d64d4 <network_set_listen_timeout+0xc>)
   d64cc:	681b      	ldr	r3, [r3, #0]
   d64ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d64d0:	9301      	str	r3, [sp, #4]
   d64d2:	bd08      	pop	{r3, pc}
   d64d4:	00030240 	.word	0x00030240

000d64d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d64d8:	b508      	push	{r3, lr}
   d64da:	4b02      	ldr	r3, [pc, #8]	; (d64e4 <network_get_listen_timeout+0xc>)
   d64dc:	681b      	ldr	r3, [r3, #0]
   d64de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d64e0:	9301      	str	r3, [sp, #4]
   d64e2:	bd08      	pop	{r3, pc}
   d64e4:	00030240 	.word	0x00030240

000d64e8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d64e8:	b508      	push	{r3, lr}
   d64ea:	4b02      	ldr	r3, [pc, #8]	; (d64f4 <spark_process+0xc>)
   d64ec:	681b      	ldr	r3, [r3, #0]
   d64ee:	689b      	ldr	r3, [r3, #8]
   d64f0:	9301      	str	r3, [sp, #4]
   d64f2:	bd08      	pop	{r3, pc}
   d64f4:	00030244 	.word	0x00030244

000d64f8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d64f8:	b508      	push	{r3, lr}
   d64fa:	4b02      	ldr	r3, [pc, #8]	; (d6504 <spark_set_random_seed_from_cloud_handler+0xc>)
   d64fc:	681b      	ldr	r3, [r3, #0]
   d64fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6500:	9301      	str	r3, [sp, #4]
   d6502:	bd08      	pop	{r3, pc}
   d6504:	00030244 	.word	0x00030244

000d6508 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6508:	b508      	push	{r3, lr}
   d650a:	4b02      	ldr	r3, [pc, #8]	; (d6514 <malloc+0xc>)
   d650c:	681b      	ldr	r3, [r3, #0]
   d650e:	681b      	ldr	r3, [r3, #0]
   d6510:	9301      	str	r3, [sp, #4]
   d6512:	bd08      	pop	{r3, pc}
   d6514:	0003021c 	.word	0x0003021c

000d6518 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6518:	b508      	push	{r3, lr}
   d651a:	4b02      	ldr	r3, [pc, #8]	; (d6524 <free+0xc>)
   d651c:	681b      	ldr	r3, [r3, #0]
   d651e:	685b      	ldr	r3, [r3, #4]
   d6520:	9301      	str	r3, [sp, #4]
   d6522:	bd08      	pop	{r3, pc}
   d6524:	0003021c 	.word	0x0003021c

000d6528 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6528:	b508      	push	{r3, lr}
   d652a:	4b02      	ldr	r3, [pc, #8]	; (d6534 <snprintf+0xc>)
   d652c:	681b      	ldr	r3, [r3, #0]
   d652e:	69db      	ldr	r3, [r3, #28]
   d6530:	9301      	str	r3, [sp, #4]
   d6532:	bd08      	pop	{r3, pc}
   d6534:	0003021c 	.word	0x0003021c

000d6538 <_malloc_r>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6538:	b508      	push	{r3, lr}
   d653a:	4b02      	ldr	r3, [pc, #8]	; (d6544 <_malloc_r+0xc>)
   d653c:	681b      	ldr	r3, [r3, #0]
   d653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6540:	9301      	str	r3, [sp, #4]
   d6542:	bd08      	pop	{r3, pc}
   d6544:	0003021c 	.word	0x0003021c

000d6548 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6548:	b508      	push	{r3, lr}
   d654a:	4b02      	ldr	r3, [pc, #8]	; (d6554 <__errno+0xc>)
   d654c:	681b      	ldr	r3, [r3, #0]
   d654e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6550:	9301      	str	r3, [sp, #4]
   d6552:	bd08      	pop	{r3, pc}
   d6554:	0003021c 	.word	0x0003021c

000d6558 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6558:	2200      	movs	r2, #0
   d655a:	4611      	mov	r1, r2
   d655c:	6840      	ldr	r0, [r0, #4]
   d655e:	f7ff bfab 	b.w	d64b8 <network_listening>

000d6562 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6562:	2200      	movs	r2, #0
   d6564:	4611      	mov	r1, r2
   d6566:	6840      	ldr	r0, [r0, #4]
   d6568:	f7ff bfb6 	b.w	d64d8 <network_get_listen_timeout>

000d656c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d656c:	2200      	movs	r2, #0
   d656e:	6840      	ldr	r0, [r0, #4]
   d6570:	f7ff bfaa 	b.w	d64c8 <network_set_listen_timeout>

000d6574 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6574:	2200      	movs	r2, #0
   d6576:	f081 0101 	eor.w	r1, r1, #1
   d657a:	6840      	ldr	r0, [r0, #4]
   d657c:	f7ff bf94 	b.w	d64a8 <network_listen>

000d6580 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6580:	2300      	movs	r3, #0
   d6582:	461a      	mov	r2, r3
   d6584:	4619      	mov	r1, r3
   d6586:	6840      	ldr	r0, [r0, #4]
   d6588:	f7ff bf86 	b.w	d6498 <network_off>

000d658c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d658c:	2300      	movs	r3, #0
   d658e:	461a      	mov	r2, r3
   d6590:	4619      	mov	r1, r3
   d6592:	6840      	ldr	r0, [r0, #4]
   d6594:	f7ff bf78 	b.w	d6488 <network_on>

000d6598 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6598:	2200      	movs	r2, #0
   d659a:	4611      	mov	r1, r2
   d659c:	6840      	ldr	r0, [r0, #4]
   d659e:	f7ff bf6b 	b.w	d6478 <network_ready>

000d65a2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d65a2:	2200      	movs	r2, #0
   d65a4:	4611      	mov	r1, r2
   d65a6:	6840      	ldr	r0, [r0, #4]
   d65a8:	f7ff bf56 	b.w	d6458 <network_connecting>

000d65ac <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d65ac:	2200      	movs	r2, #0
   d65ae:	2102      	movs	r1, #2
   d65b0:	6840      	ldr	r0, [r0, #4]
   d65b2:	f7ff bf59 	b.w	d6468 <network_disconnect>

000d65b6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d65b6:	2300      	movs	r3, #0
   d65b8:	461a      	mov	r2, r3
   d65ba:	6840      	ldr	r0, [r0, #4]
   d65bc:	f7ff bf44 	b.w	d6448 <network_connect>

000d65c0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d65c0:	4b02      	ldr	r3, [pc, #8]	; (d65cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d65c2:	2203      	movs	r2, #3
   d65c4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d65c6:	4a02      	ldr	r2, [pc, #8]	; (d65d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d65c8:	601a      	str	r2, [r3, #0]
   d65ca:	4770      	bx	lr
   d65cc:	2003e3cc 	.word	0x2003e3cc
   d65d0:	000dad74 	.word	0x000dad74

000d65d4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d65d4:	4770      	bx	lr

000d65d6 <_ZN8SPIClassD0Ev>:
   d65d6:	b510      	push	{r4, lr}
   d65d8:	2110      	movs	r1, #16
   d65da:	4604      	mov	r4, r0
   d65dc:	f001 f9d3 	bl	d7986 <_ZdlPvj>
   d65e0:	4620      	mov	r0, r4
   d65e2:	bd10      	pop	{r4, pc}

000d65e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d65e4:	b570      	push	{r4, r5, r6, lr}
   d65e6:	4b08      	ldr	r3, [pc, #32]	; (d6608 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d65e8:	6003      	str	r3, [r0, #0]
   d65ea:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d65ec:	2500      	movs	r5, #0
   d65ee:	460e      	mov	r6, r1
   d65f0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d65f4:	f7ff fdd4 	bl	d61a0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d65f8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d65fa:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d65fc:	f7ff fd80 	bl	d6100 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6600:	60a5      	str	r5, [r4, #8]
}
   d6602:	4620      	mov	r0, r4
   d6604:	bd70      	pop	{r4, r5, r6, pc}
   d6606:	bf00      	nop
   d6608:	000dada8 	.word	0x000dada8

000d660c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d660c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6610:	7900      	ldrb	r0, [r0, #4]
   d6612:	f7ff bd5d 	b.w	d60d0 <HAL_SPI_Begin>
	...

000d6618 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d6618:	4a05      	ldr	r2, [pc, #20]	; (d6630 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
   d661a:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d661c:	5c99      	ldrb	r1, [r3, r2]
   d661e:	4281      	cmp	r1, r0
   d6620:	d002      	beq.n	d6628 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
   d6622:	3301      	adds	r3, #1
   d6624:	2b08      	cmp	r3, #8
   d6626:	d1f9      	bne.n	d661c <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
   d6628:	1c58      	adds	r0, r3, #1
}
   d662a:	b2c0      	uxtb	r0, r0
   d662c:	4770      	bx	lr
   d662e:	bf00      	nop
   d6630:	000dadb0 	.word	0x000dadb0

000d6634 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d6634:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d6636:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d6638:	6018      	str	r0, [r3, #0]
   d663a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d663c:	6818      	ldr	r0, [r3, #0]
   d663e:	4288      	cmp	r0, r1
   d6640:	b2e5      	uxtb	r5, r4
   d6642:	d906      	bls.n	d6652 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6644:	3401      	adds	r4, #1
   d6646:	2c08      	cmp	r4, #8
   d6648:	d002      	beq.n	d6650 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d664a:	0840      	lsrs	r0, r0, #1
   d664c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d664e:	e7f5      	b.n	d663c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6650:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6652:	4b02      	ldr	r3, [pc, #8]	; (d665c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6654:	5d5b      	ldrb	r3, [r3, r5]
   d6656:	7013      	strb	r3, [r2, #0]
   d6658:	bd30      	pop	{r4, r5, pc}
   d665a:	bf00      	nop
   d665c:	000dadb0 	.word	0x000dadb0

000d6660 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6660:	b570      	push	{r4, r5, r6, lr}
   d6662:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   d6664:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   d6666:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d666a:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d666c:	2214      	movs	r2, #20
   d666e:	2100      	movs	r1, #0
   d6670:	a803      	add	r0, sp, #12
   d6672:	f001 fffc 	bl	d866e <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d6676:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d6678:	a903      	add	r1, sp, #12
   d667a:	4630      	mov	r0, r6
   d667c:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d667e:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   d6682:	f7ff fd4d 	bl	d6120 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   d6686:	ab02      	add	r3, sp, #8
   d6688:	f10d 0207 	add.w	r2, sp, #7
   d668c:	4629      	mov	r1, r5
   d668e:	9804      	ldr	r0, [sp, #16]
   d6690:	f7ff ffd0 	bl	d6634 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6694:	7920      	ldrb	r0, [r4, #4]
   d6696:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d669a:	f7ff fd21 	bl	d60e0 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   d669e:	9802      	ldr	r0, [sp, #8]
   d66a0:	b008      	add	sp, #32
   d66a2:	bd70      	pop	{r4, r5, r6, pc}

000d66a4 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d66a4:	b538      	push	{r3, r4, r5, lr}
   d66a6:	4604      	mov	r4, r0
   d66a8:	4608      	mov	r0, r1
    if (dividerReference)
   d66aa:	68a5      	ldr	r5, [r4, #8]
   d66ac:	b14d      	cbz	r5, d66c2 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
   d66ae:	f7ff ffb3 	bl	d6618 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d66b2:	2201      	movs	r2, #1
   d66b4:	fa25 f100 	lsr.w	r1, r5, r0
   d66b8:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
   d66ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d66be:	f7ff bfcf 	b.w	d6660 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d66c2:	7920      	ldrb	r0, [r4, #4]
    }
}
   d66c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d66c8:	f7ff bd0a 	b.w	d60e0 <HAL_SPI_Set_Clock_Divider>

000d66cc <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d66cc:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d66ce:	7900      	ldrb	r0, [r0, #4]
   d66d0:	f7ff fd0e 	bl	d60f0 <HAL_SPI_Send_Receive_Data>
}
   d66d4:	b2c0      	uxtb	r0, r0
   d66d6:	bd08      	pop	{r3, pc}

000d66d8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d66d8:	7900      	ldrb	r0, [r0, #4]
   d66da:	f7ff bd19 	b.w	d6110 <HAL_SPI_Is_Enabled>
	...

000d66e0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d66e0:	4b04      	ldr	r3, [pc, #16]	; (d66f4 <_GLOBAL__sub_I_System+0x14>)
   d66e2:	2000      	movs	r0, #0
   d66e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d66e8:	7018      	strb	r0, [r3, #0]
   d66ea:	8058      	strh	r0, [r3, #2]
   d66ec:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d66ee:	f7ff be87 	b.w	d6400 <set_system_mode>
   d66f2:	bf00      	nop
   d66f4:	2003e3d4 	.word	0x2003e3d4

000d66f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d66f8:	4802      	ldr	r0, [pc, #8]	; (d6704 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d66fa:	2300      	movs	r3, #0
   d66fc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d66fe:	f7ff bd57 	b.w	d61b0 <os_mutex_recursive_create>
   d6702:	bf00      	nop
   d6704:	2003e3dc 	.word	0x2003e3dc

000d6708 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d670a:	4606      	mov	r6, r0
   d670c:	460d      	mov	r5, r1
   d670e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6710:	2400      	movs	r4, #0
  while (size--) {
   d6712:	42bd      	cmp	r5, r7
   d6714:	d00c      	beq.n	d6730 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6716:	6833      	ldr	r3, [r6, #0]
   d6718:	f815 1b01 	ldrb.w	r1, [r5], #1
   d671c:	689b      	ldr	r3, [r3, #8]
   d671e:	4630      	mov	r0, r6
   d6720:	4798      	blx	r3
     if (chunk>=0)
   d6722:	2800      	cmp	r0, #0
   d6724:	db01      	blt.n	d672a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6726:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6728:	e7f3      	b.n	d6712 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d672a:	2c00      	cmp	r4, #0
   d672c:	bf08      	it	eq
   d672e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6730:	4620      	mov	r0, r4
   d6732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6734 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6734:	b570      	push	{r4, r5, r6, lr}
   d6736:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6738:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d673a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d673c:	b149      	cbz	r1, d6752 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d673e:	f001 ffd1 	bl	d86e4 <strlen>
   d6742:	682b      	ldr	r3, [r5, #0]
   d6744:	4602      	mov	r2, r0
   d6746:	4621      	mov	r1, r4
   d6748:	4628      	mov	r0, r5
   d674a:	68db      	ldr	r3, [r3, #12]
    }
   d674c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6750:	4718      	bx	r3
    }
   d6752:	bd70      	pop	{r4, r5, r6, pc}

000d6754 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6754:	6803      	ldr	r3, [r0, #0]
   d6756:	689b      	ldr	r3, [r3, #8]
   d6758:	4718      	bx	r3

000d675a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d675a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d675c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d675e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6760:	f7ff fff8 	bl	d6754 <_ZN5Print5printEc>
  n += print('\n');
   d6764:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6766:	4604      	mov	r4, r0
  n += print('\n');
   d6768:	4628      	mov	r0, r5
   d676a:	f7ff fff3 	bl	d6754 <_ZN5Print5printEc>
  return n;
}
   d676e:	4420      	add	r0, r4
   d6770:	bd38      	pop	{r3, r4, r5, pc}

000d6772 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6772:	b530      	push	{r4, r5, lr}
   d6774:	b08b      	sub	sp, #44	; 0x2c
   d6776:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6778:	2100      	movs	r1, #0
   d677a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d677e:	2a01      	cmp	r2, #1
   d6780:	bf98      	it	ls
   d6782:	220a      	movls	r2, #10
   d6784:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6788:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d678c:	fb05 3312 	mls	r3, r5, r2, r3
   d6790:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6794:	2b09      	cmp	r3, #9
   d6796:	bf94      	ite	ls
   d6798:	3330      	addls	r3, #48	; 0x30
   d679a:	3337      	addhi	r3, #55	; 0x37
   d679c:	b2db      	uxtb	r3, r3
   d679e:	4621      	mov	r1, r4
   d67a0:	f804 3901 	strb.w	r3, [r4], #-1
   d67a4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d67a6:	2d00      	cmp	r5, #0
   d67a8:	d1ee      	bne.n	d6788 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d67aa:	f7ff ffc3 	bl	d6734 <_ZN5Print5writeEPKc>
}
   d67ae:	b00b      	add	sp, #44	; 0x2c
   d67b0:	bd30      	pop	{r4, r5, pc}

000d67b2 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d67b2:	b410      	push	{r4}
  if (base == 0) return write(n);
   d67b4:	b92a      	cbnz	r2, d67c2 <_ZN5Print5printEmi+0x10>
   d67b6:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d67b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d67bc:	689b      	ldr	r3, [r3, #8]
   d67be:	b2c9      	uxtb	r1, r1
   d67c0:	4718      	bx	r3
  else return printNumber(n, base);
   d67c2:	b2d2      	uxtb	r2, r2
}
   d67c4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d67c8:	f7ff bfd3 	b.w	d6772 <_ZN5Print11printNumberEmh>

000d67cc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d67cc:	f7ff bff1 	b.w	d67b2 <_ZN5Print5printEmi>

000d67d0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d67d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d67d4:	4607      	mov	r7, r0
   d67d6:	460e      	mov	r6, r1
  if (base == 0) {
   d67d8:	4615      	mov	r5, r2
   d67da:	b92a      	cbnz	r2, d67e8 <_ZN5Print5printEli+0x18>
    return write(n);
   d67dc:	6803      	ldr	r3, [r0, #0]
   d67de:	b2c9      	uxtb	r1, r1
   d67e0:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d67e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d67e6:	4718      	bx	r3
  } else if (base == 10) {
   d67e8:	2a0a      	cmp	r2, #10
   d67ea:	d102      	bne.n	d67f2 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d67ec:	2900      	cmp	r1, #0
   d67ee:	da01      	bge.n	d67f4 <_ZN5Print5printEli+0x24>
   d67f0:	e004      	b.n	d67fc <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d67f2:	b2d2      	uxtb	r2, r2
  }
}
   d67f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d67f8:	f7ff bfbb 	b.w	d6772 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d67fc:	212d      	movs	r1, #45	; 0x2d
   d67fe:	f7ff ffa9 	bl	d6754 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6802:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6804:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d6806:	4271      	negs	r1, r6
   d6808:	4638      	mov	r0, r7
   d680a:	f7ff ffb2 	bl	d6772 <_ZN5Print11printNumberEmh>
   d680e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6814 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6818:	ec57 6b10 	vmov	r6, r7, d0
   d681c:	4682      	mov	sl, r0
   d681e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6820:	ee10 2a10 	vmov	r2, s0
   d6824:	463b      	mov	r3, r7
   d6826:	ee10 0a10 	vmov	r0, s0
   d682a:	4639      	mov	r1, r7
   d682c:	f001 fe48 	bl	d84c0 <__aeabi_dcmpun>
   d6830:	b108      	cbz	r0, d6836 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6832:	4948      	ldr	r1, [pc, #288]	; (d6954 <_ZN5Print10printFloatEdh+0x140>)
   d6834:	e012      	b.n	d685c <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6836:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d683a:	f04f 32ff 	mov.w	r2, #4294967295
   d683e:	4b46      	ldr	r3, [pc, #280]	; (d6958 <_ZN5Print10printFloatEdh+0x144>)
   d6840:	4630      	mov	r0, r6
   d6842:	4649      	mov	r1, r9
   d6844:	f001 fe3c 	bl	d84c0 <__aeabi_dcmpun>
   d6848:	b968      	cbnz	r0, d6866 <_ZN5Print10printFloatEdh+0x52>
   d684a:	f04f 32ff 	mov.w	r2, #4294967295
   d684e:	4b42      	ldr	r3, [pc, #264]	; (d6958 <_ZN5Print10printFloatEdh+0x144>)
   d6850:	4630      	mov	r0, r6
   d6852:	4649      	mov	r1, r9
   d6854:	f001 fe16 	bl	d8484 <__aeabi_dcmple>
   d6858:	b928      	cbnz	r0, d6866 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d685a:	4940      	ldr	r1, [pc, #256]	; (d695c <_ZN5Print10printFloatEdh+0x148>)
   d685c:	4650      	mov	r0, sl
   d685e:	f7ff ff69 	bl	d6734 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d6866:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d686a:	4b3d      	ldr	r3, [pc, #244]	; (d6960 <_ZN5Print10printFloatEdh+0x14c>)
   d686c:	4630      	mov	r0, r6
   d686e:	4639      	mov	r1, r7
   d6870:	f001 fe1c 	bl	d84ac <__aeabi_dcmpgt>
   d6874:	b108      	cbz	r0, d687a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6876:	493b      	ldr	r1, [pc, #236]	; (d6964 <_ZN5Print10printFloatEdh+0x150>)
   d6878:	e7f0      	b.n	d685c <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d687a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d687e:	4b3a      	ldr	r3, [pc, #232]	; (d6968 <_ZN5Print10printFloatEdh+0x154>)
   d6880:	4630      	mov	r0, r6
   d6882:	4639      	mov	r1, r7
   d6884:	f001 fdf4 	bl	d8470 <__aeabi_dcmplt>
   d6888:	2800      	cmp	r0, #0
   d688a:	d1f4      	bne.n	d6876 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d688c:	2200      	movs	r2, #0
   d688e:	2300      	movs	r3, #0
   d6890:	4630      	mov	r0, r6
   d6892:	4639      	mov	r1, r7
   d6894:	f001 fdec 	bl	d8470 <__aeabi_dcmplt>
   d6898:	b140      	cbz	r0, d68ac <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d689a:	212d      	movs	r1, #45	; 0x2d
   d689c:	4650      	mov	r0, sl
   d689e:	f7ff ff59 	bl	d6754 <_ZN5Print5printEc>
     number = -number;
   d68a2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d68a6:	4604      	mov	r4, r0
     number = -number;
   d68a8:	461f      	mov	r7, r3
   d68aa:	e000      	b.n	d68ae <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d68ac:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d68ae:	492f      	ldr	r1, [pc, #188]	; (d696c <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d68b0:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d68b4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d68b6:	fa5f f388 	uxtb.w	r3, r8
   d68ba:	429d      	cmp	r5, r3
   d68bc:	d906      	bls.n	d68cc <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d68be:	2200      	movs	r2, #0
   d68c0:	4b2b      	ldr	r3, [pc, #172]	; (d6970 <_ZN5Print10printFloatEdh+0x15c>)
   d68c2:	f001 fc8d 	bl	d81e0 <__aeabi_ddiv>
   d68c6:	f108 0801 	add.w	r8, r8, #1
   d68ca:	e7f4      	b.n	d68b6 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d68cc:	4632      	mov	r2, r6
   d68ce:	463b      	mov	r3, r7
   d68d0:	f001 f9aa 	bl	d7c28 <__adddf3>
   d68d4:	460f      	mov	r7, r1
   d68d6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d68d8:	f001 fe30 	bl	d853c <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d68dc:	220a      	movs	r2, #10
   d68de:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d68e0:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d68e2:	4650      	mov	r0, sl
   d68e4:	f7ff ff45 	bl	d6772 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d68e8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d68ea:	b37d      	cbz	r5, d694c <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d68ec:	4640      	mov	r0, r8
   d68ee:	f001 fad7 	bl	d7ea0 <__aeabi_ui2d>
   d68f2:	4602      	mov	r2, r0
   d68f4:	460b      	mov	r3, r1
   d68f6:	4630      	mov	r0, r6
   d68f8:	4639      	mov	r1, r7
   d68fa:	f001 f993 	bl	d7c24 <__aeabi_dsub>
   d68fe:	4606      	mov	r6, r0
   d6900:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6902:	4650      	mov	r0, sl
   d6904:	491b      	ldr	r1, [pc, #108]	; (d6974 <_ZN5Print10printFloatEdh+0x160>)
   d6906:	f7ff ff15 	bl	d6734 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d690a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d690c:	4b18      	ldr	r3, [pc, #96]	; (d6970 <_ZN5Print10printFloatEdh+0x15c>)
   d690e:	2200      	movs	r2, #0
   d6910:	4630      	mov	r0, r6
   d6912:	4639      	mov	r1, r7
   d6914:	f001 fb3a 	bl	d7f8c <__aeabi_dmul>
   d6918:	460f      	mov	r7, r1
   d691a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d691c:	f001 fde6 	bl	d84ec <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6920:	220a      	movs	r2, #10
   d6922:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d6924:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6926:	4650      	mov	r0, sl
   d6928:	f7ff ff52 	bl	d67d0 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d692c:	4404      	add	r4, r0
    remainder -= toPrint;
   d692e:	4640      	mov	r0, r8
   d6930:	f001 fac6 	bl	d7ec0 <__aeabi_i2d>
   d6934:	4602      	mov	r2, r0
   d6936:	460b      	mov	r3, r1
   d6938:	4630      	mov	r0, r6
   d693a:	4639      	mov	r1, r7
   d693c:	f001 f972 	bl	d7c24 <__aeabi_dsub>
   d6940:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6942:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d6946:	4606      	mov	r6, r0
   d6948:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d694a:	d1df      	bne.n	d690c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d694c:	4620      	mov	r0, r4
   d694e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6952:	bf00      	nop
   d6954:	000dadb8 	.word	0x000dadb8
   d6958:	7fefffff 	.word	0x7fefffff
   d695c:	000dadc2 	.word	0x000dadc2
   d6960:	41efffff 	.word	0x41efffff
   d6964:	000dadbc 	.word	0x000dadbc
   d6968:	c1efffff 	.word	0xc1efffff
   d696c:	3fe00000 	.word	0x3fe00000
   d6970:	40240000 	.word	0x40240000
   d6974:	000dadc0 	.word	0x000dadc0

000d6978 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d6978:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d697a:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d697c:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d697e:	f7ff ff49 	bl	d6814 <_ZN5Print10printFloatEdh>
   d6982:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d6984:	4628      	mov	r0, r5
   d6986:	f7ff fee8 	bl	d675a <_ZN5Print7printlnEv>
  return n;
}
   d698a:	4420      	add	r0, r4
   d698c:	bd38      	pop	{r3, r4, r5, pc}

000d698e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d698e:	b510      	push	{r4, lr}
   d6990:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6992:	f7ff fbe5 	bl	d6160 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6996:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6998:	6823      	ldr	r3, [r4, #0]
   d699a:	4620      	mov	r0, r4
   d699c:	695b      	ldr	r3, [r3, #20]
   d699e:	4798      	blx	r3
    if (c >= 0) return c;
   d69a0:	2800      	cmp	r0, #0
   d69a2:	da08      	bge.n	d69b6 <_ZN6Stream9timedReadEv+0x28>
   d69a4:	f7ff fbdc 	bl	d6160 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d69a8:	68e3      	ldr	r3, [r4, #12]
   d69aa:	1ac0      	subs	r0, r0, r3
   d69ac:	68a3      	ldr	r3, [r4, #8]
   d69ae:	4298      	cmp	r0, r3
   d69b0:	d3f2      	bcc.n	d6998 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d69b2:	f04f 30ff 	mov.w	r0, #4294967295
}
   d69b6:	bd10      	pop	{r4, pc}

000d69b8 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d69b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d69bc:	4680      	mov	r8, r0
   d69be:	460d      	mov	r5, r1
   d69c0:	188f      	adds	r7, r1, r2
   d69c2:	460c      	mov	r4, r1
  size_t count = 0;
  while (count < length) {
   d69c4:	42bc      	cmp	r4, r7
   d69c6:	eba4 0605 	sub.w	r6, r4, r5
   d69ca:	d007      	beq.n	d69dc <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   d69cc:	4640      	mov	r0, r8
   d69ce:	f7ff ffde 	bl	d698e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d69d2:	2800      	cmp	r0, #0
   d69d4:	db02      	blt.n	d69dc <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   d69d6:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
   d69da:	e7f3      	b.n	d69c4 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
   d69dc:	4630      	mov	r0, r6
   d69de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d69e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d69e4:	4b01      	ldr	r3, [pc, #4]	; (d69ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d69e6:	4a02      	ldr	r2, [pc, #8]	; (d69f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d69e8:	601a      	str	r2, [r3, #0]
   d69ea:	4770      	bx	lr
   d69ec:	2003e3e0 	.word	0x2003e3e0
   d69f0:	000dae76 	.word	0x000dae76

000d69f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d69f4:	4b02      	ldr	r3, [pc, #8]	; (d6a00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d69f6:	681a      	ldr	r2, [r3, #0]
   d69f8:	4b02      	ldr	r3, [pc, #8]	; (d6a04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d69fa:	601a      	str	r2, [r3, #0]
   d69fc:	4770      	bx	lr
   d69fe:	bf00      	nop
   d6a00:	2003e034 	.word	0x2003e034
   d6a04:	2003e3e4 	.word	0x2003e3e4

000d6a08 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6a08:	2100      	movs	r1, #0
   d6a0a:	f7ff bd01 	b.w	d6410 <system_delay_ms>

000d6a0e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6a0e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6a10:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6a12:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6a14:	b113      	cbz	r3, d6a1c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6a16:	2203      	movs	r2, #3
   d6a18:	4601      	mov	r1, r0
   d6a1a:	4798      	blx	r3
    }
   d6a1c:	4620      	mov	r0, r4
   d6a1e:	bd10      	pop	{r4, pc}

000d6a20 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6a20:	b510      	push	{r4, lr}
   d6a22:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6a24:	f7ff fff3 	bl	d6a0e <_ZNSt14_Function_baseD1Ev>
   d6a28:	4620      	mov	r0, r4
   d6a2a:	bd10      	pop	{r4, pc}

000d6a2c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6a2c:	4803      	ldr	r0, [pc, #12]	; (d6a3c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6a2e:	4a04      	ldr	r2, [pc, #16]	; (d6a40 <_GLOBAL__sub_I_RGB+0x14>)
   d6a30:	4904      	ldr	r1, [pc, #16]	; (d6a44 <_GLOBAL__sub_I_RGB+0x18>)
   d6a32:	2300      	movs	r3, #0
   d6a34:	6083      	str	r3, [r0, #8]
   d6a36:	f000 bfa1 	b.w	d797c <__aeabi_atexit>
   d6a3a:	bf00      	nop
   d6a3c:	2003e3e8 	.word	0x2003e3e8
   d6a40:	2003e0d8 	.word	0x2003e0d8
   d6a44:	000d6a21 	.word	0x000d6a21

000d6a48 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6a48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6a4a:	4b0c      	ldr	r3, [pc, #48]	; (d6a7c <serialEventRun+0x34>)
   d6a4c:	b133      	cbz	r3, d6a5c <serialEventRun+0x14>
   d6a4e:	f000 f95d 	bl	d6d0c <_Z16_fetch_usbserialv>
   d6a52:	6803      	ldr	r3, [r0, #0]
   d6a54:	691b      	ldr	r3, [r3, #16]
   d6a56:	4798      	blx	r3
   d6a58:	2800      	cmp	r0, #0
   d6a5a:	dc09      	bgt.n	d6a70 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6a5c:	4b08      	ldr	r3, [pc, #32]	; (d6a80 <serialEventRun+0x38>)
   d6a5e:	b163      	cbz	r3, d6a7a <serialEventRun+0x32>
   d6a60:	f000 f9d6 	bl	d6e10 <_Z22__fetch_global_Serial1v>
   d6a64:	6803      	ldr	r3, [r0, #0]
   d6a66:	691b      	ldr	r3, [r3, #16]
   d6a68:	4798      	blx	r3
   d6a6a:	2800      	cmp	r0, #0
   d6a6c:	dc03      	bgt.n	d6a76 <serialEventRun+0x2e>
   d6a6e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6a70:	f3af 8000 	nop.w
   d6a74:	e7f2      	b.n	d6a5c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6a76:	f3af 8000 	nop.w
   d6a7a:	bd08      	pop	{r3, pc}
	...

000d6a84 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6a84:	b508      	push	{r3, lr}
	serialEventRun();
   d6a86:	f7ff ffdf 	bl	d6a48 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6a8a:	f7ff fb69 	bl	d6160 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6a8e:	4b01      	ldr	r3, [pc, #4]	; (d6a94 <_post_loop+0x10>)
   d6a90:	6018      	str	r0, [r3, #0]
   d6a92:	bd08      	pop	{r3, pc}
   d6a94:	2003e734 	.word	0x2003e734

000d6a98 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6a98:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6a9a:	2300      	movs	r3, #0
   d6a9c:	9300      	str	r3, [sp, #0]
   d6a9e:	461a      	mov	r2, r3
   d6aa0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6aa4:	f7ff fcc6 	bl	d6434 <system_ctrl_set_result>
}
   d6aa8:	b003      	add	sp, #12
   d6aaa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6ab0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6ab0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6ab2:	8843      	ldrh	r3, [r0, #2]
   d6ab4:	2b0a      	cmp	r3, #10
   d6ab6:	d008      	beq.n	d6aca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6ab8:	2b50      	cmp	r3, #80	; 0x50
   d6aba:	d109      	bne.n	d6ad0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6abc:	4b09      	ldr	r3, [pc, #36]	; (d6ae4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6abe:	681b      	ldr	r3, [r3, #0]
   d6ac0:	b13b      	cbz	r3, d6ad2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6ac2:	b003      	add	sp, #12
   d6ac4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6ac8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6aca:	f7ff ffe5 	bl	d6a98 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6ace:	e006      	b.n	d6ade <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6ad0:	2300      	movs	r3, #0
   d6ad2:	9300      	str	r3, [sp, #0]
   d6ad4:	461a      	mov	r2, r3
   d6ad6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6ada:	f7ff fcab 	bl	d6434 <system_ctrl_set_result>
        break;
    }
}
   d6ade:	b003      	add	sp, #12
   d6ae0:	f85d fb04 	ldr.w	pc, [sp], #4
   d6ae4:	2003e3f8 	.word	0x2003e3f8

000d6ae8 <module_user_init_hook>:

void module_user_init_hook()
{
   d6ae8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6aea:	f7ff fb29 	bl	d6140 <HAL_RNG_GetRandomNumber>
   d6aee:	4604      	mov	r4, r0
    srand(seed);
   d6af0:	f001 fdc6 	bl	d8680 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6af4:	4b07      	ldr	r3, [pc, #28]	; (d6b14 <module_user_init_hook+0x2c>)
   d6af6:	b113      	cbz	r3, d6afe <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6af8:	4620      	mov	r0, r4
   d6afa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6afe:	2100      	movs	r1, #0
   d6b00:	4804      	ldr	r0, [pc, #16]	; (d6b14 <module_user_init_hook+0x2c>)
   d6b02:	f7ff fcf9 	bl	d64f8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b06:	2100      	movs	r1, #0
   d6b08:	4803      	ldr	r0, [pc, #12]	; (d6b18 <module_user_init_hook+0x30>)
}
   d6b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b0e:	f7ff bc87 	b.w	d6420 <system_ctrl_set_app_request_handler>
   d6b12:	bf00      	nop
   d6b14:	00000000 	.word	0x00000000
   d6b18:	000d6ab1 	.word	0x000d6ab1

000d6b1c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6b1c:	4770      	bx	lr

000d6b1e <_ZN9IPAddressD0Ev>:
   d6b1e:	b510      	push	{r4, lr}
   d6b20:	2118      	movs	r1, #24
   d6b22:	4604      	mov	r4, r0
   d6b24:	f000 ff2f 	bl	d7986 <_ZdlPvj>
   d6b28:	4620      	mov	r0, r4
   d6b2a:	bd10      	pop	{r4, pc}

000d6b2c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b2e:	7d03      	ldrb	r3, [r0, #20]
   d6b30:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6b32:	b08d      	sub	sp, #52	; 0x34
   d6b34:	460e      	mov	r6, r1
   d6b36:	f100 0704 	add.w	r7, r0, #4
   d6b3a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6b3e:	d002      	beq.n	d6b46 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6b40:	f100 0508 	add.w	r5, r0, #8
   d6b44:	e018      	b.n	d6b78 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6b46:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b48:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6b4a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6b4e:	232f      	movs	r3, #47	; 0x2f
   d6b50:	462a      	mov	r2, r5
   d6b52:	200a      	movs	r0, #10
   d6b54:	f7ff fb34 	bl	d61c0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6b58:	4628      	mov	r0, r5
   d6b5a:	f001 fdc3 	bl	d86e4 <strlen>
   d6b5e:	6833      	ldr	r3, [r6, #0]
   d6b60:	4602      	mov	r2, r0
   d6b62:	68db      	ldr	r3, [r3, #12]
   d6b64:	4629      	mov	r1, r5
   d6b66:	4630      	mov	r0, r6
   d6b68:	4798      	blx	r3
   d6b6a:	e00f      	b.n	d6b8c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6b6c:	b124      	cbz	r4, d6b78 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6b6e:	212e      	movs	r1, #46	; 0x2e
   d6b70:	4630      	mov	r0, r6
   d6b72:	f7ff fdef 	bl	d6754 <_ZN5Print5printEc>
   d6b76:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6b78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6b7c:	220a      	movs	r2, #10
   d6b7e:	4630      	mov	r0, r6
   d6b80:	f7ff fe24 	bl	d67cc <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6b84:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6b86:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6b88:	d1f0      	bne.n	d6b6c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6b8a:	4620      	mov	r0, r4
    }
    return n;
}
   d6b8c:	b00d      	add	sp, #52	; 0x34
   d6b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6b90 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6b90:	b510      	push	{r4, lr}
   d6b92:	4b05      	ldr	r3, [pc, #20]	; (d6ba8 <_ZN9IPAddressC1Ev+0x18>)
   d6b94:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6b96:	2211      	movs	r2, #17
   d6b98:	f840 3b04 	str.w	r3, [r0], #4
   d6b9c:	2100      	movs	r1, #0
   d6b9e:	f001 fd66 	bl	d866e <memset>
{
    clear();
}
   d6ba2:	4620      	mov	r0, r4
   d6ba4:	bd10      	pop	{r4, pc}
   d6ba6:	bf00      	nop
   d6ba8:	000daed0 	.word	0x000daed0

000d6bac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6bac:	4603      	mov	r3, r0
   d6bae:	4a07      	ldr	r2, [pc, #28]	; (d6bcc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6bb0:	b510      	push	{r4, lr}
   d6bb2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6bb6:	f101 0210 	add.w	r2, r1, #16
   d6bba:	f851 4b04 	ldr.w	r4, [r1], #4
   d6bbe:	f843 4b04 	str.w	r4, [r3], #4
   d6bc2:	4291      	cmp	r1, r2
   d6bc4:	d1f9      	bne.n	d6bba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6bc6:	780a      	ldrb	r2, [r1, #0]
   d6bc8:	701a      	strb	r2, [r3, #0]
}
   d6bca:	bd10      	pop	{r4, pc}
   d6bcc:	000daed0 	.word	0x000daed0

000d6bd0 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6bd0:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6bd2:	2b04      	cmp	r3, #4
   d6bd4:	d101      	bne.n	d6bda <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6bd6:	6840      	ldr	r0, [r0, #4]
   d6bd8:	e008      	b.n	d6bec <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6bda:	2b06      	cmp	r3, #6
   d6bdc:	d10a      	bne.n	d6bf4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d6bde:	6843      	ldr	r3, [r0, #4]
   d6be0:	b153      	cbz	r3, d6bf8 <_ZNK9IPAddresscvbEv+0x28>
   d6be2:	6883      	ldr	r3, [r0, #8]
   d6be4:	b143      	cbz	r3, d6bf8 <_ZNK9IPAddresscvbEv+0x28>
   d6be6:	68c3      	ldr	r3, [r0, #12]
   d6be8:	b133      	cbz	r3, d6bf8 <_ZNK9IPAddresscvbEv+0x28>
   d6bea:	6900      	ldr	r0, [r0, #16]
   d6bec:	3000      	adds	r0, #0
   d6bee:	bf18      	it	ne
   d6bf0:	2001      	movne	r0, #1
   d6bf2:	4770      	bx	lr
   d6bf4:	2000      	movs	r0, #0
   d6bf6:	4770      	bx	lr
   d6bf8:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d6bfa:	4770      	bx	lr

000d6bfc <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6bfc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6bfe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6c02:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6c06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6c0a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6c0e:	2304      	movs	r3, #4
   d6c10:	6041      	str	r1, [r0, #4]
   d6c12:	7503      	strb	r3, [r0, #20]
   d6c14:	bd10      	pop	{r4, pc}
	...

000d6c18 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d6c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6c1a:	4d04      	ldr	r5, [pc, #16]	; (d6c2c <_ZN9IPAddressC1Ehhhh+0x14>)
   d6c1c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d6c1e:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d6c22:	9500      	str	r5, [sp, #0]
   d6c24:	f7ff ffea 	bl	d6bfc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6c28:	b003      	add	sp, #12
   d6c2a:	bd30      	pop	{r4, r5, pc}
   d6c2c:	000daed0 	.word	0x000daed0

000d6c30 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6c30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6c32:	780d      	ldrb	r5, [r1, #0]
   d6c34:	788b      	ldrb	r3, [r1, #2]
   d6c36:	784a      	ldrb	r2, [r1, #1]
   d6c38:	78c9      	ldrb	r1, [r1, #3]
   d6c3a:	9100      	str	r1, [sp, #0]
   d6c3c:	4629      	mov	r1, r5
   d6c3e:	f7ff ffdd 	bl	d6bfc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6c42:	b003      	add	sp, #12
   d6c44:	bd30      	pop	{r4, r5, pc}

000d6c46 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6c46:	7441      	strb	r1, [r0, #17]
   d6c48:	4770      	bx	lr

000d6c4a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6c4a:	4770      	bx	lr

000d6c4c <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6c4c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6c4e:	2100      	movs	r1, #0
   d6c50:	7c00      	ldrb	r0, [r0, #16]
   d6c52:	f7ff fbad 	bl	d63b0 <HAL_USB_USART_Receive_Data>
}
   d6c56:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c5a:	bf28      	it	cs
   d6c5c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c60:	bd08      	pop	{r3, pc}

000d6c62 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6c62:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6c64:	2101      	movs	r1, #1
   d6c66:	7c00      	ldrb	r0, [r0, #16]
   d6c68:	f7ff fba2 	bl	d63b0 <HAL_USB_USART_Receive_Data>
}
   d6c6c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6c70:	bf28      	it	cs
   d6c72:	f04f 30ff 	movcs.w	r0, #4294967295
   d6c76:	bd08      	pop	{r3, pc}

000d6c78 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6c78:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6c7a:	7c00      	ldrb	r0, [r0, #16]
   d6c7c:	f7ff fb90 	bl	d63a0 <HAL_USB_USART_Available_Data_For_Write>
}
   d6c80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c84:	bd08      	pop	{r3, pc}

000d6c86 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6c86:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6c88:	7c00      	ldrb	r0, [r0, #16]
   d6c8a:	f7ff fb81 	bl	d6390 <HAL_USB_USART_Available_Data>
}
   d6c8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6c92:	bd08      	pop	{r3, pc}

000d6c94 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6c94:	7c00      	ldrb	r0, [r0, #16]
   d6c96:	f7ff bb9b 	b.w	d63d0 <HAL_USB_USART_Flush_Data>

000d6c9a <_ZN9USBSerialD0Ev>:
   d6c9a:	b510      	push	{r4, lr}
   d6c9c:	2114      	movs	r1, #20
   d6c9e:	4604      	mov	r4, r0
   d6ca0:	f000 fe71 	bl	d7986 <_ZdlPvj>
   d6ca4:	4620      	mov	r0, r4
   d6ca6:	bd10      	pop	{r4, pc}

000d6ca8 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6ca8:	b538      	push	{r3, r4, r5, lr}
   d6caa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6cac:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6cae:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6cb0:	f7ff fb76 	bl	d63a0 <HAL_USB_USART_Available_Data_For_Write>
   d6cb4:	2800      	cmp	r0, #0
   d6cb6:	dc01      	bgt.n	d6cbc <_ZN9USBSerial5writeEh+0x14>
   d6cb8:	7c60      	ldrb	r0, [r4, #17]
   d6cba:	b128      	cbz	r0, d6cc8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6cbc:	4629      	mov	r1, r5
   d6cbe:	7c20      	ldrb	r0, [r4, #16]
   d6cc0:	f7ff fb7e 	bl	d63c0 <HAL_USB_USART_Send_Data>
   d6cc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6cc8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6ccc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6ccc:	b510      	push	{r4, lr}
   d6cce:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6cd0:	2300      	movs	r3, #0
   d6cd2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6cd8:	60a3      	str	r3, [r4, #8]
   d6cda:	4b05      	ldr	r3, [pc, #20]	; (d6cf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6cdc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6cde:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6ce0:	4608      	mov	r0, r1
{
  _serial = serial;
   d6ce2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6ce4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6ce6:	4611      	mov	r1, r2
   d6ce8:	f7ff fb42 	bl	d6370 <HAL_USB_USART_Init>
}
   d6cec:	4620      	mov	r0, r4
   d6cee:	bd10      	pop	{r4, pc}
   d6cf0:	000daee4 	.word	0x000daee4

000d6cf4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6cf4:	2200      	movs	r2, #0
   d6cf6:	7c00      	ldrb	r0, [r0, #16]
   d6cf8:	f7ff bb42 	b.w	d6380 <HAL_USB_USART_Begin>

000d6cfc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6cfc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6cfe:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6d00:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6d02:	2100      	movs	r1, #0
   d6d04:	f001 fcb3 	bl	d866e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6d08:	4620      	mov	r0, r4
   d6d0a:	bd10      	pop	{r4, pc}

000d6d0c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6d0c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d0e:	4d0e      	ldr	r5, [pc, #56]	; (d6d48 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6d10:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6d12:	a801      	add	r0, sp, #4
   d6d14:	f7ff fff2 	bl	d6cfc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6d18:	6829      	ldr	r1, [r5, #0]
   d6d1a:	f011 0401 	ands.w	r4, r1, #1
   d6d1e:	d110      	bne.n	d6d42 <_Z16_fetch_usbserialv+0x36>
   d6d20:	4628      	mov	r0, r5
   d6d22:	f7fd f9cb 	bl	d40bc <__cxa_guard_acquire>
   d6d26:	b160      	cbz	r0, d6d42 <_Z16_fetch_usbserialv+0x36>
   d6d28:	aa01      	add	r2, sp, #4
   d6d2a:	4621      	mov	r1, r4
   d6d2c:	4807      	ldr	r0, [pc, #28]	; (d6d4c <_Z16_fetch_usbserialv+0x40>)
   d6d2e:	f7ff ffcd 	bl	d6ccc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6d32:	4628      	mov	r0, r5
   d6d34:	f7fd f9c7 	bl	d40c6 <__cxa_guard_release>
   d6d38:	4a05      	ldr	r2, [pc, #20]	; (d6d50 <_Z16_fetch_usbserialv+0x44>)
   d6d3a:	4906      	ldr	r1, [pc, #24]	; (d6d54 <_Z16_fetch_usbserialv+0x48>)
   d6d3c:	4803      	ldr	r0, [pc, #12]	; (d6d4c <_Z16_fetch_usbserialv+0x40>)
   d6d3e:	f000 fe1d 	bl	d797c <__aeabi_atexit>
	return _usbserial;
}
   d6d42:	4802      	ldr	r0, [pc, #8]	; (d6d4c <_Z16_fetch_usbserialv+0x40>)
   d6d44:	b007      	add	sp, #28
   d6d46:	bd30      	pop	{r4, r5, pc}
   d6d48:	2003e3fc 	.word	0x2003e3fc
   d6d4c:	2003e400 	.word	0x2003e400
   d6d50:	2003e0d8 	.word	0x2003e0d8
   d6d54:	000d6c4b 	.word	0x000d6c4b

000d6d58 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6d58:	4770      	bx	lr

000d6d5a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6d5a:	7441      	strb	r1, [r0, #17]
   d6d5c:	4770      	bx	lr

000d6d5e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6d5e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6d60:	7c00      	ldrb	r0, [r0, #16]
   d6d62:	f7ff fa7d 	bl	d6260 <HAL_USART_Available_Data_For_Write>
}
   d6d66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6d6a:	bd08      	pop	{r3, pc}

000d6d6c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6d6c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6d6e:	7c00      	ldrb	r0, [r0, #16]
   d6d70:	f7ff fa4e 	bl	d6210 <HAL_USART_Available_Data>
}
   d6d74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6d78:	bd08      	pop	{r3, pc}

000d6d7a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6d7a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6d7c:	7c00      	ldrb	r0, [r0, #16]
   d6d7e:	f7ff fa57 	bl	d6230 <HAL_USART_Peek_Data>
}
   d6d82:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6d86:	bf28      	it	cs
   d6d88:	f04f 30ff 	movcs.w	r0, #4294967295
   d6d8c:	bd08      	pop	{r3, pc}

000d6d8e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6d8e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6d90:	7c00      	ldrb	r0, [r0, #16]
   d6d92:	f7ff fa45 	bl	d6220 <HAL_USART_Read_Data>
}
   d6d96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6d9a:	bf28      	it	cs
   d6d9c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6da0:	bd08      	pop	{r3, pc}

000d6da2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6da2:	7c00      	ldrb	r0, [r0, #16]
   d6da4:	f7ff ba4c 	b.w	d6240 <HAL_USART_Flush_Data>

000d6da8 <_ZN11USARTSerialD0Ev>:
   d6da8:	b510      	push	{r4, lr}
   d6daa:	2114      	movs	r1, #20
   d6dac:	4604      	mov	r4, r0
   d6dae:	f000 fdea 	bl	d7986 <_ZdlPvj>
   d6db2:	4620      	mov	r0, r4
   d6db4:	bd10      	pop	{r4, pc}

000d6db6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6db6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6db8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6dba:	4604      	mov	r4, r0
   d6dbc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6dbe:	b925      	cbnz	r5, d6dca <_ZN11USARTSerial5writeEh+0x14>
   d6dc0:	7c00      	ldrb	r0, [r0, #16]
   d6dc2:	f7ff fa4d 	bl	d6260 <HAL_USART_Available_Data_For_Write>
   d6dc6:	2800      	cmp	r0, #0
   d6dc8:	dd05      	ble.n	d6dd6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6dca:	4631      	mov	r1, r6
   d6dcc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6dce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6dd2:	f7ff ba15 	b.w	d6200 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6dd6:	4628      	mov	r0, r5
   d6dd8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6ddc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6ddc:	b510      	push	{r4, lr}
   d6dde:	4604      	mov	r4, r0
   d6de0:	4608      	mov	r0, r1
   d6de2:	4611      	mov	r1, r2
   d6de4:	2200      	movs	r2, #0
   d6de6:	6062      	str	r2, [r4, #4]
   d6de8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6dec:	60a2      	str	r2, [r4, #8]
   d6dee:	4a05      	ldr	r2, [pc, #20]	; (d6e04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6df0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6df2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6df4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6df6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6df8:	461a      	mov	r2, r3
   d6dfa:	f7ff f9f9 	bl	d61f0 <HAL_USART_Init>
}
   d6dfe:	4620      	mov	r0, r4
   d6e00:	bd10      	pop	{r4, pc}
   d6e02:	bf00      	nop
   d6e04:	000daf14 	.word	0x000daf14

000d6e08 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6e08:	7c00      	ldrb	r0, [r0, #16]
   d6e0a:	f7ff ba21 	b.w	d6250 <HAL_USART_Is_Enabled>
	...

000d6e10 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6e10:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6e12:	4d0c      	ldr	r5, [pc, #48]	; (d6e44 <_Z22__fetch_global_Serial1v+0x34>)
   d6e14:	6829      	ldr	r1, [r5, #0]
   d6e16:	f011 0401 	ands.w	r4, r1, #1
   d6e1a:	d111      	bne.n	d6e40 <_Z22__fetch_global_Serial1v+0x30>
   d6e1c:	4628      	mov	r0, r5
   d6e1e:	f7fd f94d 	bl	d40bc <__cxa_guard_acquire>
   d6e22:	b168      	cbz	r0, d6e40 <_Z22__fetch_global_Serial1v+0x30>
   d6e24:	4a08      	ldr	r2, [pc, #32]	; (d6e48 <_Z22__fetch_global_Serial1v+0x38>)
   d6e26:	4b09      	ldr	r3, [pc, #36]	; (d6e4c <_Z22__fetch_global_Serial1v+0x3c>)
   d6e28:	4809      	ldr	r0, [pc, #36]	; (d6e50 <_Z22__fetch_global_Serial1v+0x40>)
   d6e2a:	4621      	mov	r1, r4
   d6e2c:	f7ff ffd6 	bl	d6ddc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6e30:	4628      	mov	r0, r5
   d6e32:	f7fd f948 	bl	d40c6 <__cxa_guard_release>
   d6e36:	4a07      	ldr	r2, [pc, #28]	; (d6e54 <_Z22__fetch_global_Serial1v+0x44>)
   d6e38:	4907      	ldr	r1, [pc, #28]	; (d6e58 <_Z22__fetch_global_Serial1v+0x48>)
   d6e3a:	4805      	ldr	r0, [pc, #20]	; (d6e50 <_Z22__fetch_global_Serial1v+0x40>)
   d6e3c:	f000 fd9e 	bl	d797c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6e40:	4803      	ldr	r0, [pc, #12]	; (d6e50 <_Z22__fetch_global_Serial1v+0x40>)
   d6e42:	bd38      	pop	{r3, r4, r5, pc}
   d6e44:	2003e4ac 	.word	0x2003e4ac
   d6e48:	2003e4b0 	.word	0x2003e4b0
   d6e4c:	2003e428 	.word	0x2003e428
   d6e50:	2003e414 	.word	0x2003e414
   d6e54:	2003e0d8 	.word	0x2003e0d8
   d6e58:	000d6d59 	.word	0x000d6d59

000d6e5c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6e5c:	4770      	bx	lr

000d6e5e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e60:	4606      	mov	r6, r0
   d6e62:	4615      	mov	r5, r2
   d6e64:	460c      	mov	r4, r1
   d6e66:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6e68:	42bc      	cmp	r4, r7
   d6e6a:	d006      	beq.n	d6e7a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6e6c:	6833      	ldr	r3, [r6, #0]
   d6e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6e72:	689b      	ldr	r3, [r3, #8]
   d6e74:	4630      	mov	r0, r6
   d6e76:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6e78:	e7f6      	b.n	d6e68 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6e7a:	4628      	mov	r0, r5
   d6e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e7e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6e7e:	2200      	movs	r2, #0
   d6e80:	7c00      	ldrb	r0, [r0, #16]
   d6e82:	f7ff ba0d 	b.w	d62a0 <HAL_I2C_Write_Data>

000d6e86 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6e86:	2100      	movs	r1, #0
   d6e88:	7c00      	ldrb	r0, [r0, #16]
   d6e8a:	f7ff ba11 	b.w	d62b0 <HAL_I2C_Available_Data>

000d6e8e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6e8e:	2100      	movs	r1, #0
   d6e90:	7c00      	ldrb	r0, [r0, #16]
   d6e92:	f7ff ba15 	b.w	d62c0 <HAL_I2C_Read_Data>

000d6e96 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6e96:	2100      	movs	r1, #0
   d6e98:	7c00      	ldrb	r0, [r0, #16]
   d6e9a:	f7ff ba19 	b.w	d62d0 <HAL_I2C_Peek_Data>

000d6e9e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6e9e:	2100      	movs	r1, #0
   d6ea0:	7c00      	ldrb	r0, [r0, #16]
   d6ea2:	f7ff ba1d 	b.w	d62e0 <HAL_I2C_Flush_Data>

000d6ea6 <_ZN7TwoWireD0Ev>:
   d6ea6:	b510      	push	{r4, lr}
   d6ea8:	2114      	movs	r1, #20
   d6eaa:	4604      	mov	r4, r0
   d6eac:	f000 fd6b 	bl	d7986 <_ZdlPvj>
   d6eb0:	4620      	mov	r0, r4
   d6eb2:	bd10      	pop	{r4, pc}

000d6eb4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6eb4:	b510      	push	{r4, lr}
   d6eb6:	4604      	mov	r4, r0
   d6eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6ebc:	4608      	mov	r0, r1
   d6ebe:	60a3      	str	r3, [r4, #8]
   d6ec0:	2100      	movs	r1, #0
   d6ec2:	4b04      	ldr	r3, [pc, #16]	; (d6ed4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6ec4:	7420      	strb	r0, [r4, #16]
   d6ec6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6ec8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6eca:	f7ff fa19 	bl	d6300 <HAL_I2C_Init>

}
   d6ece:	4620      	mov	r0, r4
   d6ed0:	bd10      	pop	{r4, pc}
   d6ed2:	bf00      	nop
   d6ed4:	000daf44 	.word	0x000daf44

000d6ed8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6ed8:	2300      	movs	r3, #0
   d6eda:	461a      	mov	r2, r3
   d6edc:	4619      	mov	r1, r3
   d6ede:	7c00      	ldrb	r0, [r0, #16]
   d6ee0:	f7ff b9c6 	b.w	d6270 <HAL_I2C_Begin>

000d6ee4 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6ee4:	2200      	movs	r2, #0
   d6ee6:	7c00      	ldrb	r0, [r0, #16]
   d6ee8:	f7ff b9ca 	b.w	d6280 <HAL_I2C_Begin_Transmission>

000d6eec <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6eec:	b2c9      	uxtb	r1, r1
   d6eee:	f7ff bff9 	b.w	d6ee4 <_ZN7TwoWire17beginTransmissionEh>

000d6ef2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6ef2:	2200      	movs	r2, #0
   d6ef4:	7c00      	ldrb	r0, [r0, #16]
   d6ef6:	f7ff b9cb 	b.w	d6290 <HAL_I2C_End_Transmission>

000d6efa <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6efa:	2101      	movs	r1, #1
   d6efc:	f7ff bff9 	b.w	d6ef2 <_ZN7TwoWire15endTransmissionEh>

000d6f00 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6f00:	2100      	movs	r1, #0
   d6f02:	7c00      	ldrb	r0, [r0, #16]
   d6f04:	f7ff b9f4 	b.w	d62f0 <HAL_I2C_Is_Enabled>

000d6f08 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6f08:	2200      	movs	r2, #0
   d6f0a:	4611      	mov	r1, r2
   d6f0c:	6840      	ldr	r0, [r0, #4]
   d6f0e:	f7ff bad3 	b.w	d64b8 <network_listening>

000d6f12 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6f12:	2200      	movs	r2, #0
   d6f14:	4611      	mov	r1, r2
   d6f16:	6840      	ldr	r0, [r0, #4]
   d6f18:	f7ff bade 	b.w	d64d8 <network_get_listen_timeout>

000d6f1c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6f1c:	2200      	movs	r2, #0
   d6f1e:	6840      	ldr	r0, [r0, #4]
   d6f20:	f7ff bad2 	b.w	d64c8 <network_set_listen_timeout>

000d6f24 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6f24:	2200      	movs	r2, #0
   d6f26:	f081 0101 	eor.w	r1, r1, #1
   d6f2a:	6840      	ldr	r0, [r0, #4]
   d6f2c:	f7ff babc 	b.w	d64a8 <network_listen>

000d6f30 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6f30:	2300      	movs	r3, #0
   d6f32:	461a      	mov	r2, r3
   d6f34:	4619      	mov	r1, r3
   d6f36:	6840      	ldr	r0, [r0, #4]
   d6f38:	f7ff baae 	b.w	d6498 <network_off>

000d6f3c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6f3c:	2300      	movs	r3, #0
   d6f3e:	461a      	mov	r2, r3
   d6f40:	4619      	mov	r1, r3
   d6f42:	6840      	ldr	r0, [r0, #4]
   d6f44:	f7ff baa0 	b.w	d6488 <network_on>

000d6f48 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f48:	2200      	movs	r2, #0
   d6f4a:	4611      	mov	r1, r2
   d6f4c:	6840      	ldr	r0, [r0, #4]
   d6f4e:	f7ff ba93 	b.w	d6478 <network_ready>

000d6f52 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f52:	2200      	movs	r2, #0
   d6f54:	4611      	mov	r1, r2
   d6f56:	6840      	ldr	r0, [r0, #4]
   d6f58:	f7ff ba7e 	b.w	d6458 <network_connecting>

000d6f5c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f5c:	2200      	movs	r2, #0
   d6f5e:	2102      	movs	r1, #2
   d6f60:	6840      	ldr	r0, [r0, #4]
   d6f62:	f7ff ba81 	b.w	d6468 <network_disconnect>

000d6f66 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6f66:	2300      	movs	r3, #0
   d6f68:	461a      	mov	r2, r3
   d6f6a:	6840      	ldr	r0, [r0, #4]
   d6f6c:	f7ff ba6c 	b.w	d6448 <network_connect>

000d6f70 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6f70:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f72:	4605      	mov	r5, r0
   d6f74:	b188      	cbz	r0, d6f9a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f76:	6804      	ldr	r4, [r0, #0]
   d6f78:	b14c      	cbz	r4, d6f8e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6f7a:	68a3      	ldr	r3, [r4, #8]
   d6f7c:	b11b      	cbz	r3, d6f86 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6f7e:	2203      	movs	r2, #3
   d6f80:	4621      	mov	r1, r4
   d6f82:	4620      	mov	r0, r4
   d6f84:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f86:	2110      	movs	r1, #16
   d6f88:	4620      	mov	r0, r4
   d6f8a:	f000 fcfc 	bl	d7986 <_ZdlPvj>
   d6f8e:	4628      	mov	r0, r5
   d6f90:	2114      	movs	r1, #20
      }
   d6f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f96:	f000 bcf6 	b.w	d7986 <_ZdlPvj>
   d6f9a:	bd38      	pop	{r3, r4, r5, pc}

000d6f9c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d6f9c:	b110      	cbz	r0, d6fa4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d6f9e:	6803      	ldr	r3, [r0, #0]
   d6fa0:	685b      	ldr	r3, [r3, #4]
   d6fa2:	4718      	bx	r3
   d6fa4:	4770      	bx	lr

000d6fa6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6fa6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6fa8:	6803      	ldr	r3, [r0, #0]
   d6faa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6fac:	b1bb      	cbz	r3, d6fde <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6fae:	6858      	ldr	r0, [r3, #4]
   d6fb0:	f7ff f8de 	bl	d6170 <os_thread_is_current>
   d6fb4:	b978      	cbnz	r0, d6fd6 <_ZN6ThreadD1Ev+0x30>
   d6fb6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6fb8:	7c5a      	ldrb	r2, [r3, #17]
   d6fba:	b912      	cbnz	r2, d6fc2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6fbc:	6858      	ldr	r0, [r3, #4]
   d6fbe:	f7ff f8df 	bl	d6180 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6fc2:	6823      	ldr	r3, [r4, #0]
   d6fc4:	6858      	ldr	r0, [r3, #4]
   d6fc6:	f7ff f8e3 	bl	d6190 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fca:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6fcc:	2300      	movs	r3, #0
   d6fce:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6fd0:	b128      	cbz	r0, d6fde <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6fd2:	f7ff ffcd 	bl	d6f70 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fd6:	6820      	ldr	r0, [r4, #0]
   d6fd8:	b108      	cbz	r0, d6fde <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6fda:	f7ff ffc9 	bl	d6f70 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d6fde:	4620      	mov	r0, r4
   d6fe0:	bd10      	pop	{r4, pc}
	...

000d6fe4 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6fe4:	b538      	push	{r3, r4, r5, lr}
   d6fe6:	4b0c      	ldr	r3, [pc, #48]	; (d7018 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6fe8:	6003      	str	r3, [r0, #0]
   d6fea:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fec:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6ff0:	b108      	cbz	r0, d6ff6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6ff2:	f7fd f856 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ff6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6ffa:	b135      	cbz	r5, d700a <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6ffc:	4628      	mov	r0, r5
   d6ffe:	f7ff ffd2 	bl	d6fa6 <_ZN6ThreadD1Ev>
   d7002:	2104      	movs	r1, #4
   d7004:	4628      	mov	r0, r5
   d7006:	f000 fcbe 	bl	d7986 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d700a:	68a0      	ldr	r0, [r4, #8]
   d700c:	b108      	cbz	r0, d7012 <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d700e:	f7ff ffc5 	bl	d6f9c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d7012:	4620      	mov	r0, r4
   d7014:	bd38      	pop	{r3, r4, r5, pc}
   d7016:	bf00      	nop
   d7018:	000daf6c 	.word	0x000daf6c

000d701c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d701c:	b538      	push	{r3, r4, r5, lr}
   d701e:	4c0d      	ldr	r4, [pc, #52]	; (d7054 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d7020:	4b0d      	ldr	r3, [pc, #52]	; (d7058 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d7022:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7024:	2500      	movs	r5, #0
   d7026:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7028:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d702c:	6063      	str	r3, [r4, #4]
   d702e:	60a5      	str	r5, [r4, #8]
   d7030:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7034:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7038:	f7ff f8ba 	bl	d61b0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d703c:	4b07      	ldr	r3, [pc, #28]	; (d705c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d703e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d7042:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7044:	4620      	mov	r0, r4
   d7046:	4a06      	ldr	r2, [pc, #24]	; (d7060 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d7048:	4906      	ldr	r1, [pc, #24]	; (d7064 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d704a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d704e:	f000 bc95 	b.w	d797c <__aeabi_atexit>
   d7052:	bf00      	nop
   d7054:	2003e534 	.word	0x2003e534
   d7058:	000db054 	.word	0x000db054
   d705c:	000daf6c 	.word	0x000daf6c
   d7060:	2003e0d8 	.word	0x2003e0d8
   d7064:	000d6fe5 	.word	0x000d6fe5

000d7068 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d7068:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d706a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d706c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d706e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7072:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7074:	2201      	movs	r2, #1
   d7076:	f04f 33ff 	mov.w	r3, #4294967295
   d707a:	4621      	mov	r1, r4
   d707c:	47a8      	blx	r5
}
   d707e:	b003      	add	sp, #12
   d7080:	bd30      	pop	{r4, r5, pc}

000d7082 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7082:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7084:	6803      	ldr	r3, [r0, #0]
   d7086:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7088:	f04f 33ff 	mov.w	r3, #4294967295
   d708c:	46a4      	mov	ip, r4
}
   d708e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7092:	4760      	bx	ip

000d7094 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7094:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7096:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7098:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d709a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d709e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d70a0:	4621      	mov	r1, r4
   d70a2:	4613      	mov	r3, r2
   d70a4:	2201      	movs	r2, #1
   d70a6:	47a8      	blx	r5
}
   d70a8:	b003      	add	sp, #12
   d70aa:	bd30      	pop	{r4, r5, pc}

000d70ac <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d70ac:	4770      	bx	lr

000d70ae <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d70ae:	b538      	push	{r3, r4, r5, lr}
   d70b0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d70b2:	681a      	ldr	r2, [r3, #0]
   d70b4:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d70b6:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d70b8:	da05      	bge.n	d70c6 <_ZN9TCPClient9connectedEv+0x18>
   d70ba:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d70be:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d70c2:	429a      	cmp	r2, r3
   d70c4:	d001      	beq.n	d70ca <_ZN9TCPClient9connectedEv+0x1c>
   d70c6:	2501      	movs	r5, #1
   d70c8:	e00b      	b.n	d70e2 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d70ca:	6803      	ldr	r3, [r0, #0]
   d70cc:	691b      	ldr	r3, [r3, #16]
   d70ce:	4798      	blx	r3
   d70d0:	2800      	cmp	r0, #0
   d70d2:	bf14      	ite	ne
   d70d4:	2501      	movne	r5, #1
   d70d6:	2500      	moveq	r5, #0
        if (!rv) {
   d70d8:	d103      	bne.n	d70e2 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d70da:	6823      	ldr	r3, [r4, #0]
   d70dc:	4620      	mov	r0, r4
   d70de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d70e0:	4798      	blx	r3
        }
    }
    return rv;
}
   d70e2:	4628      	mov	r0, r5
   d70e4:	bd38      	pop	{r3, r4, r5, pc}

000d70e6 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d70e6:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d70e8:	6818      	ldr	r0, [r3, #0]
}
   d70ea:	43c0      	mvns	r0, r0
   d70ec:	0fc0      	lsrs	r0, r0, #31
   d70ee:	4770      	bx	lr

000d70f0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d70f0:	4770      	bx	lr

000d70f2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d70f2:	2000      	movs	r0, #0
   d70f4:	4770      	bx	lr

000d70f6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d70f6:	b510      	push	{r4, lr}
   d70f8:	2114      	movs	r1, #20
   d70fa:	4604      	mov	r4, r0
   d70fc:	f000 fc43 	bl	d7986 <_ZdlPvj>
   d7100:	4620      	mov	r0, r4
   d7102:	bd10      	pop	{r4, pc}

000d7104 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7104:	f7fc bfcb 	b.w	d409e <_ZdlPv>

000d7108 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d710c:	4698      	mov	r8, r3
    stop();
   d710e:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7110:	b093      	sub	sp, #76	; 0x4c
    stop();
   d7112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7114:	460c      	mov	r4, r1
   d7116:	4606      	mov	r6, r0
   d7118:	4617      	mov	r7, r2
    stop();
   d711a:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d711c:	ab12      	add	r3, sp, #72	; 0x48
   d711e:	2500      	movs	r5, #0
   d7120:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d7124:	462a      	mov	r2, r5
   d7126:	4629      	mov	r1, r5
   d7128:	4620      	mov	r0, r4
   d712a:	f7fe ff81 	bl	d6030 <netdb_getaddrinfo>
   d712e:	2800      	cmp	r0, #0
   d7130:	db3a      	blt.n	d71a8 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7132:	9b00      	ldr	r3, [sp, #0]
   d7134:	2b00      	cmp	r3, #0
   d7136:	d039      	beq.n	d71ac <_ZN9TCPClient7connectEPKctm+0xa4>
   d7138:	695b      	ldr	r3, [r3, #20]
   d713a:	2b00      	cmp	r3, #0
   d713c:	d036      	beq.n	d71ac <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d713e:	a806      	add	r0, sp, #24
   d7140:	f7ff fd26 	bl	d6b90 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7144:	9b00      	ldr	r3, [sp, #0]
   d7146:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7148:	7863      	ldrb	r3, [r4, #1]
   d714a:	2b02      	cmp	r3, #2
   d714c:	d101      	bne.n	d7152 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d714e:	1d21      	adds	r1, r4, #4
   d7150:	e013      	b.n	d717a <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7152:	2b0a      	cmp	r3, #10
   d7154:	d114      	bne.n	d7180 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7156:	2211      	movs	r2, #17
   d7158:	4629      	mov	r1, r5
   d715a:	a801      	add	r0, sp, #4
   d715c:	f001 fa87 	bl	d866e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7160:	68a3      	ldr	r3, [r4, #8]
   d7162:	bb33      	cbnz	r3, d71b2 <_ZN9TCPClient7connectEPKctm+0xaa>
   d7164:	68e3      	ldr	r3, [r4, #12]
   d7166:	bb23      	cbnz	r3, d71b2 <_ZN9TCPClient7connectEPKctm+0xaa>
   d7168:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d716c:	6925      	ldr	r5, [r4, #16]
   d716e:	f7ff f82f 	bl	d61d0 <inet_htonl>
   d7172:	4285      	cmp	r5, r0
   d7174:	d11d      	bne.n	d71b2 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7176:	f104 0114 	add.w	r1, r4, #20
   d717a:	a806      	add	r0, sp, #24
   d717c:	f7ff fd58 	bl	d6c30 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7180:	a806      	add	r0, sp, #24
   d7182:	f7ff fd25 	bl	d6bd0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7186:	b188      	cbz	r0, d71ac <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d7188:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d718a:	ad07      	add	r5, sp, #28
   d718c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7190:	4b18      	ldr	r3, [pc, #96]	; (d71f4 <_ZN9TCPClient7connectEPKctm+0xec>)
   d7192:	930c      	str	r3, [sp, #48]	; 0x30
   d7194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7196:	ac0d      	add	r4, sp, #52	; 0x34
   d7198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d719a:	682b      	ldr	r3, [r5, #0]
   d719c:	7023      	strb	r3, [r4, #0]
   d719e:	463a      	mov	r2, r7
   d71a0:	4643      	mov	r3, r8
   d71a2:	a90c      	add	r1, sp, #48	; 0x30
   d71a4:	4630      	mov	r0, r6
   d71a6:	47c8      	blx	r9
   d71a8:	4604      	mov	r4, r0
   d71aa:	e01c      	b.n	d71e6 <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d71ac:	f04f 34ff 	mov.w	r4, #4294967295
   d71b0:	e019      	b.n	d71e6 <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d71b2:	f104 0308 	add.w	r3, r4, #8
   d71b6:	ad01      	add	r5, sp, #4
   d71b8:	3418      	adds	r4, #24
   d71ba:	6818      	ldr	r0, [r3, #0]
   d71bc:	6859      	ldr	r1, [r3, #4]
   d71be:	462a      	mov	r2, r5
   d71c0:	c203      	stmia	r2!, {r0, r1}
   d71c2:	3308      	adds	r3, #8
   d71c4:	42a3      	cmp	r3, r4
   d71c6:	4615      	mov	r5, r2
   d71c8:	d1f7      	bne.n	d71ba <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d71ca:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d71cc:	a901      	add	r1, sp, #4
   d71ce:	a80c      	add	r0, sp, #48	; 0x30
   d71d0:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d71d2:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d71d6:	f7ff fce9 	bl	d6bac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d71da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71dc:	ac07      	add	r4, sp, #28
   d71de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71e0:	682b      	ldr	r3, [r5, #0]
   d71e2:	7023      	strb	r3, [r4, #0]
   d71e4:	e7cc      	b.n	d7180 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d71e6:	9800      	ldr	r0, [sp, #0]
   d71e8:	f7fe ff1a 	bl	d6020 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d71ec:	4620      	mov	r0, r4
   d71ee:	b013      	add	sp, #76	; 0x4c
   d71f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d71f4:	000daed0 	.word	0x000daed0

000d71f8 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d71f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d71fa:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d71fc:	2200      	movs	r2, #0
   d71fe:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7200:	9202      	str	r2, [sp, #8]
   d7202:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7204:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7206:	4604      	mov	r4, r0
   d7208:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d720a:	d008      	beq.n	d721e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d720c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7210:	fbb3 f1f2 	udiv	r1, r3, r2
   d7214:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7216:	fb02 3111 	mls	r1, r2, r1, r3
   d721a:	434a      	muls	r2, r1
   d721c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d721e:	6960      	ldr	r0, [r4, #20]
   d7220:	2308      	movs	r3, #8
   d7222:	9300      	str	r3, [sp, #0]
   d7224:	f241 0205 	movw	r2, #4101	; 0x1005
   d7228:	446b      	add	r3, sp
   d722a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d722e:	6800      	ldr	r0, [r0, #0]
   d7230:	f7ff f86e 	bl	d6310 <sock_setsockopt>
    if (ret < 0) {
   d7234:	2800      	cmp	r0, #0
   d7236:	db08      	blt.n	d724a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7238:	6960      	ldr	r0, [r4, #20]
   d723a:	2300      	movs	r3, #0
   d723c:	4632      	mov	r2, r6
   d723e:	4629      	mov	r1, r5
   d7240:	6800      	ldr	r0, [r0, #0]
   d7242:	f7ff f885 	bl	d6350 <sock_send>
    if (ret < 0) {
   d7246:	2800      	cmp	r0, #0
   d7248:	da04      	bge.n	d7254 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d724a:	f7ff f97d 	bl	d6548 <__errno>
   d724e:	6803      	ldr	r3, [r0, #0]
   d7250:	6063      	str	r3, [r4, #4]
   d7252:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d7254:	b004      	add	sp, #16
   d7256:	bd70      	pop	{r4, r5, r6, pc}

000d7258 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7258:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d725a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d725c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d725e:	689b      	ldr	r3, [r3, #8]
   d7260:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7262:	68a3      	ldr	r3, [r4, #8]
   d7264:	3b01      	subs	r3, #1
   d7266:	60a3      	str	r3, [r4, #8]
   d7268:	b92b      	cbnz	r3, d7276 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d726a:	6823      	ldr	r3, [r4, #0]
   d726c:	4620      	mov	r0, r4
   d726e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d7274:	4718      	bx	r3
   d7276:	bd10      	pop	{r4, pc}

000d7278 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d7278:	b570      	push	{r4, r5, r6, lr}
   d727a:	4604      	mov	r4, r0
   d727c:	694d      	ldr	r5, [r1, #20]
   d727e:	4b05      	ldr	r3, [pc, #20]	; (d7294 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7280:	f844 3b04 	str.w	r3, [r4], #4
   d7284:	358c      	adds	r5, #140	; 0x8c
   d7286:	4606      	mov	r6, r0
   d7288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d728a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d728c:	682b      	ldr	r3, [r5, #0]
   d728e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7290:	4630      	mov	r0, r6
   d7292:	bd70      	pop	{r4, r5, r6, pc}
   d7294:	000daed0 	.word	0x000daed0

000d7298 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7298:	b510      	push	{r4, lr}
   d729a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d729c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d72a0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d72a4:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d72a6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d72a8:	d005      	beq.n	d72b6 <_ZN9TCPClient4peekEv+0x1e>
   d72aa:	6962      	ldr	r2, [r4, #20]
   d72ac:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d72b0:	4413      	add	r3, r2
   d72b2:	7918      	ldrb	r0, [r3, #4]
   d72b4:	bd10      	pop	{r4, pc}
   d72b6:	6803      	ldr	r3, [r0, #0]
   d72b8:	691b      	ldr	r3, [r3, #16]
   d72ba:	4798      	blx	r3
   d72bc:	2800      	cmp	r0, #0
   d72be:	d1f4      	bne.n	d72aa <_ZN9TCPClient4peekEv+0x12>
   d72c0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d72c4:	bd10      	pop	{r4, pc}

000d72c6 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d72c6:	b510      	push	{r4, lr}
   d72c8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d72ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d72ce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d72d2:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d72d4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d72d6:	d008      	beq.n	d72ea <_ZN9TCPClient4readEv+0x24>
   d72d8:	6962      	ldr	r2, [r4, #20]
   d72da:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d72de:	1c59      	adds	r1, r3, #1
   d72e0:	4413      	add	r3, r2
   d72e2:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d72e6:	7918      	ldrb	r0, [r3, #4]
   d72e8:	bd10      	pop	{r4, pc}
   d72ea:	6803      	ldr	r3, [r0, #0]
   d72ec:	691b      	ldr	r3, [r3, #16]
   d72ee:	4798      	blx	r3
   d72f0:	2800      	cmp	r0, #0
   d72f2:	d1f1      	bne.n	d72d8 <_ZN9TCPClient4readEv+0x12>
   d72f4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d72f8:	bd10      	pop	{r4, pc}

000d72fa <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d72fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d72fc:	6943      	ldr	r3, [r0, #20]
   d72fe:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7300:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7304:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7308:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d730a:	4605      	mov	r5, r0
   d730c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d730e:	d106      	bne.n	d731e <_ZN9TCPClient4readEPhj+0x24>
   d7310:	6803      	ldr	r3, [r0, #0]
   d7312:	691b      	ldr	r3, [r3, #16]
   d7314:	4798      	blx	r3
   d7316:	b910      	cbnz	r0, d731e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7318:	f04f 34ff 	mov.w	r4, #4294967295
   d731c:	e014      	b.n	d7348 <_ZN9TCPClient4readEPhj+0x4e>
   d731e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7320:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7324:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7328:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d732a:	42bc      	cmp	r4, r7
   d732c:	bf28      	it	cs
   d732e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7330:	4419      	add	r1, r3
   d7332:	4622      	mov	r2, r4
   d7334:	3104      	adds	r1, #4
   d7336:	4630      	mov	r0, r6
   d7338:	f001 f98e 	bl	d8658 <memcpy>
   d733c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d733e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7342:	4423      	add	r3, r4
   d7344:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7348:	4620      	mov	r0, r4
   d734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d734c <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d734c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d734e:	2300      	movs	r3, #0
   d7350:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7354:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7356:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d735a:	4770      	bx	lr

000d735c <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d735c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7360:	4698      	mov	r8, r3
    stop();
   d7362:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7364:	460d      	mov	r5, r1
   d7366:	b08a      	sub	sp, #40	; 0x28
    stop();
   d7368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d736a:	4606      	mov	r6, r0
   d736c:	4617      	mov	r7, r2
    stop();
   d736e:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7370:	7d2b      	ldrb	r3, [r5, #20]
   d7372:	6974      	ldr	r4, [r6, #20]
   d7374:	2b04      	cmp	r3, #4
   d7376:	bf0c      	ite	eq
   d7378:	2002      	moveq	r0, #2
   d737a:	200a      	movne	r0, #10
   d737c:	2206      	movs	r2, #6
   d737e:	2101      	movs	r1, #1
   d7380:	f7fe ffee 	bl	d6360 <sock_socket>
   d7384:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d7386:	6973      	ldr	r3, [r6, #20]
   d7388:	681c      	ldr	r4, [r3, #0]
   d738a:	2c00      	cmp	r4, #0
   d738c:	db5b      	blt.n	d7446 <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d738e:	4630      	mov	r0, r6
   d7390:	f7ff ffdc 	bl	d734c <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7394:	f1b8 0f00 	cmp.w	r8, #0
   d7398:	d017      	beq.n	d73ca <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d739a:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d739c:	a903      	add	r1, sp, #12
   d739e:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d73a2:	9303      	str	r3, [sp, #12]
   d73a4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d73a8:	f7fe fec2 	bl	d6130 <if_index_to_name>
   d73ac:	2800      	cmp	r0, #0
   d73ae:	db49      	blt.n	d7444 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d73b0:	6970      	ldr	r0, [r6, #20]
   d73b2:	2306      	movs	r3, #6
   d73b4:	9300      	str	r3, [sp, #0]
   d73b6:	f241 020b 	movw	r2, #4107	; 0x100b
   d73ba:	ab03      	add	r3, sp, #12
   d73bc:	f640 71ff 	movw	r1, #4095	; 0xfff
   d73c0:	6800      	ldr	r0, [r0, #0]
   d73c2:	f7fe ffa5 	bl	d6310 <sock_setsockopt>
   d73c6:	2800      	cmp	r0, #0
   d73c8:	db3c      	blt.n	d7444 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d73ca:	241c      	movs	r4, #28
   d73cc:	4622      	mov	r2, r4
   d73ce:	2100      	movs	r1, #0
   d73d0:	a803      	add	r0, sp, #12
   d73d2:	f001 f94c 	bl	d866e <memset>
    if (ip.version() == 4) {
   d73d6:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d73d8:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d73dc:	2b04      	cmp	r3, #4
   d73de:	d10c      	bne.n	d73fa <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d73e0:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d73e2:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d73e4:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d73e8:	f7fe fefa 	bl	d61e0 <inet_htons>
   d73ec:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d73f0:	6868      	ldr	r0, [r5, #4]
   d73f2:	f7fe feed 	bl	d61d0 <inet_htonl>
   d73f6:	9004      	str	r0, [sp, #16]
   d73f8:	e013      	b.n	d7422 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d73fa:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d73fc:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d73fe:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7402:	f7fe feed 	bl	d61e0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7406:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7408:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d740c:	1d2b      	adds	r3, r5, #4
   d740e:	f105 0714 	add.w	r7, r5, #20
   d7412:	6818      	ldr	r0, [r3, #0]
   d7414:	6859      	ldr	r1, [r3, #4]
   d7416:	4622      	mov	r2, r4
   d7418:	c203      	stmia	r2!, {r0, r1}
   d741a:	3308      	adds	r3, #8
   d741c:	42bb      	cmp	r3, r7
   d741e:	4614      	mov	r4, r2
   d7420:	d1f7      	bne.n	d7412 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d7422:	6973      	ldr	r3, [r6, #20]
   d7424:	221c      	movs	r2, #28
   d7426:	a903      	add	r1, sp, #12
   d7428:	6818      	ldr	r0, [r3, #0]
   d742a:	f7fe ff81 	bl	d6330 <sock_connect>
   d742e:	2800      	cmp	r0, #0
   d7430:	db08      	blt.n	d7444 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d7432:	1d2c      	adds	r4, r5, #4
   d7434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7436:	6976      	ldr	r6, [r6, #20]
   d7438:	368c      	adds	r6, #140	; 0x8c
   d743a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d743c:	6823      	ldr	r3, [r4, #0]
   d743e:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d7440:	2401      	movs	r4, #1
   d7442:	e004      	b.n	d744e <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d7444:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7446:	6833      	ldr	r3, [r6, #0]
   d7448:	4630      	mov	r0, r6
   d744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d744c:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d744e:	4620      	mov	r0, r4
   d7450:	b00a      	add	sp, #40	; 0x28
   d7452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7456 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7456:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7458:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d745a:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d745c:	6818      	ldr	r0, [r3, #0]
   d745e:	2800      	cmp	r0, #0
   d7460:	db01      	blt.n	d7466 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7462:	f7fe ff5d 	bl	d6320 <sock_close>
   d7466:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7468:	f04f 32ff 	mov.w	r2, #4294967295
   d746c:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d746e:	6960      	ldr	r0, [r4, #20]
   d7470:	2211      	movs	r2, #17
   d7472:	2100      	movs	r1, #0
   d7474:	308c      	adds	r0, #140	; 0x8c
   d7476:	f001 f8fa 	bl	d866e <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d747a:	4620      	mov	r0, r4
}
   d747c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d7480:	f7ff bf64 	b.w	d734c <_ZN9TCPClient12flush_bufferEv>

000d7484 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7484:	b530      	push	{r4, r5, lr}
   d7486:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7488:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d748c:	b08b      	sub	sp, #44	; 0x2c
   d748e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7490:	b11b      	cbz	r3, d749a <_ZN9TCPClient9availableEv+0x16>
   d7492:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7496:	429a      	cmp	r2, r3
   d7498:	d040      	beq.n	d751c <_ZN9TCPClient9availableEv+0x98>
   d749a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d749c:	6818      	ldr	r0, [r3, #0]
   d749e:	2800      	cmp	r0, #0
   d74a0:	db3f      	blt.n	d7522 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d74a2:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d74a6:	2d7f      	cmp	r5, #127	; 0x7f
   d74a8:	d83b      	bhi.n	d7522 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d74aa:	1d19      	adds	r1, r3, #4
   d74ac:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d74b0:	2308      	movs	r3, #8
   d74b2:	4429      	add	r1, r5
   d74b4:	f7fe ff44 	bl	d6340 <sock_recv>
            if (ret > 0) {
   d74b8:	2800      	cmp	r0, #0
   d74ba:	dd0c      	ble.n	d74d6 <_ZN9TCPClient9availableEv+0x52>
   d74bc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d74be:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d74c2:	b90a      	cbnz	r2, d74c8 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d74c4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d74c8:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d74ca:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d74ce:	4418      	add	r0, r3
   d74d0:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d74d4:	e025      	b.n	d7522 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d74d6:	f7ff f837 	bl	d6548 <__errno>
   d74da:	6803      	ldr	r3, [r0, #0]
   d74dc:	2b0b      	cmp	r3, #11
   d74de:	d020      	beq.n	d7522 <_ZN9TCPClient9availableEv+0x9e>
   d74e0:	f7ff f832 	bl	d6548 <__errno>
   d74e4:	6803      	ldr	r3, [r0, #0]
   d74e6:	2b0b      	cmp	r3, #11
   d74e8:	d01b      	beq.n	d7522 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d74ea:	2320      	movs	r3, #32
   d74ec:	2500      	movs	r5, #0
   d74ee:	9302      	str	r3, [sp, #8]
   d74f0:	9503      	str	r5, [sp, #12]
   d74f2:	f7ff f829 	bl	d6548 <__errno>
   d74f6:	6803      	ldr	r3, [r0, #0]
   d74f8:	9301      	str	r3, [sp, #4]
   d74fa:	4b0e      	ldr	r3, [pc, #56]	; (d7534 <_ZN9TCPClient9availableEv+0xb0>)
   d74fc:	9300      	str	r3, [sp, #0]
   d74fe:	aa02      	add	r2, sp, #8
   d7500:	462b      	mov	r3, r5
   d7502:	490d      	ldr	r1, [pc, #52]	; (d7538 <_ZN9TCPClient9availableEv+0xb4>)
   d7504:	2032      	movs	r0, #50	; 0x32
   d7506:	f7fe ff73 	bl	d63f0 <log_message>
                    sock_close(d_->sock);
   d750a:	6963      	ldr	r3, [r4, #20]
   d750c:	6818      	ldr	r0, [r3, #0]
   d750e:	f7fe ff07 	bl	d6320 <sock_close>
   d7512:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7514:	f04f 32ff 	mov.w	r2, #4294967295
   d7518:	601a      	str	r2, [r3, #0]
   d751a:	e002      	b.n	d7522 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d751c:	f7ff ff16 	bl	d734c <_ZN9TCPClient12flush_bufferEv>
   d7520:	e7bb      	b.n	d749a <_ZN9TCPClient9availableEv+0x16>
   d7522:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7524:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7528:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d752c:	1a18      	subs	r0, r3, r0
}
   d752e:	b00b      	add	sp, #44	; 0x2c
   d7530:	bd30      	pop	{r4, r5, pc}
   d7532:	bf00      	nop
   d7534:	000db007 	.word	0x000db007
   d7538:	000db000 	.word	0x000db000

000d753c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d753c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d753e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7540:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d7542:	6001      	str	r1, [r0, #0]
   d7544:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7548:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d754c:	3088      	adds	r0, #136	; 0x88
   d754e:	f7ff fb1f 	bl	d6b90 <_ZN9IPAddressC1Ev>
}
   d7552:	4620      	mov	r0, r4
   d7554:	bd10      	pop	{r4, pc}
	...

000d7558 <_ZN9TCPClientC1Ei>:
   d7558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d755c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d755e:	2300      	movs	r3, #0
   d7560:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d7562:	4a14      	ldr	r2, [pc, #80]	; (d75b4 <_ZN9TCPClientC1Ei+0x5c>)
   d7564:	6043      	str	r3, [r0, #4]
   d7566:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7568:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d756a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d756c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d756e:	20a0      	movs	r0, #160	; 0xa0
   d7570:	460e      	mov	r6, r1
   d7572:	f7fc fd90 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7576:	4605      	mov	r5, r0
   d7578:	b110      	cbz	r0, d7580 <_ZN9TCPClientC1Ei+0x28>
   d757a:	4631      	mov	r1, r6
   d757c:	f7ff ffde 	bl	d753c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7580:	2014      	movs	r0, #20
   d7582:	f7fc fd88 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7586:	4603      	mov	r3, r0
   d7588:	b128      	cbz	r0, d7596 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d758a:	2201      	movs	r2, #1
   d758c:	6042      	str	r2, [r0, #4]
   d758e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7590:	4a09      	ldr	r2, [pc, #36]	; (d75b8 <_ZN9TCPClientC1Ei+0x60>)
   d7592:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7594:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7596:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7598:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d759a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d759c:	b128      	cbz	r0, d75aa <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d759e:	6843      	ldr	r3, [r0, #4]
   d75a0:	3b01      	subs	r3, #1
   d75a2:	6043      	str	r3, [r0, #4]
   d75a4:	b90b      	cbnz	r3, d75aa <_ZN9TCPClientC1Ei+0x52>
   d75a6:	f7ff fe57 	bl	d7258 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d75aa:	4620      	mov	r0, r4
   d75ac:	f7ff fece 	bl	d734c <_ZN9TCPClient12flush_bufferEv>
}
   d75b0:	4620      	mov	r0, r4
   d75b2:	bd70      	pop	{r4, r5, r6, pc}
   d75b4:	000dafbc 	.word	0x000dafbc
   d75b8:	000dafa0 	.word	0x000dafa0

000d75bc <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d75bc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d75be:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d75c2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d75c4:	f7ff ffc8 	bl	d7558 <_ZN9TCPClientC1Ei>
}
   d75c8:	4620      	mov	r0, r4
   d75ca:	bd10      	pop	{r4, pc}

000d75cc <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d75cc:	b510      	push	{r4, lr}
   d75ce:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d75d0:	6800      	ldr	r0, [r0, #0]
   d75d2:	2800      	cmp	r0, #0
   d75d4:	db01      	blt.n	d75da <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d75d6:	f7fe fea3 	bl	d6320 <sock_close>
    }
}
   d75da:	4620      	mov	r0, r4
   d75dc:	bd10      	pop	{r4, pc}

000d75de <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d75de:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d75e0:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d75e2:	4620      	mov	r0, r4
   d75e4:	f7ff fff2 	bl	d75cc <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d75e8:	b124      	cbz	r4, d75f4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d75ea:	4620      	mov	r0, r4
   d75ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d75f0:	f7fc bd55 	b.w	d409e <_ZdlPv>
   d75f4:	bd10      	pop	{r4, pc}

000d75f6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d75f6:	2200      	movs	r2, #0
   d75f8:	4611      	mov	r1, r2
   d75fa:	6840      	ldr	r0, [r0, #4]
   d75fc:	f7fe bf3c 	b.w	d6478 <network_ready>

000d7600 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7600:	2200      	movs	r2, #0
   d7602:	4611      	mov	r1, r2
   d7604:	6840      	ldr	r0, [r0, #4]
   d7606:	f7fe bf57 	b.w	d64b8 <network_listening>

000d760a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d760a:	2200      	movs	r2, #0
   d760c:	4611      	mov	r1, r2
   d760e:	6840      	ldr	r0, [r0, #4]
   d7610:	f7fe bf62 	b.w	d64d8 <network_get_listen_timeout>

000d7614 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7614:	2200      	movs	r2, #0
   d7616:	6840      	ldr	r0, [r0, #4]
   d7618:	f7fe bf56 	b.w	d64c8 <network_set_listen_timeout>

000d761c <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d761c:	2200      	movs	r2, #0
   d761e:	f081 0101 	eor.w	r1, r1, #1
   d7622:	6840      	ldr	r0, [r0, #4]
   d7624:	f7fe bf40 	b.w	d64a8 <network_listen>

000d7628 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7628:	2300      	movs	r3, #0
   d762a:	461a      	mov	r2, r3
   d762c:	4619      	mov	r1, r3
   d762e:	6840      	ldr	r0, [r0, #4]
   d7630:	f7fe bf32 	b.w	d6498 <network_off>

000d7634 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7634:	2300      	movs	r3, #0
   d7636:	461a      	mov	r2, r3
   d7638:	4619      	mov	r1, r3
   d763a:	6840      	ldr	r0, [r0, #4]
   d763c:	f7fe bf24 	b.w	d6488 <network_on>

000d7640 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7640:	2200      	movs	r2, #0
   d7642:	4611      	mov	r1, r2
   d7644:	6840      	ldr	r0, [r0, #4]
   d7646:	f7fe bf07 	b.w	d6458 <network_connecting>

000d764a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d764a:	2200      	movs	r2, #0
   d764c:	2102      	movs	r1, #2
   d764e:	6840      	ldr	r0, [r0, #4]
   d7650:	f7fe bf0a 	b.w	d6468 <network_disconnect>

000d7654 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7654:	2300      	movs	r3, #0
   d7656:	461a      	mov	r2, r3
   d7658:	6840      	ldr	r0, [r0, #4]
   d765a:	f7fe bef5 	b.w	d6448 <network_connect>
	...

000d7660 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7660:	4b02      	ldr	r3, [pc, #8]	; (d766c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7662:	2204      	movs	r2, #4
   d7664:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7666:	4a02      	ldr	r2, [pc, #8]	; (d7670 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7668:	601a      	str	r2, [r3, #0]
   d766a:	4770      	bx	lr
   d766c:	2003e704 	.word	0x2003e704
   d7670:	000db020 	.word	0x000db020

000d7674 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7674:	2300      	movs	r3, #0
   d7676:	461a      	mov	r2, r3
   d7678:	6840      	ldr	r0, [r0, #4]
   d767a:	f7fe bee5 	b.w	d6448 <network_connect>

000d767e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d767e:	2200      	movs	r2, #0
   d7680:	2102      	movs	r1, #2
   d7682:	6840      	ldr	r0, [r0, #4]
   d7684:	f7fe bef0 	b.w	d6468 <network_disconnect>

000d7688 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7688:	2200      	movs	r2, #0
   d768a:	4611      	mov	r1, r2
   d768c:	6840      	ldr	r0, [r0, #4]
   d768e:	f7fe bee3 	b.w	d6458 <network_connecting>

000d7692 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7692:	2200      	movs	r2, #0
   d7694:	4611      	mov	r1, r2
   d7696:	6840      	ldr	r0, [r0, #4]
   d7698:	f7fe beee 	b.w	d6478 <network_ready>

000d769c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d769c:	2300      	movs	r3, #0
   d769e:	461a      	mov	r2, r3
   d76a0:	4619      	mov	r1, r3
   d76a2:	6840      	ldr	r0, [r0, #4]
   d76a4:	f7fe bef0 	b.w	d6488 <network_on>

000d76a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d76a8:	2300      	movs	r3, #0
   d76aa:	461a      	mov	r2, r3
   d76ac:	4619      	mov	r1, r3
   d76ae:	6840      	ldr	r0, [r0, #4]
   d76b0:	f7fe bef2 	b.w	d6498 <network_off>

000d76b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d76b4:	2200      	movs	r2, #0
   d76b6:	f081 0101 	eor.w	r1, r1, #1
   d76ba:	6840      	ldr	r0, [r0, #4]
   d76bc:	f7fe bef4 	b.w	d64a8 <network_listen>

000d76c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d76c0:	2200      	movs	r2, #0
   d76c2:	6840      	ldr	r0, [r0, #4]
   d76c4:	f7fe bf00 	b.w	d64c8 <network_set_listen_timeout>

000d76c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d76c8:	2200      	movs	r2, #0
   d76ca:	4611      	mov	r1, r2
   d76cc:	6840      	ldr	r0, [r0, #4]
   d76ce:	f7fe bf03 	b.w	d64d8 <network_get_listen_timeout>

000d76d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d76d2:	2200      	movs	r2, #0
   d76d4:	4611      	mov	r1, r2
   d76d6:	6840      	ldr	r0, [r0, #4]
   d76d8:	f7fe beee 	b.w	d64b8 <network_listening>

000d76dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d76dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d76e0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d76e2:	b095      	sub	sp, #84	; 0x54
   d76e4:	4616      	mov	r6, r2
   d76e6:	460d      	mov	r5, r1
   d76e8:	4607      	mov	r7, r0
    IPAddress addr;
   d76ea:	f7ff fa51 	bl	d6b90 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d76ee:	4621      	mov	r1, r4
   d76f0:	2220      	movs	r2, #32
   d76f2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d76f4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d76f6:	f000 ffba 	bl	d866e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d76fa:	2340      	movs	r3, #64	; 0x40
   d76fc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d76fe:	4621      	mov	r1, r4
   d7700:	466b      	mov	r3, sp
   d7702:	aa0c      	add	r2, sp, #48	; 0x30
   d7704:	4630      	mov	r0, r6
   d7706:	f7fe fc93 	bl	d6030 <netdb_getaddrinfo>
    if (!r) {
   d770a:	4604      	mov	r4, r0
   d770c:	2800      	cmp	r0, #0
   d770e:	d144      	bne.n	d779a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7710:	4602      	mov	r2, r0
   d7712:	2101      	movs	r1, #1
   d7714:	6868      	ldr	r0, [r5, #4]
   d7716:	f7fe feaf 	bl	d6478 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d771a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d771c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d771e:	4622      	mov	r2, r4
   d7720:	6868      	ldr	r0, [r5, #4]
   d7722:	f7fe fea9 	bl	d6478 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7726:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7728:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d772a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d772c:	2e00      	cmp	r6, #0
   d772e:	d034      	beq.n	d779a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7730:	2900      	cmp	r1, #0
   d7732:	d132      	bne.n	d779a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7734:	6873      	ldr	r3, [r6, #4]
   d7736:	2b02      	cmp	r3, #2
   d7738:	d002      	beq.n	d7740 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d773a:	2b0a      	cmp	r3, #10
   d773c:	d009      	beq.n	d7752 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d773e:	e02a      	b.n	d7796 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7740:	f1b8 0f00 	cmp.w	r8, #0
   d7744:	d027      	beq.n	d7796 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7746:	6971      	ldr	r1, [r6, #20]
   d7748:	4638      	mov	r0, r7
   d774a:	3104      	adds	r1, #4
   d774c:	f7ff fa70 	bl	d6c30 <_ZN9IPAddressaSEPKh>
   d7750:	e020      	b.n	d7794 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7752:	f1b9 0f00 	cmp.w	r9, #0
   d7756:	d01e      	beq.n	d7796 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7758:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d775a:	2211      	movs	r2, #17
   d775c:	a801      	add	r0, sp, #4
   d775e:	f000 ff86 	bl	d866e <memset>
                    a.v = 6;
   d7762:	2306      	movs	r3, #6
   d7764:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7768:	ad01      	add	r5, sp, #4
   d776a:	f104 0308 	add.w	r3, r4, #8
   d776e:	3418      	adds	r4, #24
   d7770:	6818      	ldr	r0, [r3, #0]
   d7772:	6859      	ldr	r1, [r3, #4]
   d7774:	462a      	mov	r2, r5
   d7776:	c203      	stmia	r2!, {r0, r1}
   d7778:	3308      	adds	r3, #8
   d777a:	42a3      	cmp	r3, r4
   d777c:	4615      	mov	r5, r2
   d777e:	d1f7      	bne.n	d7770 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7780:	a901      	add	r1, sp, #4
   d7782:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7784:	ad07      	add	r5, sp, #28
   d7786:	f7ff fa11 	bl	d6bac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d778a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d778c:	1d3c      	adds	r4, r7, #4
   d778e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7790:	682b      	ldr	r3, [r5, #0]
   d7792:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7794:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7796:	69f6      	ldr	r6, [r6, #28]
   d7798:	e7c8      	b.n	d772c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d779a:	9800      	ldr	r0, [sp, #0]
   d779c:	f7fe fc40 	bl	d6020 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d77a0:	4638      	mov	r0, r7
   d77a2:	b015      	add	sp, #84	; 0x54
   d77a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d77a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d77a8:	4b02      	ldr	r3, [pc, #8]	; (d77b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d77aa:	4a03      	ldr	r2, [pc, #12]	; (d77b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d77ac:	601a      	str	r2, [r3, #0]
   d77ae:	2200      	movs	r2, #0
   d77b0:	605a      	str	r2, [r3, #4]
   d77b2:	4770      	bx	lr
   d77b4:	2003e70c 	.word	0x2003e70c
   d77b8:	000db054 	.word	0x000db054

000d77bc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d77bc:	b510      	push	{r4, lr}
   d77be:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d77c0:	480f      	ldr	r0, [pc, #60]	; (d7800 <pinAvailable+0x44>)
   d77c2:	f7fe ff89 	bl	d66d8 <_ZN8SPIClass9isEnabledEv>
   d77c6:	b128      	cbz	r0, d77d4 <pinAvailable+0x18>
   d77c8:	f1a4 030b 	sub.w	r3, r4, #11
   d77cc:	2b02      	cmp	r3, #2
   d77ce:	d801      	bhi.n	d77d4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d77d0:	2000      	movs	r0, #0
   d77d2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d77d4:	f000 f8b2 	bl	d793c <_Z19__fetch_global_Wirev>
   d77d8:	f7ff fb92 	bl	d6f00 <_ZN7TwoWire9isEnabledEv>
   d77dc:	b108      	cbz	r0, d77e2 <pinAvailable+0x26>
   d77de:	2c01      	cmp	r4, #1
   d77e0:	d9f6      	bls.n	d77d0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d77e2:	f7ff fb15 	bl	d6e10 <_Z22__fetch_global_Serial1v>
   d77e6:	f7ff fb0f 	bl	d6e08 <_ZN11USARTSerial9isEnabledEv>
   d77ea:	b118      	cbz	r0, d77f4 <pinAvailable+0x38>
   d77ec:	f1a4 0309 	sub.w	r3, r4, #9
   d77f0:	2b01      	cmp	r3, #1
   d77f2:	d9ed      	bls.n	d77d0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d77f4:	2c23      	cmp	r4, #35	; 0x23
   d77f6:	bf8c      	ite	hi
   d77f8:	2000      	movhi	r0, #0
   d77fa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d77fc:	bd10      	pop	{r4, pc}
   d77fe:	bf00      	nop
   d7800:	2003e714 	.word	0x2003e714

000d7804 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7804:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7806:	b538      	push	{r3, r4, r5, lr}
   d7808:	4604      	mov	r4, r0
   d780a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d780c:	d80a      	bhi.n	d7824 <pinMode+0x20>
   d780e:	29ff      	cmp	r1, #255	; 0xff
   d7810:	d008      	beq.n	d7824 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7812:	f7ff ffd3 	bl	d77bc <pinAvailable>
   d7816:	b128      	cbz	r0, d7824 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7818:	4629      	mov	r1, r5
   d781a:	4620      	mov	r0, r4
}
   d781c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7820:	f7fe bc1e 	b.w	d6060 <HAL_Pin_Mode>
   d7824:	bd38      	pop	{r3, r4, r5, pc}

000d7826 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7826:	b538      	push	{r3, r4, r5, lr}
   d7828:	4604      	mov	r4, r0
   d782a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d782c:	f7fe fc20 	bl	d6070 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7830:	28ff      	cmp	r0, #255	; 0xff
   d7832:	d010      	beq.n	d7856 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7834:	2806      	cmp	r0, #6
   d7836:	d804      	bhi.n	d7842 <digitalWrite+0x1c>
   d7838:	234d      	movs	r3, #77	; 0x4d
   d783a:	fa23 f000 	lsr.w	r0, r3, r0
   d783e:	07c3      	lsls	r3, r0, #31
   d7840:	d409      	bmi.n	d7856 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7842:	4620      	mov	r0, r4
   d7844:	f7ff ffba 	bl	d77bc <pinAvailable>
   d7848:	b128      	cbz	r0, d7856 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d784a:	4629      	mov	r1, r5
   d784c:	4620      	mov	r0, r4
}
   d784e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7852:	f7fe bc15 	b.w	d6080 <HAL_GPIO_Write>
   d7856:	bd38      	pop	{r3, r4, r5, pc}

000d7858 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7858:	b510      	push	{r4, lr}
   d785a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d785c:	f7fe fc08 	bl	d6070 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7860:	3804      	subs	r0, #4
   d7862:	b2c0      	uxtb	r0, r0
   d7864:	2801      	cmp	r0, #1
   d7866:	d908      	bls.n	d787a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7868:	4620      	mov	r0, r4
   d786a:	f7ff ffa7 	bl	d77bc <pinAvailable>
   d786e:	b120      	cbz	r0, d787a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7870:	4620      	mov	r0, r4
}
   d7872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7876:	f7fe bc0b 	b.w	d6090 <HAL_GPIO_Read>
}
   d787a:	2000      	movs	r0, #0
   d787c:	bd10      	pop	{r4, pc}

000d787e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d787e:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d7880:	b510      	push	{r4, lr}
   d7882:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7884:	bf9c      	itt	ls
   d7886:	340e      	addls	r4, #14
   d7888:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d788a:	4620      	mov	r0, r4
   d788c:	f7ff ff96 	bl	d77bc <pinAvailable>
   d7890:	b150      	cbz	r0, d78a8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7892:	2103      	movs	r1, #3
   d7894:	4620      	mov	r0, r4
   d7896:	f7fe fbdb 	bl	d6050 <HAL_Validate_Pin_Function>
   d789a:	2803      	cmp	r0, #3
   d789c:	d104      	bne.n	d78a8 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d789e:	4620      	mov	r0, r4
}
   d78a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d78a4:	f7fe bc04 	b.w	d60b0 <HAL_ADC_Read>
}
   d78a8:	2000      	movs	r0, #0
   d78aa:	bd10      	pop	{r4, pc}

000d78ac <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d78ac:	b538      	push	{r3, r4, r5, lr}
   d78ae:	4604      	mov	r4, r0
   d78b0:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d78b2:	f7ff ff83 	bl	d77bc <pinAvailable>
   d78b6:	b1f0      	cbz	r0, d78f6 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d78b8:	2104      	movs	r1, #4
   d78ba:	4620      	mov	r0, r4
   d78bc:	f7fe fbc8 	bl	d6050 <HAL_Validate_Pin_Function>
   d78c0:	2804      	cmp	r0, #4
   d78c2:	d105      	bne.n	d78d0 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d78c4:	b2a9      	uxth	r1, r5
   d78c6:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d78c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d78cc:	f7fe bbe8 	b.w	d60a0 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d78d0:	2102      	movs	r1, #2
   d78d2:	4620      	mov	r0, r4
   d78d4:	f7fe fbbc 	bl	d6050 <HAL_Validate_Pin_Function>
   d78d8:	2802      	cmp	r0, #2
   d78da:	d10c      	bne.n	d78f6 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d78dc:	4620      	mov	r0, r4
   d78de:	f7fe fbc7 	bl	d6070 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d78e2:	2801      	cmp	r0, #1
   d78e4:	d001      	beq.n	d78ea <_Z11analogWritetm+0x3e>
   d78e6:	2804      	cmp	r0, #4
   d78e8:	d105      	bne.n	d78f6 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d78ea:	4629      	mov	r1, r5
   d78ec:	4620      	mov	r0, r4
    }
}
   d78ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d78f2:	f7fe bbe5 	b.w	d60c0 <HAL_PWM_Write_Ext>
   d78f6:	bd38      	pop	{r3, r4, r5, pc}

000d78f8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d78f8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d78fa:	4c0c      	ldr	r4, [pc, #48]	; (d792c <_GLOBAL__sub_I_SPI+0x34>)
   d78fc:	4e0c      	ldr	r6, [pc, #48]	; (d7930 <_GLOBAL__sub_I_SPI+0x38>)
   d78fe:	4d0d      	ldr	r5, [pc, #52]	; (d7934 <_GLOBAL__sub_I_SPI+0x3c>)
   d7900:	2100      	movs	r1, #0
   d7902:	4620      	mov	r0, r4
   d7904:	f7fe fe6e 	bl	d65e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7908:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d790a:	4c0b      	ldr	r4, [pc, #44]	; (d7938 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d790c:	4632      	mov	r2, r6
   d790e:	4629      	mov	r1, r5
   d7910:	f000 f834 	bl	d797c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7914:	2101      	movs	r1, #1
   d7916:	4620      	mov	r0, r4
   d7918:	f7fe fe64 	bl	d65e4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d791c:	4632      	mov	r2, r6
   d791e:	4629      	mov	r1, r5
   d7920:	4620      	mov	r0, r4
   d7922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7926:	f000 b829 	b.w	d797c <__aeabi_atexit>
   d792a:	bf00      	nop
   d792c:	2003e714 	.word	0x2003e714
   d7930:	2003e0d8 	.word	0x2003e0d8
   d7934:	000d65d5 	.word	0x000d65d5
   d7938:	2003e724 	.word	0x2003e724

000d793c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d793c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d793e:	4d0b      	ldr	r5, [pc, #44]	; (d796c <_Z19__fetch_global_Wirev+0x30>)
   d7940:	6829      	ldr	r1, [r5, #0]
   d7942:	f011 0401 	ands.w	r4, r1, #1
   d7946:	d10f      	bne.n	d7968 <_Z19__fetch_global_Wirev+0x2c>
   d7948:	4628      	mov	r0, r5
   d794a:	f7fc fbb7 	bl	d40bc <__cxa_guard_acquire>
   d794e:	b158      	cbz	r0, d7968 <_Z19__fetch_global_Wirev+0x2c>
   d7950:	4621      	mov	r1, r4
   d7952:	4807      	ldr	r0, [pc, #28]	; (d7970 <_Z19__fetch_global_Wirev+0x34>)
   d7954:	f7ff faae 	bl	d6eb4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7958:	4628      	mov	r0, r5
   d795a:	f7fc fbb4 	bl	d40c6 <__cxa_guard_release>
   d795e:	4a05      	ldr	r2, [pc, #20]	; (d7974 <_Z19__fetch_global_Wirev+0x38>)
   d7960:	4905      	ldr	r1, [pc, #20]	; (d7978 <_Z19__fetch_global_Wirev+0x3c>)
   d7962:	4803      	ldr	r0, [pc, #12]	; (d7970 <_Z19__fetch_global_Wirev+0x34>)
   d7964:	f000 f80a 	bl	d797c <__aeabi_atexit>
	return wire;
}
   d7968:	4801      	ldr	r0, [pc, #4]	; (d7970 <_Z19__fetch_global_Wirev+0x34>)
   d796a:	bd38      	pop	{r3, r4, r5, pc}
   d796c:	2003e738 	.word	0x2003e738
   d7970:	2003e73c 	.word	0x2003e73c
   d7974:	2003e0d8 	.word	0x2003e0d8
   d7978:	000d6e5d 	.word	0x000d6e5d

000d797c <__aeabi_atexit>:
   d797c:	460b      	mov	r3, r1
   d797e:	4601      	mov	r1, r0
   d7980:	4618      	mov	r0, r3
   d7982:	f000 be57 	b.w	d8634 <__cxa_atexit>

000d7986 <_ZdlPvj>:
   d7986:	f7fc bb8a 	b.w	d409e <_ZdlPv>
	...

000d798c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d798c:	4b18      	ldr	r3, [pc, #96]	; (d79f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d798e:	681a      	ldr	r2, [r3, #0]
   d7990:	07d1      	lsls	r1, r2, #31
   d7992:	bf5c      	itt	pl
   d7994:	2201      	movpl	r2, #1
   d7996:	601a      	strpl	r2, [r3, #0]
   d7998:	4b16      	ldr	r3, [pc, #88]	; (d79f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d799a:	681a      	ldr	r2, [r3, #0]
   d799c:	07d2      	lsls	r2, r2, #31
   d799e:	bf5c      	itt	pl
   d79a0:	2201      	movpl	r2, #1
   d79a2:	601a      	strpl	r2, [r3, #0]
   d79a4:	4b14      	ldr	r3, [pc, #80]	; (d79f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d79a6:	681a      	ldr	r2, [r3, #0]
   d79a8:	07d0      	lsls	r0, r2, #31
   d79aa:	bf5c      	itt	pl
   d79ac:	2201      	movpl	r2, #1
   d79ae:	601a      	strpl	r2, [r3, #0]
   d79b0:	4b12      	ldr	r3, [pc, #72]	; (d79fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d79b2:	681a      	ldr	r2, [r3, #0]
   d79b4:	07d1      	lsls	r1, r2, #31
   d79b6:	bf5c      	itt	pl
   d79b8:	2201      	movpl	r2, #1
   d79ba:	601a      	strpl	r2, [r3, #0]
   d79bc:	4b10      	ldr	r3, [pc, #64]	; (d7a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d79be:	681a      	ldr	r2, [r3, #0]
   d79c0:	07d2      	lsls	r2, r2, #31
   d79c2:	bf5c      	itt	pl
   d79c4:	2201      	movpl	r2, #1
   d79c6:	601a      	strpl	r2, [r3, #0]
   d79c8:	4b0e      	ldr	r3, [pc, #56]	; (d7a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d79ca:	681a      	ldr	r2, [r3, #0]
   d79cc:	07d0      	lsls	r0, r2, #31
   d79ce:	bf5c      	itt	pl
   d79d0:	2201      	movpl	r2, #1
   d79d2:	601a      	strpl	r2, [r3, #0]
   d79d4:	4b0c      	ldr	r3, [pc, #48]	; (d7a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d79d6:	681a      	ldr	r2, [r3, #0]
   d79d8:	07d1      	lsls	r1, r2, #31
   d79da:	bf5c      	itt	pl
   d79dc:	2201      	movpl	r2, #1
   d79de:	601a      	strpl	r2, [r3, #0]
   d79e0:	4b0a      	ldr	r3, [pc, #40]	; (d7a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d79e2:	681a      	ldr	r2, [r3, #0]
   d79e4:	07d2      	lsls	r2, r2, #31
   d79e6:	bf5c      	itt	pl
   d79e8:	2201      	movpl	r2, #1
   d79ea:	601a      	strpl	r2, [r3, #0]
   d79ec:	4770      	bx	lr
   d79ee:	bf00      	nop
   d79f0:	2003e76c 	.word	0x2003e76c
   d79f4:	2003e768 	.word	0x2003e768
   d79f8:	2003e764 	.word	0x2003e764
   d79fc:	2003e760 	.word	0x2003e760
   d7a00:	2003e75c 	.word	0x2003e75c
   d7a04:	2003e758 	.word	0x2003e758
   d7a08:	2003e754 	.word	0x2003e754
   d7a0c:	2003e750 	.word	0x2003e750

000d7a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7a10:	4b24      	ldr	r3, [pc, #144]	; (d7aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7a12:	681a      	ldr	r2, [r3, #0]
   d7a14:	07d0      	lsls	r0, r2, #31
   d7a16:	bf5c      	itt	pl
   d7a18:	2201      	movpl	r2, #1
   d7a1a:	601a      	strpl	r2, [r3, #0]
   d7a1c:	4b22      	ldr	r3, [pc, #136]	; (d7aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7a1e:	681a      	ldr	r2, [r3, #0]
   d7a20:	07d1      	lsls	r1, r2, #31
   d7a22:	bf5c      	itt	pl
   d7a24:	2201      	movpl	r2, #1
   d7a26:	601a      	strpl	r2, [r3, #0]
   d7a28:	4b20      	ldr	r3, [pc, #128]	; (d7aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7a2a:	681a      	ldr	r2, [r3, #0]
   d7a2c:	07d2      	lsls	r2, r2, #31
   d7a2e:	bf5c      	itt	pl
   d7a30:	2201      	movpl	r2, #1
   d7a32:	601a      	strpl	r2, [r3, #0]
   d7a34:	4b1e      	ldr	r3, [pc, #120]	; (d7ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7a36:	681a      	ldr	r2, [r3, #0]
   d7a38:	07d0      	lsls	r0, r2, #31
   d7a3a:	bf5c      	itt	pl
   d7a3c:	2201      	movpl	r2, #1
   d7a3e:	601a      	strpl	r2, [r3, #0]
   d7a40:	4b1c      	ldr	r3, [pc, #112]	; (d7ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7a42:	681a      	ldr	r2, [r3, #0]
   d7a44:	07d1      	lsls	r1, r2, #31
   d7a46:	bf5c      	itt	pl
   d7a48:	2201      	movpl	r2, #1
   d7a4a:	601a      	strpl	r2, [r3, #0]
   d7a4c:	4b1a      	ldr	r3, [pc, #104]	; (d7ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7a4e:	681a      	ldr	r2, [r3, #0]
   d7a50:	07d2      	lsls	r2, r2, #31
   d7a52:	bf5c      	itt	pl
   d7a54:	2201      	movpl	r2, #1
   d7a56:	601a      	strpl	r2, [r3, #0]
   d7a58:	4b18      	ldr	r3, [pc, #96]	; (d7abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7a5a:	681a      	ldr	r2, [r3, #0]
   d7a5c:	07d0      	lsls	r0, r2, #31
   d7a5e:	bf5c      	itt	pl
   d7a60:	2201      	movpl	r2, #1
   d7a62:	601a      	strpl	r2, [r3, #0]
   d7a64:	4b16      	ldr	r3, [pc, #88]	; (d7ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7a66:	681a      	ldr	r2, [r3, #0]
   d7a68:	07d1      	lsls	r1, r2, #31
   d7a6a:	bf5c      	itt	pl
   d7a6c:	2201      	movpl	r2, #1
   d7a6e:	601a      	strpl	r2, [r3, #0]
   d7a70:	4b14      	ldr	r3, [pc, #80]	; (d7ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7a72:	681a      	ldr	r2, [r3, #0]
   d7a74:	07d2      	lsls	r2, r2, #31
   d7a76:	bf5c      	itt	pl
   d7a78:	2201      	movpl	r2, #1
   d7a7a:	601a      	strpl	r2, [r3, #0]
   d7a7c:	4b12      	ldr	r3, [pc, #72]	; (d7ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7a7e:	681a      	ldr	r2, [r3, #0]
   d7a80:	07d0      	lsls	r0, r2, #31
   d7a82:	bf5c      	itt	pl
   d7a84:	2201      	movpl	r2, #1
   d7a86:	601a      	strpl	r2, [r3, #0]
   d7a88:	4b10      	ldr	r3, [pc, #64]	; (d7acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7a8a:	681a      	ldr	r2, [r3, #0]
   d7a8c:	07d1      	lsls	r1, r2, #31
   d7a8e:	bf5c      	itt	pl
   d7a90:	2201      	movpl	r2, #1
   d7a92:	601a      	strpl	r2, [r3, #0]
   d7a94:	4b0e      	ldr	r3, [pc, #56]	; (d7ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7a96:	681a      	ldr	r2, [r3, #0]
   d7a98:	07d2      	lsls	r2, r2, #31
   d7a9a:	bf5c      	itt	pl
   d7a9c:	2201      	movpl	r2, #1
   d7a9e:	601a      	strpl	r2, [r3, #0]
   d7aa0:	4770      	bx	lr
   d7aa2:	bf00      	nop
   d7aa4:	2003e79c 	.word	0x2003e79c
   d7aa8:	2003e798 	.word	0x2003e798
   d7aac:	2003e794 	.word	0x2003e794
   d7ab0:	2003e790 	.word	0x2003e790
   d7ab4:	2003e78c 	.word	0x2003e78c
   d7ab8:	2003e788 	.word	0x2003e788
   d7abc:	2003e784 	.word	0x2003e784
   d7ac0:	2003e780 	.word	0x2003e780
   d7ac4:	2003e77c 	.word	0x2003e77c
   d7ac8:	2003e778 	.word	0x2003e778
   d7acc:	2003e774 	.word	0x2003e774
   d7ad0:	2003e770 	.word	0x2003e770

000d7ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7ad4:	4b24      	ldr	r3, [pc, #144]	; (d7b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7ad6:	681a      	ldr	r2, [r3, #0]
   d7ad8:	07d0      	lsls	r0, r2, #31
   d7ada:	bf5c      	itt	pl
   d7adc:	2201      	movpl	r2, #1
   d7ade:	601a      	strpl	r2, [r3, #0]
   d7ae0:	4b22      	ldr	r3, [pc, #136]	; (d7b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7ae2:	681a      	ldr	r2, [r3, #0]
   d7ae4:	07d1      	lsls	r1, r2, #31
   d7ae6:	bf5c      	itt	pl
   d7ae8:	2201      	movpl	r2, #1
   d7aea:	601a      	strpl	r2, [r3, #0]
   d7aec:	4b20      	ldr	r3, [pc, #128]	; (d7b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7aee:	681a      	ldr	r2, [r3, #0]
   d7af0:	07d2      	lsls	r2, r2, #31
   d7af2:	bf5c      	itt	pl
   d7af4:	2201      	movpl	r2, #1
   d7af6:	601a      	strpl	r2, [r3, #0]
   d7af8:	4b1e      	ldr	r3, [pc, #120]	; (d7b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7afa:	681a      	ldr	r2, [r3, #0]
   d7afc:	07d0      	lsls	r0, r2, #31
   d7afe:	bf5c      	itt	pl
   d7b00:	2201      	movpl	r2, #1
   d7b02:	601a      	strpl	r2, [r3, #0]
   d7b04:	4b1c      	ldr	r3, [pc, #112]	; (d7b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7b06:	681a      	ldr	r2, [r3, #0]
   d7b08:	07d1      	lsls	r1, r2, #31
   d7b0a:	bf5c      	itt	pl
   d7b0c:	2201      	movpl	r2, #1
   d7b0e:	601a      	strpl	r2, [r3, #0]
   d7b10:	4b1a      	ldr	r3, [pc, #104]	; (d7b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7b12:	681a      	ldr	r2, [r3, #0]
   d7b14:	07d2      	lsls	r2, r2, #31
   d7b16:	bf5c      	itt	pl
   d7b18:	2201      	movpl	r2, #1
   d7b1a:	601a      	strpl	r2, [r3, #0]
   d7b1c:	4b18      	ldr	r3, [pc, #96]	; (d7b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7b1e:	681a      	ldr	r2, [r3, #0]
   d7b20:	07d0      	lsls	r0, r2, #31
   d7b22:	bf5c      	itt	pl
   d7b24:	2201      	movpl	r2, #1
   d7b26:	601a      	strpl	r2, [r3, #0]
   d7b28:	4b16      	ldr	r3, [pc, #88]	; (d7b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7b2a:	681a      	ldr	r2, [r3, #0]
   d7b2c:	07d1      	lsls	r1, r2, #31
   d7b2e:	bf5c      	itt	pl
   d7b30:	2201      	movpl	r2, #1
   d7b32:	601a      	strpl	r2, [r3, #0]
   d7b34:	4b14      	ldr	r3, [pc, #80]	; (d7b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7b36:	681a      	ldr	r2, [r3, #0]
   d7b38:	07d2      	lsls	r2, r2, #31
   d7b3a:	bf5c      	itt	pl
   d7b3c:	2201      	movpl	r2, #1
   d7b3e:	601a      	strpl	r2, [r3, #0]
   d7b40:	4b12      	ldr	r3, [pc, #72]	; (d7b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7b42:	681a      	ldr	r2, [r3, #0]
   d7b44:	07d0      	lsls	r0, r2, #31
   d7b46:	bf5c      	itt	pl
   d7b48:	2201      	movpl	r2, #1
   d7b4a:	601a      	strpl	r2, [r3, #0]
   d7b4c:	4b10      	ldr	r3, [pc, #64]	; (d7b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7b4e:	681a      	ldr	r2, [r3, #0]
   d7b50:	07d1      	lsls	r1, r2, #31
   d7b52:	bf5c      	itt	pl
   d7b54:	2201      	movpl	r2, #1
   d7b56:	601a      	strpl	r2, [r3, #0]
   d7b58:	4b0e      	ldr	r3, [pc, #56]	; (d7b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7b5a:	681a      	ldr	r2, [r3, #0]
   d7b5c:	07d2      	lsls	r2, r2, #31
   d7b5e:	bf5c      	itt	pl
   d7b60:	2201      	movpl	r2, #1
   d7b62:	601a      	strpl	r2, [r3, #0]
   d7b64:	4770      	bx	lr
   d7b66:	bf00      	nop
   d7b68:	2003e7cc 	.word	0x2003e7cc
   d7b6c:	2003e7c8 	.word	0x2003e7c8
   d7b70:	2003e7c4 	.word	0x2003e7c4
   d7b74:	2003e7c0 	.word	0x2003e7c0
   d7b78:	2003e7bc 	.word	0x2003e7bc
   d7b7c:	2003e7b8 	.word	0x2003e7b8
   d7b80:	2003e7b4 	.word	0x2003e7b4
   d7b84:	2003e7b0 	.word	0x2003e7b0
   d7b88:	2003e7ac 	.word	0x2003e7ac
   d7b8c:	2003e7a8 	.word	0x2003e7a8
   d7b90:	2003e7a4 	.word	0x2003e7a4
   d7b94:	2003e7a0 	.word	0x2003e7a0

000d7b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7b98:	4b18      	ldr	r3, [pc, #96]	; (d7bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7b9a:	681a      	ldr	r2, [r3, #0]
   d7b9c:	07d1      	lsls	r1, r2, #31
   d7b9e:	bf5c      	itt	pl
   d7ba0:	2201      	movpl	r2, #1
   d7ba2:	601a      	strpl	r2, [r3, #0]
   d7ba4:	4b16      	ldr	r3, [pc, #88]	; (d7c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7ba6:	681a      	ldr	r2, [r3, #0]
   d7ba8:	07d2      	lsls	r2, r2, #31
   d7baa:	bf5c      	itt	pl
   d7bac:	2201      	movpl	r2, #1
   d7bae:	601a      	strpl	r2, [r3, #0]
   d7bb0:	4b14      	ldr	r3, [pc, #80]	; (d7c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7bb2:	681a      	ldr	r2, [r3, #0]
   d7bb4:	07d0      	lsls	r0, r2, #31
   d7bb6:	bf5c      	itt	pl
   d7bb8:	2201      	movpl	r2, #1
   d7bba:	601a      	strpl	r2, [r3, #0]
   d7bbc:	4b12      	ldr	r3, [pc, #72]	; (d7c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7bbe:	681a      	ldr	r2, [r3, #0]
   d7bc0:	07d1      	lsls	r1, r2, #31
   d7bc2:	bf5c      	itt	pl
   d7bc4:	2201      	movpl	r2, #1
   d7bc6:	601a      	strpl	r2, [r3, #0]
   d7bc8:	4b10      	ldr	r3, [pc, #64]	; (d7c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7bca:	681a      	ldr	r2, [r3, #0]
   d7bcc:	07d2      	lsls	r2, r2, #31
   d7bce:	bf5c      	itt	pl
   d7bd0:	2201      	movpl	r2, #1
   d7bd2:	601a      	strpl	r2, [r3, #0]
   d7bd4:	4b0e      	ldr	r3, [pc, #56]	; (d7c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7bd6:	681a      	ldr	r2, [r3, #0]
   d7bd8:	07d0      	lsls	r0, r2, #31
   d7bda:	bf5c      	itt	pl
   d7bdc:	2201      	movpl	r2, #1
   d7bde:	601a      	strpl	r2, [r3, #0]
   d7be0:	4b0c      	ldr	r3, [pc, #48]	; (d7c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7be2:	681a      	ldr	r2, [r3, #0]
   d7be4:	07d1      	lsls	r1, r2, #31
   d7be6:	bf5c      	itt	pl
   d7be8:	2201      	movpl	r2, #1
   d7bea:	601a      	strpl	r2, [r3, #0]
   d7bec:	4b0a      	ldr	r3, [pc, #40]	; (d7c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7bee:	681a      	ldr	r2, [r3, #0]
   d7bf0:	07d2      	lsls	r2, r2, #31
   d7bf2:	bf5c      	itt	pl
   d7bf4:	2201      	movpl	r2, #1
   d7bf6:	601a      	strpl	r2, [r3, #0]
   d7bf8:	4770      	bx	lr
   d7bfa:	bf00      	nop
   d7bfc:	2003e7ec 	.word	0x2003e7ec
   d7c00:	2003e7e8 	.word	0x2003e7e8
   d7c04:	2003e7e4 	.word	0x2003e7e4
   d7c08:	2003e7e0 	.word	0x2003e7e0
   d7c0c:	2003e7dc 	.word	0x2003e7dc
   d7c10:	2003e7d8 	.word	0x2003e7d8
   d7c14:	2003e7d4 	.word	0x2003e7d4
   d7c18:	2003e7d0 	.word	0x2003e7d0

000d7c1c <__aeabi_drsub>:
   d7c1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7c20:	e002      	b.n	d7c28 <__adddf3>
   d7c22:	bf00      	nop

000d7c24 <__aeabi_dsub>:
   d7c24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7c28 <__adddf3>:
   d7c28:	b530      	push	{r4, r5, lr}
   d7c2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7c2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7c32:	ea94 0f05 	teq	r4, r5
   d7c36:	bf08      	it	eq
   d7c38:	ea90 0f02 	teqeq	r0, r2
   d7c3c:	bf1f      	itttt	ne
   d7c3e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7c42:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7c46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7c4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7c4e:	f000 80e2 	beq.w	d7e16 <__adddf3+0x1ee>
   d7c52:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7c56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7c5a:	bfb8      	it	lt
   d7c5c:	426d      	neglt	r5, r5
   d7c5e:	dd0c      	ble.n	d7c7a <__adddf3+0x52>
   d7c60:	442c      	add	r4, r5
   d7c62:	ea80 0202 	eor.w	r2, r0, r2
   d7c66:	ea81 0303 	eor.w	r3, r1, r3
   d7c6a:	ea82 0000 	eor.w	r0, r2, r0
   d7c6e:	ea83 0101 	eor.w	r1, r3, r1
   d7c72:	ea80 0202 	eor.w	r2, r0, r2
   d7c76:	ea81 0303 	eor.w	r3, r1, r3
   d7c7a:	2d36      	cmp	r5, #54	; 0x36
   d7c7c:	bf88      	it	hi
   d7c7e:	bd30      	pophi	{r4, r5, pc}
   d7c80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7c84:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7c88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7c8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7c90:	d002      	beq.n	d7c98 <__adddf3+0x70>
   d7c92:	4240      	negs	r0, r0
   d7c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7c98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7c9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7ca0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7ca4:	d002      	beq.n	d7cac <__adddf3+0x84>
   d7ca6:	4252      	negs	r2, r2
   d7ca8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7cac:	ea94 0f05 	teq	r4, r5
   d7cb0:	f000 80a7 	beq.w	d7e02 <__adddf3+0x1da>
   d7cb4:	f1a4 0401 	sub.w	r4, r4, #1
   d7cb8:	f1d5 0e20 	rsbs	lr, r5, #32
   d7cbc:	db0d      	blt.n	d7cda <__adddf3+0xb2>
   d7cbe:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7cc2:	fa22 f205 	lsr.w	r2, r2, r5
   d7cc6:	1880      	adds	r0, r0, r2
   d7cc8:	f141 0100 	adc.w	r1, r1, #0
   d7ccc:	fa03 f20e 	lsl.w	r2, r3, lr
   d7cd0:	1880      	adds	r0, r0, r2
   d7cd2:	fa43 f305 	asr.w	r3, r3, r5
   d7cd6:	4159      	adcs	r1, r3
   d7cd8:	e00e      	b.n	d7cf8 <__adddf3+0xd0>
   d7cda:	f1a5 0520 	sub.w	r5, r5, #32
   d7cde:	f10e 0e20 	add.w	lr, lr, #32
   d7ce2:	2a01      	cmp	r2, #1
   d7ce4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7ce8:	bf28      	it	cs
   d7cea:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7cee:	fa43 f305 	asr.w	r3, r3, r5
   d7cf2:	18c0      	adds	r0, r0, r3
   d7cf4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7cf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7cfc:	d507      	bpl.n	d7d0e <__adddf3+0xe6>
   d7cfe:	f04f 0e00 	mov.w	lr, #0
   d7d02:	f1dc 0c00 	rsbs	ip, ip, #0
   d7d06:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7d0a:	eb6e 0101 	sbc.w	r1, lr, r1
   d7d0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7d12:	d31b      	bcc.n	d7d4c <__adddf3+0x124>
   d7d14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7d18:	d30c      	bcc.n	d7d34 <__adddf3+0x10c>
   d7d1a:	0849      	lsrs	r1, r1, #1
   d7d1c:	ea5f 0030 	movs.w	r0, r0, rrx
   d7d20:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7d24:	f104 0401 	add.w	r4, r4, #1
   d7d28:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7d2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7d30:	f080 809a 	bcs.w	d7e68 <__adddf3+0x240>
   d7d34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7d38:	bf08      	it	eq
   d7d3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7d3e:	f150 0000 	adcs.w	r0, r0, #0
   d7d42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7d46:	ea41 0105 	orr.w	r1, r1, r5
   d7d4a:	bd30      	pop	{r4, r5, pc}
   d7d4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7d50:	4140      	adcs	r0, r0
   d7d52:	eb41 0101 	adc.w	r1, r1, r1
   d7d56:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7d5a:	f1a4 0401 	sub.w	r4, r4, #1
   d7d5e:	d1e9      	bne.n	d7d34 <__adddf3+0x10c>
   d7d60:	f091 0f00 	teq	r1, #0
   d7d64:	bf04      	itt	eq
   d7d66:	4601      	moveq	r1, r0
   d7d68:	2000      	moveq	r0, #0
   d7d6a:	fab1 f381 	clz	r3, r1
   d7d6e:	bf08      	it	eq
   d7d70:	3320      	addeq	r3, #32
   d7d72:	f1a3 030b 	sub.w	r3, r3, #11
   d7d76:	f1b3 0220 	subs.w	r2, r3, #32
   d7d7a:	da0c      	bge.n	d7d96 <__adddf3+0x16e>
   d7d7c:	320c      	adds	r2, #12
   d7d7e:	dd08      	ble.n	d7d92 <__adddf3+0x16a>
   d7d80:	f102 0c14 	add.w	ip, r2, #20
   d7d84:	f1c2 020c 	rsb	r2, r2, #12
   d7d88:	fa01 f00c 	lsl.w	r0, r1, ip
   d7d8c:	fa21 f102 	lsr.w	r1, r1, r2
   d7d90:	e00c      	b.n	d7dac <__adddf3+0x184>
   d7d92:	f102 0214 	add.w	r2, r2, #20
   d7d96:	bfd8      	it	le
   d7d98:	f1c2 0c20 	rsble	ip, r2, #32
   d7d9c:	fa01 f102 	lsl.w	r1, r1, r2
   d7da0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7da4:	bfdc      	itt	le
   d7da6:	ea41 010c 	orrle.w	r1, r1, ip
   d7daa:	4090      	lslle	r0, r2
   d7dac:	1ae4      	subs	r4, r4, r3
   d7dae:	bfa2      	ittt	ge
   d7db0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7db4:	4329      	orrge	r1, r5
   d7db6:	bd30      	popge	{r4, r5, pc}
   d7db8:	ea6f 0404 	mvn.w	r4, r4
   d7dbc:	3c1f      	subs	r4, #31
   d7dbe:	da1c      	bge.n	d7dfa <__adddf3+0x1d2>
   d7dc0:	340c      	adds	r4, #12
   d7dc2:	dc0e      	bgt.n	d7de2 <__adddf3+0x1ba>
   d7dc4:	f104 0414 	add.w	r4, r4, #20
   d7dc8:	f1c4 0220 	rsb	r2, r4, #32
   d7dcc:	fa20 f004 	lsr.w	r0, r0, r4
   d7dd0:	fa01 f302 	lsl.w	r3, r1, r2
   d7dd4:	ea40 0003 	orr.w	r0, r0, r3
   d7dd8:	fa21 f304 	lsr.w	r3, r1, r4
   d7ddc:	ea45 0103 	orr.w	r1, r5, r3
   d7de0:	bd30      	pop	{r4, r5, pc}
   d7de2:	f1c4 040c 	rsb	r4, r4, #12
   d7de6:	f1c4 0220 	rsb	r2, r4, #32
   d7dea:	fa20 f002 	lsr.w	r0, r0, r2
   d7dee:	fa01 f304 	lsl.w	r3, r1, r4
   d7df2:	ea40 0003 	orr.w	r0, r0, r3
   d7df6:	4629      	mov	r1, r5
   d7df8:	bd30      	pop	{r4, r5, pc}
   d7dfa:	fa21 f004 	lsr.w	r0, r1, r4
   d7dfe:	4629      	mov	r1, r5
   d7e00:	bd30      	pop	{r4, r5, pc}
   d7e02:	f094 0f00 	teq	r4, #0
   d7e06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7e0a:	bf06      	itte	eq
   d7e0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7e10:	3401      	addeq	r4, #1
   d7e12:	3d01      	subne	r5, #1
   d7e14:	e74e      	b.n	d7cb4 <__adddf3+0x8c>
   d7e16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7e1a:	bf18      	it	ne
   d7e1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7e20:	d029      	beq.n	d7e76 <__adddf3+0x24e>
   d7e22:	ea94 0f05 	teq	r4, r5
   d7e26:	bf08      	it	eq
   d7e28:	ea90 0f02 	teqeq	r0, r2
   d7e2c:	d005      	beq.n	d7e3a <__adddf3+0x212>
   d7e2e:	ea54 0c00 	orrs.w	ip, r4, r0
   d7e32:	bf04      	itt	eq
   d7e34:	4619      	moveq	r1, r3
   d7e36:	4610      	moveq	r0, r2
   d7e38:	bd30      	pop	{r4, r5, pc}
   d7e3a:	ea91 0f03 	teq	r1, r3
   d7e3e:	bf1e      	ittt	ne
   d7e40:	2100      	movne	r1, #0
   d7e42:	2000      	movne	r0, #0
   d7e44:	bd30      	popne	{r4, r5, pc}
   d7e46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7e4a:	d105      	bne.n	d7e58 <__adddf3+0x230>
   d7e4c:	0040      	lsls	r0, r0, #1
   d7e4e:	4149      	adcs	r1, r1
   d7e50:	bf28      	it	cs
   d7e52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7e56:	bd30      	pop	{r4, r5, pc}
   d7e58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7e5c:	bf3c      	itt	cc
   d7e5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7e62:	bd30      	popcc	{r4, r5, pc}
   d7e64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7e68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7e6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7e70:	f04f 0000 	mov.w	r0, #0
   d7e74:	bd30      	pop	{r4, r5, pc}
   d7e76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7e7a:	bf1a      	itte	ne
   d7e7c:	4619      	movne	r1, r3
   d7e7e:	4610      	movne	r0, r2
   d7e80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7e84:	bf1c      	itt	ne
   d7e86:	460b      	movne	r3, r1
   d7e88:	4602      	movne	r2, r0
   d7e8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7e8e:	bf06      	itte	eq
   d7e90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7e94:	ea91 0f03 	teqeq	r1, r3
   d7e98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7e9c:	bd30      	pop	{r4, r5, pc}
   d7e9e:	bf00      	nop

000d7ea0 <__aeabi_ui2d>:
   d7ea0:	f090 0f00 	teq	r0, #0
   d7ea4:	bf04      	itt	eq
   d7ea6:	2100      	moveq	r1, #0
   d7ea8:	4770      	bxeq	lr
   d7eaa:	b530      	push	{r4, r5, lr}
   d7eac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7eb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7eb4:	f04f 0500 	mov.w	r5, #0
   d7eb8:	f04f 0100 	mov.w	r1, #0
   d7ebc:	e750      	b.n	d7d60 <__adddf3+0x138>
   d7ebe:	bf00      	nop

000d7ec0 <__aeabi_i2d>:
   d7ec0:	f090 0f00 	teq	r0, #0
   d7ec4:	bf04      	itt	eq
   d7ec6:	2100      	moveq	r1, #0
   d7ec8:	4770      	bxeq	lr
   d7eca:	b530      	push	{r4, r5, lr}
   d7ecc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7ed0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7ed4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7ed8:	bf48      	it	mi
   d7eda:	4240      	negmi	r0, r0
   d7edc:	f04f 0100 	mov.w	r1, #0
   d7ee0:	e73e      	b.n	d7d60 <__adddf3+0x138>
   d7ee2:	bf00      	nop

000d7ee4 <__aeabi_f2d>:
   d7ee4:	0042      	lsls	r2, r0, #1
   d7ee6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7eea:	ea4f 0131 	mov.w	r1, r1, rrx
   d7eee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7ef2:	bf1f      	itttt	ne
   d7ef4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7ef8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7efc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7f00:	4770      	bxne	lr
   d7f02:	f092 0f00 	teq	r2, #0
   d7f06:	bf14      	ite	ne
   d7f08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7f0c:	4770      	bxeq	lr
   d7f0e:	b530      	push	{r4, r5, lr}
   d7f10:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7f18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7f1c:	e720      	b.n	d7d60 <__adddf3+0x138>
   d7f1e:	bf00      	nop

000d7f20 <__aeabi_ul2d>:
   d7f20:	ea50 0201 	orrs.w	r2, r0, r1
   d7f24:	bf08      	it	eq
   d7f26:	4770      	bxeq	lr
   d7f28:	b530      	push	{r4, r5, lr}
   d7f2a:	f04f 0500 	mov.w	r5, #0
   d7f2e:	e00a      	b.n	d7f46 <__aeabi_l2d+0x16>

000d7f30 <__aeabi_l2d>:
   d7f30:	ea50 0201 	orrs.w	r2, r0, r1
   d7f34:	bf08      	it	eq
   d7f36:	4770      	bxeq	lr
   d7f38:	b530      	push	{r4, r5, lr}
   d7f3a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7f3e:	d502      	bpl.n	d7f46 <__aeabi_l2d+0x16>
   d7f40:	4240      	negs	r0, r0
   d7f42:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7f46:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7f4a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7f4e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7f52:	f43f aedc 	beq.w	d7d0e <__adddf3+0xe6>
   d7f56:	f04f 0203 	mov.w	r2, #3
   d7f5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7f5e:	bf18      	it	ne
   d7f60:	3203      	addne	r2, #3
   d7f62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7f66:	bf18      	it	ne
   d7f68:	3203      	addne	r2, #3
   d7f6a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7f6e:	f1c2 0320 	rsb	r3, r2, #32
   d7f72:	fa00 fc03 	lsl.w	ip, r0, r3
   d7f76:	fa20 f002 	lsr.w	r0, r0, r2
   d7f7a:	fa01 fe03 	lsl.w	lr, r1, r3
   d7f7e:	ea40 000e 	orr.w	r0, r0, lr
   d7f82:	fa21 f102 	lsr.w	r1, r1, r2
   d7f86:	4414      	add	r4, r2
   d7f88:	e6c1      	b.n	d7d0e <__adddf3+0xe6>
   d7f8a:	bf00      	nop

000d7f8c <__aeabi_dmul>:
   d7f8c:	b570      	push	{r4, r5, r6, lr}
   d7f8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7f92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7f96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7f9a:	bf1d      	ittte	ne
   d7f9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7fa0:	ea94 0f0c 	teqne	r4, ip
   d7fa4:	ea95 0f0c 	teqne	r5, ip
   d7fa8:	f000 f8de 	bleq	d8168 <__aeabi_dmul+0x1dc>
   d7fac:	442c      	add	r4, r5
   d7fae:	ea81 0603 	eor.w	r6, r1, r3
   d7fb2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7fb6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7fba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7fbe:	bf18      	it	ne
   d7fc0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7fc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7fcc:	d038      	beq.n	d8040 <__aeabi_dmul+0xb4>
   d7fce:	fba0 ce02 	umull	ip, lr, r0, r2
   d7fd2:	f04f 0500 	mov.w	r5, #0
   d7fd6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7fda:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7fde:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7fe2:	f04f 0600 	mov.w	r6, #0
   d7fe6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7fea:	f09c 0f00 	teq	ip, #0
   d7fee:	bf18      	it	ne
   d7ff0:	f04e 0e01 	orrne.w	lr, lr, #1
   d7ff4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7ff8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7ffc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8000:	d204      	bcs.n	d800c <__aeabi_dmul+0x80>
   d8002:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8006:	416d      	adcs	r5, r5
   d8008:	eb46 0606 	adc.w	r6, r6, r6
   d800c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8010:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8014:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8018:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d801c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8020:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8024:	bf88      	it	hi
   d8026:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d802a:	d81e      	bhi.n	d806a <__aeabi_dmul+0xde>
   d802c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8030:	bf08      	it	eq
   d8032:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8036:	f150 0000 	adcs.w	r0, r0, #0
   d803a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d803e:	bd70      	pop	{r4, r5, r6, pc}
   d8040:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8044:	ea46 0101 	orr.w	r1, r6, r1
   d8048:	ea40 0002 	orr.w	r0, r0, r2
   d804c:	ea81 0103 	eor.w	r1, r1, r3
   d8050:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8054:	bfc2      	ittt	gt
   d8056:	ebd4 050c 	rsbsgt	r5, r4, ip
   d805a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d805e:	bd70      	popgt	{r4, r5, r6, pc}
   d8060:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8064:	f04f 0e00 	mov.w	lr, #0
   d8068:	3c01      	subs	r4, #1
   d806a:	f300 80ab 	bgt.w	d81c4 <__aeabi_dmul+0x238>
   d806e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8072:	bfde      	ittt	le
   d8074:	2000      	movle	r0, #0
   d8076:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d807a:	bd70      	pople	{r4, r5, r6, pc}
   d807c:	f1c4 0400 	rsb	r4, r4, #0
   d8080:	3c20      	subs	r4, #32
   d8082:	da35      	bge.n	d80f0 <__aeabi_dmul+0x164>
   d8084:	340c      	adds	r4, #12
   d8086:	dc1b      	bgt.n	d80c0 <__aeabi_dmul+0x134>
   d8088:	f104 0414 	add.w	r4, r4, #20
   d808c:	f1c4 0520 	rsb	r5, r4, #32
   d8090:	fa00 f305 	lsl.w	r3, r0, r5
   d8094:	fa20 f004 	lsr.w	r0, r0, r4
   d8098:	fa01 f205 	lsl.w	r2, r1, r5
   d809c:	ea40 0002 	orr.w	r0, r0, r2
   d80a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d80a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d80a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d80ac:	fa21 f604 	lsr.w	r6, r1, r4
   d80b0:	eb42 0106 	adc.w	r1, r2, r6
   d80b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d80b8:	bf08      	it	eq
   d80ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d80be:	bd70      	pop	{r4, r5, r6, pc}
   d80c0:	f1c4 040c 	rsb	r4, r4, #12
   d80c4:	f1c4 0520 	rsb	r5, r4, #32
   d80c8:	fa00 f304 	lsl.w	r3, r0, r4
   d80cc:	fa20 f005 	lsr.w	r0, r0, r5
   d80d0:	fa01 f204 	lsl.w	r2, r1, r4
   d80d4:	ea40 0002 	orr.w	r0, r0, r2
   d80d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d80dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d80e0:	f141 0100 	adc.w	r1, r1, #0
   d80e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d80e8:	bf08      	it	eq
   d80ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d80ee:	bd70      	pop	{r4, r5, r6, pc}
   d80f0:	f1c4 0520 	rsb	r5, r4, #32
   d80f4:	fa00 f205 	lsl.w	r2, r0, r5
   d80f8:	ea4e 0e02 	orr.w	lr, lr, r2
   d80fc:	fa20 f304 	lsr.w	r3, r0, r4
   d8100:	fa01 f205 	lsl.w	r2, r1, r5
   d8104:	ea43 0302 	orr.w	r3, r3, r2
   d8108:	fa21 f004 	lsr.w	r0, r1, r4
   d810c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8110:	fa21 f204 	lsr.w	r2, r1, r4
   d8114:	ea20 0002 	bic.w	r0, r0, r2
   d8118:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d811c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8120:	bf08      	it	eq
   d8122:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8126:	bd70      	pop	{r4, r5, r6, pc}
   d8128:	f094 0f00 	teq	r4, #0
   d812c:	d10f      	bne.n	d814e <__aeabi_dmul+0x1c2>
   d812e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8132:	0040      	lsls	r0, r0, #1
   d8134:	eb41 0101 	adc.w	r1, r1, r1
   d8138:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d813c:	bf08      	it	eq
   d813e:	3c01      	subeq	r4, #1
   d8140:	d0f7      	beq.n	d8132 <__aeabi_dmul+0x1a6>
   d8142:	ea41 0106 	orr.w	r1, r1, r6
   d8146:	f095 0f00 	teq	r5, #0
   d814a:	bf18      	it	ne
   d814c:	4770      	bxne	lr
   d814e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8152:	0052      	lsls	r2, r2, #1
   d8154:	eb43 0303 	adc.w	r3, r3, r3
   d8158:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d815c:	bf08      	it	eq
   d815e:	3d01      	subeq	r5, #1
   d8160:	d0f7      	beq.n	d8152 <__aeabi_dmul+0x1c6>
   d8162:	ea43 0306 	orr.w	r3, r3, r6
   d8166:	4770      	bx	lr
   d8168:	ea94 0f0c 	teq	r4, ip
   d816c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8170:	bf18      	it	ne
   d8172:	ea95 0f0c 	teqne	r5, ip
   d8176:	d00c      	beq.n	d8192 <__aeabi_dmul+0x206>
   d8178:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d817c:	bf18      	it	ne
   d817e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8182:	d1d1      	bne.n	d8128 <__aeabi_dmul+0x19c>
   d8184:	ea81 0103 	eor.w	r1, r1, r3
   d8188:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d818c:	f04f 0000 	mov.w	r0, #0
   d8190:	bd70      	pop	{r4, r5, r6, pc}
   d8192:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8196:	bf06      	itte	eq
   d8198:	4610      	moveq	r0, r2
   d819a:	4619      	moveq	r1, r3
   d819c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d81a0:	d019      	beq.n	d81d6 <__aeabi_dmul+0x24a>
   d81a2:	ea94 0f0c 	teq	r4, ip
   d81a6:	d102      	bne.n	d81ae <__aeabi_dmul+0x222>
   d81a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d81ac:	d113      	bne.n	d81d6 <__aeabi_dmul+0x24a>
   d81ae:	ea95 0f0c 	teq	r5, ip
   d81b2:	d105      	bne.n	d81c0 <__aeabi_dmul+0x234>
   d81b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d81b8:	bf1c      	itt	ne
   d81ba:	4610      	movne	r0, r2
   d81bc:	4619      	movne	r1, r3
   d81be:	d10a      	bne.n	d81d6 <__aeabi_dmul+0x24a>
   d81c0:	ea81 0103 	eor.w	r1, r1, r3
   d81c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d81c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d81cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d81d0:	f04f 0000 	mov.w	r0, #0
   d81d4:	bd70      	pop	{r4, r5, r6, pc}
   d81d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d81da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d81de:	bd70      	pop	{r4, r5, r6, pc}

000d81e0 <__aeabi_ddiv>:
   d81e0:	b570      	push	{r4, r5, r6, lr}
   d81e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d81e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d81ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d81ee:	bf1d      	ittte	ne
   d81f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d81f4:	ea94 0f0c 	teqne	r4, ip
   d81f8:	ea95 0f0c 	teqne	r5, ip
   d81fc:	f000 f8a7 	bleq	d834e <__aeabi_ddiv+0x16e>
   d8200:	eba4 0405 	sub.w	r4, r4, r5
   d8204:	ea81 0e03 	eor.w	lr, r1, r3
   d8208:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d820c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8210:	f000 8088 	beq.w	d8324 <__aeabi_ddiv+0x144>
   d8214:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8218:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d821c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8220:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8224:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8228:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d822c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8230:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8234:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8238:	429d      	cmp	r5, r3
   d823a:	bf08      	it	eq
   d823c:	4296      	cmpeq	r6, r2
   d823e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8242:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8246:	d202      	bcs.n	d824e <__aeabi_ddiv+0x6e>
   d8248:	085b      	lsrs	r3, r3, #1
   d824a:	ea4f 0232 	mov.w	r2, r2, rrx
   d824e:	1ab6      	subs	r6, r6, r2
   d8250:	eb65 0503 	sbc.w	r5, r5, r3
   d8254:	085b      	lsrs	r3, r3, #1
   d8256:	ea4f 0232 	mov.w	r2, r2, rrx
   d825a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d825e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8262:	ebb6 0e02 	subs.w	lr, r6, r2
   d8266:	eb75 0e03 	sbcs.w	lr, r5, r3
   d826a:	bf22      	ittt	cs
   d826c:	1ab6      	subcs	r6, r6, r2
   d826e:	4675      	movcs	r5, lr
   d8270:	ea40 000c 	orrcs.w	r0, r0, ip
   d8274:	085b      	lsrs	r3, r3, #1
   d8276:	ea4f 0232 	mov.w	r2, r2, rrx
   d827a:	ebb6 0e02 	subs.w	lr, r6, r2
   d827e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8282:	bf22      	ittt	cs
   d8284:	1ab6      	subcs	r6, r6, r2
   d8286:	4675      	movcs	r5, lr
   d8288:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d828c:	085b      	lsrs	r3, r3, #1
   d828e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8292:	ebb6 0e02 	subs.w	lr, r6, r2
   d8296:	eb75 0e03 	sbcs.w	lr, r5, r3
   d829a:	bf22      	ittt	cs
   d829c:	1ab6      	subcs	r6, r6, r2
   d829e:	4675      	movcs	r5, lr
   d82a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d82a4:	085b      	lsrs	r3, r3, #1
   d82a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d82aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d82ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d82b2:	bf22      	ittt	cs
   d82b4:	1ab6      	subcs	r6, r6, r2
   d82b6:	4675      	movcs	r5, lr
   d82b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d82bc:	ea55 0e06 	orrs.w	lr, r5, r6
   d82c0:	d018      	beq.n	d82f4 <__aeabi_ddiv+0x114>
   d82c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d82c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d82ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d82ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d82d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d82d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d82da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d82de:	d1c0      	bne.n	d8262 <__aeabi_ddiv+0x82>
   d82e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d82e4:	d10b      	bne.n	d82fe <__aeabi_ddiv+0x11e>
   d82e6:	ea41 0100 	orr.w	r1, r1, r0
   d82ea:	f04f 0000 	mov.w	r0, #0
   d82ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d82f2:	e7b6      	b.n	d8262 <__aeabi_ddiv+0x82>
   d82f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d82f8:	bf04      	itt	eq
   d82fa:	4301      	orreq	r1, r0
   d82fc:	2000      	moveq	r0, #0
   d82fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8302:	bf88      	it	hi
   d8304:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8308:	f63f aeaf 	bhi.w	d806a <__aeabi_dmul+0xde>
   d830c:	ebb5 0c03 	subs.w	ip, r5, r3
   d8310:	bf04      	itt	eq
   d8312:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8316:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d831a:	f150 0000 	adcs.w	r0, r0, #0
   d831e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8322:	bd70      	pop	{r4, r5, r6, pc}
   d8324:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8328:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d832c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8330:	bfc2      	ittt	gt
   d8332:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8336:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d833a:	bd70      	popgt	{r4, r5, r6, pc}
   d833c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8340:	f04f 0e00 	mov.w	lr, #0
   d8344:	3c01      	subs	r4, #1
   d8346:	e690      	b.n	d806a <__aeabi_dmul+0xde>
   d8348:	ea45 0e06 	orr.w	lr, r5, r6
   d834c:	e68d      	b.n	d806a <__aeabi_dmul+0xde>
   d834e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8352:	ea94 0f0c 	teq	r4, ip
   d8356:	bf08      	it	eq
   d8358:	ea95 0f0c 	teqeq	r5, ip
   d835c:	f43f af3b 	beq.w	d81d6 <__aeabi_dmul+0x24a>
   d8360:	ea94 0f0c 	teq	r4, ip
   d8364:	d10a      	bne.n	d837c <__aeabi_ddiv+0x19c>
   d8366:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d836a:	f47f af34 	bne.w	d81d6 <__aeabi_dmul+0x24a>
   d836e:	ea95 0f0c 	teq	r5, ip
   d8372:	f47f af25 	bne.w	d81c0 <__aeabi_dmul+0x234>
   d8376:	4610      	mov	r0, r2
   d8378:	4619      	mov	r1, r3
   d837a:	e72c      	b.n	d81d6 <__aeabi_dmul+0x24a>
   d837c:	ea95 0f0c 	teq	r5, ip
   d8380:	d106      	bne.n	d8390 <__aeabi_ddiv+0x1b0>
   d8382:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8386:	f43f aefd 	beq.w	d8184 <__aeabi_dmul+0x1f8>
   d838a:	4610      	mov	r0, r2
   d838c:	4619      	mov	r1, r3
   d838e:	e722      	b.n	d81d6 <__aeabi_dmul+0x24a>
   d8390:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8394:	bf18      	it	ne
   d8396:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d839a:	f47f aec5 	bne.w	d8128 <__aeabi_dmul+0x19c>
   d839e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d83a2:	f47f af0d 	bne.w	d81c0 <__aeabi_dmul+0x234>
   d83a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d83aa:	f47f aeeb 	bne.w	d8184 <__aeabi_dmul+0x1f8>
   d83ae:	e712      	b.n	d81d6 <__aeabi_dmul+0x24a>

000d83b0 <__gedf2>:
   d83b0:	f04f 3cff 	mov.w	ip, #4294967295
   d83b4:	e006      	b.n	d83c4 <__cmpdf2+0x4>
   d83b6:	bf00      	nop

000d83b8 <__ledf2>:
   d83b8:	f04f 0c01 	mov.w	ip, #1
   d83bc:	e002      	b.n	d83c4 <__cmpdf2+0x4>
   d83be:	bf00      	nop

000d83c0 <__cmpdf2>:
   d83c0:	f04f 0c01 	mov.w	ip, #1
   d83c4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d83c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d83cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d83d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d83d4:	bf18      	it	ne
   d83d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d83da:	d01b      	beq.n	d8414 <__cmpdf2+0x54>
   d83dc:	b001      	add	sp, #4
   d83de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d83e2:	bf0c      	ite	eq
   d83e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d83e8:	ea91 0f03 	teqne	r1, r3
   d83ec:	bf02      	ittt	eq
   d83ee:	ea90 0f02 	teqeq	r0, r2
   d83f2:	2000      	moveq	r0, #0
   d83f4:	4770      	bxeq	lr
   d83f6:	f110 0f00 	cmn.w	r0, #0
   d83fa:	ea91 0f03 	teq	r1, r3
   d83fe:	bf58      	it	pl
   d8400:	4299      	cmppl	r1, r3
   d8402:	bf08      	it	eq
   d8404:	4290      	cmpeq	r0, r2
   d8406:	bf2c      	ite	cs
   d8408:	17d8      	asrcs	r0, r3, #31
   d840a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d840e:	f040 0001 	orr.w	r0, r0, #1
   d8412:	4770      	bx	lr
   d8414:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d841c:	d102      	bne.n	d8424 <__cmpdf2+0x64>
   d841e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8422:	d107      	bne.n	d8434 <__cmpdf2+0x74>
   d8424:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8428:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d842c:	d1d6      	bne.n	d83dc <__cmpdf2+0x1c>
   d842e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8432:	d0d3      	beq.n	d83dc <__cmpdf2+0x1c>
   d8434:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8438:	4770      	bx	lr
   d843a:	bf00      	nop

000d843c <__aeabi_cdrcmple>:
   d843c:	4684      	mov	ip, r0
   d843e:	4610      	mov	r0, r2
   d8440:	4662      	mov	r2, ip
   d8442:	468c      	mov	ip, r1
   d8444:	4619      	mov	r1, r3
   d8446:	4663      	mov	r3, ip
   d8448:	e000      	b.n	d844c <__aeabi_cdcmpeq>
   d844a:	bf00      	nop

000d844c <__aeabi_cdcmpeq>:
   d844c:	b501      	push	{r0, lr}
   d844e:	f7ff ffb7 	bl	d83c0 <__cmpdf2>
   d8452:	2800      	cmp	r0, #0
   d8454:	bf48      	it	mi
   d8456:	f110 0f00 	cmnmi.w	r0, #0
   d845a:	bd01      	pop	{r0, pc}

000d845c <__aeabi_dcmpeq>:
   d845c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8460:	f7ff fff4 	bl	d844c <__aeabi_cdcmpeq>
   d8464:	bf0c      	ite	eq
   d8466:	2001      	moveq	r0, #1
   d8468:	2000      	movne	r0, #0
   d846a:	f85d fb08 	ldr.w	pc, [sp], #8
   d846e:	bf00      	nop

000d8470 <__aeabi_dcmplt>:
   d8470:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8474:	f7ff ffea 	bl	d844c <__aeabi_cdcmpeq>
   d8478:	bf34      	ite	cc
   d847a:	2001      	movcc	r0, #1
   d847c:	2000      	movcs	r0, #0
   d847e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8482:	bf00      	nop

000d8484 <__aeabi_dcmple>:
   d8484:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8488:	f7ff ffe0 	bl	d844c <__aeabi_cdcmpeq>
   d848c:	bf94      	ite	ls
   d848e:	2001      	movls	r0, #1
   d8490:	2000      	movhi	r0, #0
   d8492:	f85d fb08 	ldr.w	pc, [sp], #8
   d8496:	bf00      	nop

000d8498 <__aeabi_dcmpge>:
   d8498:	f84d ed08 	str.w	lr, [sp, #-8]!
   d849c:	f7ff ffce 	bl	d843c <__aeabi_cdrcmple>
   d84a0:	bf94      	ite	ls
   d84a2:	2001      	movls	r0, #1
   d84a4:	2000      	movhi	r0, #0
   d84a6:	f85d fb08 	ldr.w	pc, [sp], #8
   d84aa:	bf00      	nop

000d84ac <__aeabi_dcmpgt>:
   d84ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d84b0:	f7ff ffc4 	bl	d843c <__aeabi_cdrcmple>
   d84b4:	bf34      	ite	cc
   d84b6:	2001      	movcc	r0, #1
   d84b8:	2000      	movcs	r0, #0
   d84ba:	f85d fb08 	ldr.w	pc, [sp], #8
   d84be:	bf00      	nop

000d84c0 <__aeabi_dcmpun>:
   d84c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d84c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d84c8:	d102      	bne.n	d84d0 <__aeabi_dcmpun+0x10>
   d84ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d84ce:	d10a      	bne.n	d84e6 <__aeabi_dcmpun+0x26>
   d84d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d84d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d84d8:	d102      	bne.n	d84e0 <__aeabi_dcmpun+0x20>
   d84da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d84de:	d102      	bne.n	d84e6 <__aeabi_dcmpun+0x26>
   d84e0:	f04f 0000 	mov.w	r0, #0
   d84e4:	4770      	bx	lr
   d84e6:	f04f 0001 	mov.w	r0, #1
   d84ea:	4770      	bx	lr

000d84ec <__aeabi_d2iz>:
   d84ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d84f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d84f4:	d215      	bcs.n	d8522 <__aeabi_d2iz+0x36>
   d84f6:	d511      	bpl.n	d851c <__aeabi_d2iz+0x30>
   d84f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d84fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8500:	d912      	bls.n	d8528 <__aeabi_d2iz+0x3c>
   d8502:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d850a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d850e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8512:	fa23 f002 	lsr.w	r0, r3, r2
   d8516:	bf18      	it	ne
   d8518:	4240      	negne	r0, r0
   d851a:	4770      	bx	lr
   d851c:	f04f 0000 	mov.w	r0, #0
   d8520:	4770      	bx	lr
   d8522:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8526:	d105      	bne.n	d8534 <__aeabi_d2iz+0x48>
   d8528:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d852c:	bf08      	it	eq
   d852e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8532:	4770      	bx	lr
   d8534:	f04f 0000 	mov.w	r0, #0
   d8538:	4770      	bx	lr
   d853a:	bf00      	nop

000d853c <__aeabi_d2uiz>:
   d853c:	004a      	lsls	r2, r1, #1
   d853e:	d211      	bcs.n	d8564 <__aeabi_d2uiz+0x28>
   d8540:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8544:	d211      	bcs.n	d856a <__aeabi_d2uiz+0x2e>
   d8546:	d50d      	bpl.n	d8564 <__aeabi_d2uiz+0x28>
   d8548:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d854c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8550:	d40e      	bmi.n	d8570 <__aeabi_d2uiz+0x34>
   d8552:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8556:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d855a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d855e:	fa23 f002 	lsr.w	r0, r3, r2
   d8562:	4770      	bx	lr
   d8564:	f04f 0000 	mov.w	r0, #0
   d8568:	4770      	bx	lr
   d856a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d856e:	d102      	bne.n	d8576 <__aeabi_d2uiz+0x3a>
   d8570:	f04f 30ff 	mov.w	r0, #4294967295
   d8574:	4770      	bx	lr
   d8576:	f04f 0000 	mov.w	r0, #0
   d857a:	4770      	bx	lr

000d857c <__aeabi_d2f>:
   d857c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8580:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8584:	bf24      	itt	cs
   d8586:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d858a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d858e:	d90d      	bls.n	d85ac <__aeabi_d2f+0x30>
   d8590:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8594:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8598:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d859c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d85a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d85a4:	bf08      	it	eq
   d85a6:	f020 0001 	biceq.w	r0, r0, #1
   d85aa:	4770      	bx	lr
   d85ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d85b0:	d121      	bne.n	d85f6 <__aeabi_d2f+0x7a>
   d85b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d85b6:	bfbc      	itt	lt
   d85b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d85bc:	4770      	bxlt	lr
   d85be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d85c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d85c6:	f1c2 0218 	rsb	r2, r2, #24
   d85ca:	f1c2 0c20 	rsb	ip, r2, #32
   d85ce:	fa10 f30c 	lsls.w	r3, r0, ip
   d85d2:	fa20 f002 	lsr.w	r0, r0, r2
   d85d6:	bf18      	it	ne
   d85d8:	f040 0001 	orrne.w	r0, r0, #1
   d85dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d85e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d85e4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d85e8:	ea40 000c 	orr.w	r0, r0, ip
   d85ec:	fa23 f302 	lsr.w	r3, r3, r2
   d85f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d85f4:	e7cc      	b.n	d8590 <__aeabi_d2f+0x14>
   d85f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d85fa:	d107      	bne.n	d860c <__aeabi_d2f+0x90>
   d85fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8600:	bf1e      	ittt	ne
   d8602:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8606:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d860a:	4770      	bxne	lr
   d860c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8610:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8614:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8618:	4770      	bx	lr
   d861a:	bf00      	nop

000d861c <atof>:
   d861c:	2100      	movs	r1, #0
   d861e:	f000 beaf 	b.w	d9380 <strtod>

000d8622 <atoi>:
   d8622:	220a      	movs	r2, #10
   d8624:	2100      	movs	r1, #0
   d8626:	f000 bf39 	b.w	d949c <strtol>

000d862a <atol>:
   d862a:	220a      	movs	r2, #10
   d862c:	2100      	movs	r1, #0
   d862e:	f000 bf35 	b.w	d949c <strtol>
	...

000d8634 <__cxa_atexit>:
   d8634:	b510      	push	{r4, lr}
   d8636:	4c05      	ldr	r4, [pc, #20]	; (d864c <__cxa_atexit+0x18>)
   d8638:	4613      	mov	r3, r2
   d863a:	b12c      	cbz	r4, d8648 <__cxa_atexit+0x14>
   d863c:	460a      	mov	r2, r1
   d863e:	4601      	mov	r1, r0
   d8640:	2002      	movs	r0, #2
   d8642:	f3af 8000 	nop.w
   d8646:	bd10      	pop	{r4, pc}
   d8648:	4620      	mov	r0, r4
   d864a:	bd10      	pop	{r4, pc}
   d864c:	00000000 	.word	0x00000000

000d8650 <_localeconv_r>:
   d8650:	4800      	ldr	r0, [pc, #0]	; (d8654 <_localeconv_r+0x4>)
   d8652:	4770      	bx	lr
   d8654:	2003e0a0 	.word	0x2003e0a0

000d8658 <memcpy>:
   d8658:	b510      	push	{r4, lr}
   d865a:	1e43      	subs	r3, r0, #1
   d865c:	440a      	add	r2, r1
   d865e:	4291      	cmp	r1, r2
   d8660:	d004      	beq.n	d866c <memcpy+0x14>
   d8662:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8666:	f803 4f01 	strb.w	r4, [r3, #1]!
   d866a:	e7f8      	b.n	d865e <memcpy+0x6>
   d866c:	bd10      	pop	{r4, pc}

000d866e <memset>:
   d866e:	4402      	add	r2, r0
   d8670:	4603      	mov	r3, r0
   d8672:	4293      	cmp	r3, r2
   d8674:	d002      	beq.n	d867c <memset+0xe>
   d8676:	f803 1b01 	strb.w	r1, [r3], #1
   d867a:	e7fa      	b.n	d8672 <memset+0x4>
   d867c:	4770      	bx	lr
	...

000d8680 <srand>:
   d8680:	b538      	push	{r3, r4, r5, lr}
   d8682:	4b12      	ldr	r3, [pc, #72]	; (d86cc <srand+0x4c>)
   d8684:	681c      	ldr	r4, [r3, #0]
   d8686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8688:	4605      	mov	r5, r0
   d868a:	b9d3      	cbnz	r3, d86c2 <srand+0x42>
   d868c:	2018      	movs	r0, #24
   d868e:	f7fd ff3b 	bl	d6508 <malloc>
   d8692:	f243 330e 	movw	r3, #13070	; 0x330e
   d8696:	63a0      	str	r0, [r4, #56]	; 0x38
   d8698:	8003      	strh	r3, [r0, #0]
   d869a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d869e:	8043      	strh	r3, [r0, #2]
   d86a0:	f241 2334 	movw	r3, #4660	; 0x1234
   d86a4:	8083      	strh	r3, [r0, #4]
   d86a6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d86aa:	80c3      	strh	r3, [r0, #6]
   d86ac:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d86b0:	8103      	strh	r3, [r0, #8]
   d86b2:	2305      	movs	r3, #5
   d86b4:	8143      	strh	r3, [r0, #10]
   d86b6:	230b      	movs	r3, #11
   d86b8:	8183      	strh	r3, [r0, #12]
   d86ba:	2201      	movs	r2, #1
   d86bc:	2300      	movs	r3, #0
   d86be:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d86c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d86c4:	2200      	movs	r2, #0
   d86c6:	611d      	str	r5, [r3, #16]
   d86c8:	615a      	str	r2, [r3, #20]
   d86ca:	bd38      	pop	{r3, r4, r5, pc}
   d86cc:	2003e09c 	.word	0x2003e09c

000d86d0 <strcmp>:
   d86d0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d86d4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d86d8:	2a01      	cmp	r2, #1
   d86da:	bf28      	it	cs
   d86dc:	429a      	cmpcs	r2, r3
   d86de:	d0f7      	beq.n	d86d0 <strcmp>
   d86e0:	1ad0      	subs	r0, r2, r3
   d86e2:	4770      	bx	lr

000d86e4 <strlen>:
   d86e4:	4603      	mov	r3, r0
   d86e6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d86ea:	2a00      	cmp	r2, #0
   d86ec:	d1fb      	bne.n	d86e6 <strlen+0x2>
   d86ee:	1a18      	subs	r0, r3, r0
   d86f0:	3801      	subs	r0, #1
   d86f2:	4770      	bx	lr

000d86f4 <strncmp>:
   d86f4:	b530      	push	{r4, r5, lr}
   d86f6:	b182      	cbz	r2, d871a <strncmp+0x26>
   d86f8:	1e45      	subs	r5, r0, #1
   d86fa:	3901      	subs	r1, #1
   d86fc:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8700:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8704:	42a3      	cmp	r3, r4
   d8706:	d106      	bne.n	d8716 <strncmp+0x22>
   d8708:	43ec      	mvns	r4, r5
   d870a:	4414      	add	r4, r2
   d870c:	42e0      	cmn	r0, r4
   d870e:	d001      	beq.n	d8714 <strncmp+0x20>
   d8710:	2b00      	cmp	r3, #0
   d8712:	d1f3      	bne.n	d86fc <strncmp+0x8>
   d8714:	461c      	mov	r4, r3
   d8716:	1b18      	subs	r0, r3, r4
   d8718:	bd30      	pop	{r4, r5, pc}
   d871a:	4610      	mov	r0, r2
   d871c:	bd30      	pop	{r4, r5, pc}

000d871e <strncpy>:
   d871e:	b510      	push	{r4, lr}
   d8720:	4603      	mov	r3, r0
   d8722:	b142      	cbz	r2, d8736 <strncpy+0x18>
   d8724:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8728:	f803 4b01 	strb.w	r4, [r3], #1
   d872c:	3a01      	subs	r2, #1
   d872e:	2c00      	cmp	r4, #0
   d8730:	d1f7      	bne.n	d8722 <strncpy+0x4>
   d8732:	441a      	add	r2, r3
   d8734:	e000      	b.n	d8738 <strncpy+0x1a>
   d8736:	bd10      	pop	{r4, pc}
   d8738:	4293      	cmp	r3, r2
   d873a:	d002      	beq.n	d8742 <strncpy+0x24>
   d873c:	f803 4b01 	strb.w	r4, [r3], #1
   d8740:	e7fa      	b.n	d8738 <strncpy+0x1a>
   d8742:	bd10      	pop	{r4, pc}

000d8744 <sulp>:
   d8744:	b570      	push	{r4, r5, r6, lr}
   d8746:	4604      	mov	r4, r0
   d8748:	460d      	mov	r5, r1
   d874a:	ec45 4b10 	vmov	d0, r4, r5
   d874e:	4616      	mov	r6, r2
   d8750:	f001 fc92 	bl	da078 <__ulp>
   d8754:	ec51 0b10 	vmov	r0, r1, d0
   d8758:	b17e      	cbz	r6, d877a <sulp+0x36>
   d875a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d875e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8762:	2b00      	cmp	r3, #0
   d8764:	dd09      	ble.n	d877a <sulp+0x36>
   d8766:	051b      	lsls	r3, r3, #20
   d8768:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d876c:	2400      	movs	r4, #0
   d876e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d8772:	4622      	mov	r2, r4
   d8774:	462b      	mov	r3, r5
   d8776:	f7ff fc09 	bl	d7f8c <__aeabi_dmul>
   d877a:	bd70      	pop	{r4, r5, r6, pc}
   d877c:	0000      	movs	r0, r0
	...

000d8780 <_strtod_r>:
   d8780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8784:	b09d      	sub	sp, #116	; 0x74
   d8786:	2300      	movs	r3, #0
   d8788:	9002      	str	r0, [sp, #8]
   d878a:	460c      	mov	r4, r1
   d878c:	9213      	str	r2, [sp, #76]	; 0x4c
   d878e:	9318      	str	r3, [sp, #96]	; 0x60
   d8790:	f04f 0a00 	mov.w	sl, #0
   d8794:	f04f 0b00 	mov.w	fp, #0
   d8798:	9117      	str	r1, [sp, #92]	; 0x5c
   d879a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d879c:	781a      	ldrb	r2, [r3, #0]
   d879e:	2a0d      	cmp	r2, #13
   d87a0:	d805      	bhi.n	d87ae <_strtod_r+0x2e>
   d87a2:	2a09      	cmp	r2, #9
   d87a4:	d213      	bcs.n	d87ce <_strtod_r+0x4e>
   d87a6:	2a00      	cmp	r2, #0
   d87a8:	f000 81ac 	beq.w	d8b04 <_strtod_r+0x384>
   d87ac:	e012      	b.n	d87d4 <_strtod_r+0x54>
   d87ae:	2a2b      	cmp	r2, #43	; 0x2b
   d87b0:	d004      	beq.n	d87bc <_strtod_r+0x3c>
   d87b2:	2a2d      	cmp	r2, #45	; 0x2d
   d87b4:	d004      	beq.n	d87c0 <_strtod_r+0x40>
   d87b6:	2a20      	cmp	r2, #32
   d87b8:	d10c      	bne.n	d87d4 <_strtod_r+0x54>
   d87ba:	e008      	b.n	d87ce <_strtod_r+0x4e>
   d87bc:	2200      	movs	r2, #0
   d87be:	e000      	b.n	d87c2 <_strtod_r+0x42>
   d87c0:	2201      	movs	r2, #1
   d87c2:	920c      	str	r2, [sp, #48]	; 0x30
   d87c4:	1c5a      	adds	r2, r3, #1
   d87c6:	9217      	str	r2, [sp, #92]	; 0x5c
   d87c8:	785b      	ldrb	r3, [r3, #1]
   d87ca:	b92b      	cbnz	r3, d87d8 <_strtod_r+0x58>
   d87cc:	e19a      	b.n	d8b04 <_strtod_r+0x384>
   d87ce:	3301      	adds	r3, #1
   d87d0:	9317      	str	r3, [sp, #92]	; 0x5c
   d87d2:	e7e2      	b.n	d879a <_strtod_r+0x1a>
   d87d4:	2300      	movs	r3, #0
   d87d6:	930c      	str	r3, [sp, #48]	; 0x30
   d87d8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d87da:	782b      	ldrb	r3, [r5, #0]
   d87dc:	2b30      	cmp	r3, #48	; 0x30
   d87de:	d15c      	bne.n	d889a <_strtod_r+0x11a>
   d87e0:	786b      	ldrb	r3, [r5, #1]
   d87e2:	2b58      	cmp	r3, #88	; 0x58
   d87e4:	d001      	beq.n	d87ea <_strtod_r+0x6a>
   d87e6:	2b78      	cmp	r3, #120	; 0x78
   d87e8:	d14c      	bne.n	d8884 <_strtod_r+0x104>
   d87ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d87ec:	9301      	str	r3, [sp, #4]
   d87ee:	ab18      	add	r3, sp, #96	; 0x60
   d87f0:	9300      	str	r3, [sp, #0]
   d87f2:	4aa9      	ldr	r2, [pc, #676]	; (d8a98 <_strtod_r+0x318>)
   d87f4:	9802      	ldr	r0, [sp, #8]
   d87f6:	ab19      	add	r3, sp, #100	; 0x64
   d87f8:	a917      	add	r1, sp, #92	; 0x5c
   d87fa:	f000 fea4 	bl	d9546 <__gethex>
   d87fe:	f010 0607 	ands.w	r6, r0, #7
   d8802:	4604      	mov	r4, r0
   d8804:	f000 8587 	beq.w	d9316 <_strtod_r+0xb96>
   d8808:	2e06      	cmp	r6, #6
   d880a:	d105      	bne.n	d8818 <_strtod_r+0x98>
   d880c:	3501      	adds	r5, #1
   d880e:	2300      	movs	r3, #0
   d8810:	9517      	str	r5, [sp, #92]	; 0x5c
   d8812:	930c      	str	r3, [sp, #48]	; 0x30
   d8814:	f000 bd7f 	b.w	d9316 <_strtod_r+0xb96>
   d8818:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d881a:	b13a      	cbz	r2, d882c <_strtod_r+0xac>
   d881c:	2135      	movs	r1, #53	; 0x35
   d881e:	a81a      	add	r0, sp, #104	; 0x68
   d8820:	f001 fd17 	bl	da252 <__copybits>
   d8824:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8826:	9802      	ldr	r0, [sp, #8]
   d8828:	f001 f994 	bl	d9b54 <_Bfree>
   d882c:	2e06      	cmp	r6, #6
   d882e:	d822      	bhi.n	d8876 <_strtod_r+0xf6>
   d8830:	e8df f006 	tbb	[pc, r6]
   d8834:	18080d04 	.word	0x18080d04
   d8838:	0d1d      	.short	0x0d1d
   d883a:	04          	.byte	0x04
   d883b:	00          	.byte	0x00
   d883c:	f04f 0b00 	mov.w	fp, #0
   d8840:	46da      	mov	sl, fp
   d8842:	e018      	b.n	d8876 <_strtod_r+0xf6>
   d8844:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8848:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d884c:	e013      	b.n	d8876 <_strtod_r+0xf6>
   d884e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8850:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d8852:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8856:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d885a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d885e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d8862:	e008      	b.n	d8876 <_strtod_r+0xf6>
   d8864:	f8df b234 	ldr.w	fp, [pc, #564]	; d8a9c <_strtod_r+0x31c>
   d8868:	f04f 0a00 	mov.w	sl, #0
   d886c:	e003      	b.n	d8876 <_strtod_r+0xf6>
   d886e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d8872:	f04f 3aff 	mov.w	sl, #4294967295
   d8876:	0721      	lsls	r1, r4, #28
   d8878:	f140 854d 	bpl.w	d9316 <_strtod_r+0xb96>
   d887c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8880:	f000 bd49 	b.w	d9316 <_strtod_r+0xb96>
   d8884:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8886:	1c5a      	adds	r2, r3, #1
   d8888:	9217      	str	r2, [sp, #92]	; 0x5c
   d888a:	785b      	ldrb	r3, [r3, #1]
   d888c:	2b30      	cmp	r3, #48	; 0x30
   d888e:	d0f9      	beq.n	d8884 <_strtod_r+0x104>
   d8890:	2b00      	cmp	r3, #0
   d8892:	f000 8540 	beq.w	d9316 <_strtod_r+0xb96>
   d8896:	2301      	movs	r3, #1
   d8898:	e000      	b.n	d889c <_strtod_r+0x11c>
   d889a:	2300      	movs	r3, #0
   d889c:	f04f 0800 	mov.w	r8, #0
   d88a0:	9306      	str	r3, [sp, #24]
   d88a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d88a4:	9307      	str	r3, [sp, #28]
   d88a6:	f8cd 8014 	str.w	r8, [sp, #20]
   d88aa:	f8cd 8010 	str.w	r8, [sp, #16]
   d88ae:	220a      	movs	r2, #10
   d88b0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d88b2:	782e      	ldrb	r6, [r5, #0]
   d88b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d88b8:	b2d9      	uxtb	r1, r3
   d88ba:	2909      	cmp	r1, #9
   d88bc:	d80e      	bhi.n	d88dc <_strtod_r+0x15c>
   d88be:	9904      	ldr	r1, [sp, #16]
   d88c0:	2908      	cmp	r1, #8
   d88c2:	bfdd      	ittte	le
   d88c4:	9905      	ldrle	r1, [sp, #20]
   d88c6:	fb02 3301 	mlale	r3, r2, r1, r3
   d88ca:	9305      	strle	r3, [sp, #20]
   d88cc:	fb02 3808 	mlagt	r8, r2, r8, r3
   d88d0:	9b04      	ldr	r3, [sp, #16]
   d88d2:	3501      	adds	r5, #1
   d88d4:	3301      	adds	r3, #1
   d88d6:	9304      	str	r3, [sp, #16]
   d88d8:	9517      	str	r5, [sp, #92]	; 0x5c
   d88da:	e7e9      	b.n	d88b0 <_strtod_r+0x130>
   d88dc:	9802      	ldr	r0, [sp, #8]
   d88de:	f7ff feb7 	bl	d8650 <_localeconv_r>
   d88e2:	6807      	ldr	r7, [r0, #0]
   d88e4:	9802      	ldr	r0, [sp, #8]
   d88e6:	f7ff feb3 	bl	d8650 <_localeconv_r>
   d88ea:	6800      	ldr	r0, [r0, #0]
   d88ec:	f7ff fefa 	bl	d86e4 <strlen>
   d88f0:	4639      	mov	r1, r7
   d88f2:	4602      	mov	r2, r0
   d88f4:	4628      	mov	r0, r5
   d88f6:	f7ff fefd 	bl	d86f4 <strncmp>
   d88fa:	4607      	mov	r7, r0
   d88fc:	b128      	cbz	r0, d890a <_strtod_r+0x18a>
   d88fe:	2000      	movs	r0, #0
   d8900:	4633      	mov	r3, r6
   d8902:	9d04      	ldr	r5, [sp, #16]
   d8904:	4602      	mov	r2, r0
   d8906:	4601      	mov	r1, r0
   d8908:	e057      	b.n	d89ba <_strtod_r+0x23a>
   d890a:	9802      	ldr	r0, [sp, #8]
   d890c:	f7ff fea0 	bl	d8650 <_localeconv_r>
   d8910:	6800      	ldr	r0, [r0, #0]
   d8912:	f7ff fee7 	bl	d86e4 <strlen>
   d8916:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8918:	181a      	adds	r2, r3, r0
   d891a:	9217      	str	r2, [sp, #92]	; 0x5c
   d891c:	9a04      	ldr	r2, [sp, #16]
   d891e:	5c1b      	ldrb	r3, [r3, r0]
   d8920:	2a00      	cmp	r2, #0
   d8922:	d142      	bne.n	d89aa <_strtod_r+0x22a>
   d8924:	4610      	mov	r0, r2
   d8926:	2b30      	cmp	r3, #48	; 0x30
   d8928:	d105      	bne.n	d8936 <_strtod_r+0x1b6>
   d892a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d892c:	1c5a      	adds	r2, r3, #1
   d892e:	9217      	str	r2, [sp, #92]	; 0x5c
   d8930:	3001      	adds	r0, #1
   d8932:	785b      	ldrb	r3, [r3, #1]
   d8934:	e7f7      	b.n	d8926 <_strtod_r+0x1a6>
   d8936:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d893a:	2a08      	cmp	r2, #8
   d893c:	d843      	bhi.n	d89c6 <_strtod_r+0x246>
   d893e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d8940:	9207      	str	r2, [sp, #28]
   d8942:	4602      	mov	r2, r0
   d8944:	2000      	movs	r0, #0
   d8946:	4605      	mov	r5, r0
   d8948:	3b30      	subs	r3, #48	; 0x30
   d894a:	f100 0101 	add.w	r1, r0, #1
   d894e:	d026      	beq.n	d899e <_strtod_r+0x21e>
   d8950:	440a      	add	r2, r1
   d8952:	eb05 0c00 	add.w	ip, r5, r0
   d8956:	4629      	mov	r1, r5
   d8958:	260a      	movs	r6, #10
   d895a:	4561      	cmp	r1, ip
   d895c:	d00e      	beq.n	d897c <_strtod_r+0x1fc>
   d895e:	3101      	adds	r1, #1
   d8960:	f101 3eff 	add.w	lr, r1, #4294967295
   d8964:	f1be 0f08 	cmp.w	lr, #8
   d8968:	dc03      	bgt.n	d8972 <_strtod_r+0x1f2>
   d896a:	9f05      	ldr	r7, [sp, #20]
   d896c:	4377      	muls	r7, r6
   d896e:	9705      	str	r7, [sp, #20]
   d8970:	e7f3      	b.n	d895a <_strtod_r+0x1da>
   d8972:	2910      	cmp	r1, #16
   d8974:	bfd8      	it	le
   d8976:	fb06 f808 	mulle.w	r8, r6, r8
   d897a:	e7ee      	b.n	d895a <_strtod_r+0x1da>
   d897c:	4428      	add	r0, r5
   d897e:	2808      	cmp	r0, #8
   d8980:	f100 0501 	add.w	r5, r0, #1
   d8984:	dc05      	bgt.n	d8992 <_strtod_r+0x212>
   d8986:	9805      	ldr	r0, [sp, #20]
   d8988:	210a      	movs	r1, #10
   d898a:	fb01 3300 	mla	r3, r1, r0, r3
   d898e:	9305      	str	r3, [sp, #20]
   d8990:	e004      	b.n	d899c <_strtod_r+0x21c>
   d8992:	2d10      	cmp	r5, #16
   d8994:	bfdc      	itt	le
   d8996:	210a      	movle	r1, #10
   d8998:	fb01 3808 	mlale	r8, r1, r8, r3
   d899c:	2100      	movs	r1, #0
   d899e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d89a0:	1c58      	adds	r0, r3, #1
   d89a2:	9017      	str	r0, [sp, #92]	; 0x5c
   d89a4:	785b      	ldrb	r3, [r3, #1]
   d89a6:	4608      	mov	r0, r1
   d89a8:	e002      	b.n	d89b0 <_strtod_r+0x230>
   d89aa:	9d04      	ldr	r5, [sp, #16]
   d89ac:	4638      	mov	r0, r7
   d89ae:	463a      	mov	r2, r7
   d89b0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d89b4:	2909      	cmp	r1, #9
   d89b6:	d9c7      	bls.n	d8948 <_strtod_r+0x1c8>
   d89b8:	2101      	movs	r1, #1
   d89ba:	2b65      	cmp	r3, #101	; 0x65
   d89bc:	d001      	beq.n	d89c2 <_strtod_r+0x242>
   d89be:	2b45      	cmp	r3, #69	; 0x45
   d89c0:	d151      	bne.n	d8a66 <_strtod_r+0x2e6>
   d89c2:	b96d      	cbnz	r5, d89e0 <_strtod_r+0x260>
   d89c4:	e004      	b.n	d89d0 <_strtod_r+0x250>
   d89c6:	2b65      	cmp	r3, #101	; 0x65
   d89c8:	f040 84b3 	bne.w	d9332 <_strtod_r+0xbb2>
   d89cc:	2200      	movs	r2, #0
   d89ce:	2101      	movs	r1, #1
   d89d0:	b928      	cbnz	r0, d89de <_strtod_r+0x25e>
   d89d2:	9b06      	ldr	r3, [sp, #24]
   d89d4:	2b00      	cmp	r3, #0
   d89d6:	f000 8095 	beq.w	d8b04 <_strtod_r+0x384>
   d89da:	4605      	mov	r5, r0
   d89dc:	e000      	b.n	d89e0 <_strtod_r+0x260>
   d89de:	2500      	movs	r5, #0
   d89e0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d89e2:	1c63      	adds	r3, r4, #1
   d89e4:	9317      	str	r3, [sp, #92]	; 0x5c
   d89e6:	7863      	ldrb	r3, [r4, #1]
   d89e8:	2b2b      	cmp	r3, #43	; 0x2b
   d89ea:	d006      	beq.n	d89fa <_strtod_r+0x27a>
   d89ec:	2b2d      	cmp	r3, #45	; 0x2d
   d89ee:	d002      	beq.n	d89f6 <_strtod_r+0x276>
   d89f0:	2600      	movs	r6, #0
   d89f2:	9603      	str	r6, [sp, #12]
   d89f4:	e006      	b.n	d8a04 <_strtod_r+0x284>
   d89f6:	2301      	movs	r3, #1
   d89f8:	e000      	b.n	d89fc <_strtod_r+0x27c>
   d89fa:	2300      	movs	r3, #0
   d89fc:	9303      	str	r3, [sp, #12]
   d89fe:	1ca3      	adds	r3, r4, #2
   d8a00:	9317      	str	r3, [sp, #92]	; 0x5c
   d8a02:	78a3      	ldrb	r3, [r4, #2]
   d8a04:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d8a08:	2e09      	cmp	r6, #9
   d8a0a:	d82b      	bhi.n	d8a64 <_strtod_r+0x2e4>
   d8a0c:	2b30      	cmp	r3, #48	; 0x30
   d8a0e:	d104      	bne.n	d8a1a <_strtod_r+0x29a>
   d8a10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8a12:	1c5e      	adds	r6, r3, #1
   d8a14:	9617      	str	r6, [sp, #92]	; 0x5c
   d8a16:	785b      	ldrb	r3, [r3, #1]
   d8a18:	e7f8      	b.n	d8a0c <_strtod_r+0x28c>
   d8a1a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d8a1e:	2e08      	cmp	r6, #8
   d8a20:	d821      	bhi.n	d8a66 <_strtod_r+0x2e6>
   d8a22:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d8a26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8a28:	f04f 0c0a 	mov.w	ip, #10
   d8a2c:	461f      	mov	r7, r3
   d8a2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8a30:	1c5e      	adds	r6, r3, #1
   d8a32:	9617      	str	r6, [sp, #92]	; 0x5c
   d8a34:	785b      	ldrb	r3, [r3, #1]
   d8a36:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d8a3a:	f1b9 0f09 	cmp.w	r9, #9
   d8a3e:	d804      	bhi.n	d8a4a <_strtod_r+0x2ca>
   d8a40:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d8a44:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d8a48:	e7f1      	b.n	d8a2e <_strtod_r+0x2ae>
   d8a4a:	1bf6      	subs	r6, r6, r7
   d8a4c:	2e08      	cmp	r6, #8
   d8a4e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d8a52:	dc02      	bgt.n	d8a5a <_strtod_r+0x2da>
   d8a54:	45f1      	cmp	r9, lr
   d8a56:	bfa8      	it	ge
   d8a58:	46f1      	movge	r9, lr
   d8a5a:	9e03      	ldr	r6, [sp, #12]
   d8a5c:	b12e      	cbz	r6, d8a6a <_strtod_r+0x2ea>
   d8a5e:	f1c9 0900 	rsb	r9, r9, #0
   d8a62:	e002      	b.n	d8a6a <_strtod_r+0x2ea>
   d8a64:	9417      	str	r4, [sp, #92]	; 0x5c
   d8a66:	f04f 0900 	mov.w	r9, #0
   d8a6a:	2d00      	cmp	r5, #0
   d8a6c:	d153      	bne.n	d8b16 <_strtod_r+0x396>
   d8a6e:	2800      	cmp	r0, #0
   d8a70:	f040 8451 	bne.w	d9316 <_strtod_r+0xb96>
   d8a74:	9a06      	ldr	r2, [sp, #24]
   d8a76:	2a00      	cmp	r2, #0
   d8a78:	f040 844d 	bne.w	d9316 <_strtod_r+0xb96>
   d8a7c:	2900      	cmp	r1, #0
   d8a7e:	d141      	bne.n	d8b04 <_strtod_r+0x384>
   d8a80:	2b4e      	cmp	r3, #78	; 0x4e
   d8a82:	d020      	beq.n	d8ac6 <_strtod_r+0x346>
   d8a84:	dc02      	bgt.n	d8a8c <_strtod_r+0x30c>
   d8a86:	2b49      	cmp	r3, #73	; 0x49
   d8a88:	d00a      	beq.n	d8aa0 <_strtod_r+0x320>
   d8a8a:	e03b      	b.n	d8b04 <_strtod_r+0x384>
   d8a8c:	2b69      	cmp	r3, #105	; 0x69
   d8a8e:	d007      	beq.n	d8aa0 <_strtod_r+0x320>
   d8a90:	2b6e      	cmp	r3, #110	; 0x6e
   d8a92:	d018      	beq.n	d8ac6 <_strtod_r+0x346>
   d8a94:	e036      	b.n	d8b04 <_strtod_r+0x384>
   d8a96:	bf00      	nop
   d8a98:	000db1ec 	.word	0x000db1ec
   d8a9c:	7ff00000 	.word	0x7ff00000
   d8aa0:	49a8      	ldr	r1, [pc, #672]	; (d8d44 <_strtod_r+0x5c4>)
   d8aa2:	a817      	add	r0, sp, #92	; 0x5c
   d8aa4:	f000 ff80 	bl	d99a8 <__match>
   d8aa8:	b360      	cbz	r0, d8b04 <_strtod_r+0x384>
   d8aaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8aac:	49a6      	ldr	r1, [pc, #664]	; (d8d48 <_strtod_r+0x5c8>)
   d8aae:	3b01      	subs	r3, #1
   d8ab0:	a817      	add	r0, sp, #92	; 0x5c
   d8ab2:	9317      	str	r3, [sp, #92]	; 0x5c
   d8ab4:	f000 ff78 	bl	d99a8 <__match>
   d8ab8:	b910      	cbnz	r0, d8ac0 <_strtod_r+0x340>
   d8aba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8abc:	3301      	adds	r3, #1
   d8abe:	9317      	str	r3, [sp, #92]	; 0x5c
   d8ac0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d8d64 <_strtod_r+0x5e4>
   d8ac4:	e01a      	b.n	d8afc <_strtod_r+0x37c>
   d8ac6:	49a1      	ldr	r1, [pc, #644]	; (d8d4c <_strtod_r+0x5cc>)
   d8ac8:	a817      	add	r0, sp, #92	; 0x5c
   d8aca:	f000 ff6d 	bl	d99a8 <__match>
   d8ace:	b1c8      	cbz	r0, d8b04 <_strtod_r+0x384>
   d8ad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8ad2:	781b      	ldrb	r3, [r3, #0]
   d8ad4:	2b28      	cmp	r3, #40	; 0x28
   d8ad6:	d10f      	bne.n	d8af8 <_strtod_r+0x378>
   d8ad8:	aa1a      	add	r2, sp, #104	; 0x68
   d8ada:	499d      	ldr	r1, [pc, #628]	; (d8d50 <_strtod_r+0x5d0>)
   d8adc:	a817      	add	r0, sp, #92	; 0x5c
   d8ade:	f000 ff76 	bl	d99ce <__hexnan>
   d8ae2:	2805      	cmp	r0, #5
   d8ae4:	d108      	bne.n	d8af8 <_strtod_r+0x378>
   d8ae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8ae8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8aec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d8af0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d8af4:	f000 bc0f 	b.w	d9316 <_strtod_r+0xb96>
   d8af8:	f8df b26c 	ldr.w	fp, [pc, #620]	; d8d68 <_strtod_r+0x5e8>
   d8afc:	f04f 0a00 	mov.w	sl, #0
   d8b00:	f000 bc09 	b.w	d9316 <_strtod_r+0xb96>
   d8b04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8b06:	9417      	str	r4, [sp, #92]	; 0x5c
   d8b08:	2b00      	cmp	r3, #0
   d8b0a:	f000 840f 	beq.w	d932c <_strtod_r+0xbac>
   d8b0e:	2300      	movs	r3, #0
   d8b10:	930c      	str	r3, [sp, #48]	; 0x30
   d8b12:	f000 bc02 	b.w	d931a <_strtod_r+0xb9a>
   d8b16:	9b04      	ldr	r3, [sp, #16]
   d8b18:	9805      	ldr	r0, [sp, #20]
   d8b1a:	2b00      	cmp	r3, #0
   d8b1c:	bf08      	it	eq
   d8b1e:	462b      	moveq	r3, r5
   d8b20:	2d10      	cmp	r5, #16
   d8b22:	462c      	mov	r4, r5
   d8b24:	ebc2 0909 	rsb	r9, r2, r9
   d8b28:	bfa8      	it	ge
   d8b2a:	2410      	movge	r4, #16
   d8b2c:	9304      	str	r3, [sp, #16]
   d8b2e:	f7ff f9b7 	bl	d7ea0 <__aeabi_ui2d>
   d8b32:	2c09      	cmp	r4, #9
   d8b34:	4682      	mov	sl, r0
   d8b36:	468b      	mov	fp, r1
   d8b38:	dd13      	ble.n	d8b62 <_strtod_r+0x3e2>
   d8b3a:	4b86      	ldr	r3, [pc, #536]	; (d8d54 <_strtod_r+0x5d4>)
   d8b3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d8b40:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d8b44:	f7ff fa22 	bl	d7f8c <__aeabi_dmul>
   d8b48:	4606      	mov	r6, r0
   d8b4a:	4640      	mov	r0, r8
   d8b4c:	460f      	mov	r7, r1
   d8b4e:	f7ff f9a7 	bl	d7ea0 <__aeabi_ui2d>
   d8b52:	4602      	mov	r2, r0
   d8b54:	460b      	mov	r3, r1
   d8b56:	4630      	mov	r0, r6
   d8b58:	4639      	mov	r1, r7
   d8b5a:	f7ff f865 	bl	d7c28 <__adddf3>
   d8b5e:	4682      	mov	sl, r0
   d8b60:	468b      	mov	fp, r1
   d8b62:	2d0f      	cmp	r5, #15
   d8b64:	dc36      	bgt.n	d8bd4 <_strtod_r+0x454>
   d8b66:	f1b9 0f00 	cmp.w	r9, #0
   d8b6a:	f000 83d4 	beq.w	d9316 <_strtod_r+0xb96>
   d8b6e:	dd24      	ble.n	d8bba <_strtod_r+0x43a>
   d8b70:	f1b9 0f16 	cmp.w	r9, #22
   d8b74:	dc07      	bgt.n	d8b86 <_strtod_r+0x406>
   d8b76:	4d77      	ldr	r5, [pc, #476]	; (d8d54 <_strtod_r+0x5d4>)
   d8b78:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d8b7c:	4652      	mov	r2, sl
   d8b7e:	465b      	mov	r3, fp
   d8b80:	e9d9 0100 	ldrd	r0, r1, [r9]
   d8b84:	e014      	b.n	d8bb0 <_strtod_r+0x430>
   d8b86:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d8b8a:	4599      	cmp	r9, r3
   d8b8c:	dc22      	bgt.n	d8bd4 <_strtod_r+0x454>
   d8b8e:	4c71      	ldr	r4, [pc, #452]	; (d8d54 <_strtod_r+0x5d4>)
   d8b90:	f1c5 050f 	rsb	r5, r5, #15
   d8b94:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d8b98:	ebc5 0509 	rsb	r5, r5, r9
   d8b9c:	4652      	mov	r2, sl
   d8b9e:	465b      	mov	r3, fp
   d8ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8ba4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d8ba8:	f7ff f9f0 	bl	d7f8c <__aeabi_dmul>
   d8bac:	e9d4 2300 	ldrd	r2, r3, [r4]
   d8bb0:	f7ff f9ec 	bl	d7f8c <__aeabi_dmul>
   d8bb4:	4682      	mov	sl, r0
   d8bb6:	468b      	mov	fp, r1
   d8bb8:	e3ad      	b.n	d9316 <_strtod_r+0xb96>
   d8bba:	f119 0f16 	cmn.w	r9, #22
   d8bbe:	db09      	blt.n	d8bd4 <_strtod_r+0x454>
   d8bc0:	4d64      	ldr	r5, [pc, #400]	; (d8d54 <_strtod_r+0x5d4>)
   d8bc2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d8bc6:	e9d9 2300 	ldrd	r2, r3, [r9]
   d8bca:	4650      	mov	r0, sl
   d8bcc:	4659      	mov	r1, fp
   d8bce:	f7ff fb07 	bl	d81e0 <__aeabi_ddiv>
   d8bd2:	e7ef      	b.n	d8bb4 <_strtod_r+0x434>
   d8bd4:	1b2c      	subs	r4, r5, r4
   d8bd6:	444c      	add	r4, r9
   d8bd8:	2c00      	cmp	r4, #0
   d8bda:	dd57      	ble.n	d8c8c <_strtod_r+0x50c>
   d8bdc:	f014 010f 	ands.w	r1, r4, #15
   d8be0:	d00a      	beq.n	d8bf8 <_strtod_r+0x478>
   d8be2:	4b5c      	ldr	r3, [pc, #368]	; (d8d54 <_strtod_r+0x5d4>)
   d8be4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d8be8:	4652      	mov	r2, sl
   d8bea:	465b      	mov	r3, fp
   d8bec:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8bf0:	f7ff f9cc 	bl	d7f8c <__aeabi_dmul>
   d8bf4:	4682      	mov	sl, r0
   d8bf6:	468b      	mov	fp, r1
   d8bf8:	f034 040f 	bics.w	r4, r4, #15
   d8bfc:	f000 80b8 	beq.w	d8d70 <_strtod_r+0x5f0>
   d8c00:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d8c04:	dd0b      	ble.n	d8c1e <_strtod_r+0x49e>
   d8c06:	2400      	movs	r4, #0
   d8c08:	4625      	mov	r5, r4
   d8c0a:	9405      	str	r4, [sp, #20]
   d8c0c:	9404      	str	r4, [sp, #16]
   d8c0e:	9a02      	ldr	r2, [sp, #8]
   d8c10:	f8df b150 	ldr.w	fp, [pc, #336]	; d8d64 <_strtod_r+0x5e4>
   d8c14:	2322      	movs	r3, #34	; 0x22
   d8c16:	6013      	str	r3, [r2, #0]
   d8c18:	f04f 0a00 	mov.w	sl, #0
   d8c1c:	e187      	b.n	d8f2e <_strtod_r+0x7ae>
   d8c1e:	4e4e      	ldr	r6, [pc, #312]	; (d8d58 <_strtod_r+0x5d8>)
   d8c20:	2300      	movs	r3, #0
   d8c22:	1124      	asrs	r4, r4, #4
   d8c24:	4650      	mov	r0, sl
   d8c26:	4659      	mov	r1, fp
   d8c28:	4698      	mov	r8, r3
   d8c2a:	4637      	mov	r7, r6
   d8c2c:	2c01      	cmp	r4, #1
   d8c2e:	dd0b      	ble.n	d8c48 <_strtod_r+0x4c8>
   d8c30:	07e2      	lsls	r2, r4, #31
   d8c32:	d504      	bpl.n	d8c3e <_strtod_r+0x4be>
   d8c34:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8c38:	f7ff f9a8 	bl	d7f8c <__aeabi_dmul>
   d8c3c:	2301      	movs	r3, #1
   d8c3e:	f108 0801 	add.w	r8, r8, #1
   d8c42:	1064      	asrs	r4, r4, #1
   d8c44:	3608      	adds	r6, #8
   d8c46:	e7f1      	b.n	d8c2c <_strtod_r+0x4ac>
   d8c48:	b10b      	cbz	r3, d8c4e <_strtod_r+0x4ce>
   d8c4a:	4682      	mov	sl, r0
   d8c4c:	468b      	mov	fp, r1
   d8c4e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d8c52:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d8c56:	4652      	mov	r2, sl
   d8c58:	465b      	mov	r3, fp
   d8c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
   d8c5e:	f7ff f995 	bl	d7f8c <__aeabi_dmul>
   d8c62:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8c66:	468b      	mov	fp, r1
   d8c68:	460a      	mov	r2, r1
   d8c6a:	0d1b      	lsrs	r3, r3, #20
   d8c6c:	493b      	ldr	r1, [pc, #236]	; (d8d5c <_strtod_r+0x5dc>)
   d8c6e:	051b      	lsls	r3, r3, #20
   d8c70:	428b      	cmp	r3, r1
   d8c72:	4682      	mov	sl, r0
   d8c74:	d8c7      	bhi.n	d8c06 <_strtod_r+0x486>
   d8c76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d8c7a:	428b      	cmp	r3, r1
   d8c7c:	bf86      	itte	hi
   d8c7e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d8d6c <_strtod_r+0x5ec>
   d8c82:	f04f 3aff 	movhi.w	sl, #4294967295
   d8c86:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d8c8a:	e071      	b.n	d8d70 <_strtod_r+0x5f0>
   d8c8c:	d070      	beq.n	d8d70 <_strtod_r+0x5f0>
   d8c8e:	4264      	negs	r4, r4
   d8c90:	f014 020f 	ands.w	r2, r4, #15
   d8c94:	d00a      	beq.n	d8cac <_strtod_r+0x52c>
   d8c96:	4b2f      	ldr	r3, [pc, #188]	; (d8d54 <_strtod_r+0x5d4>)
   d8c98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d8c9c:	4650      	mov	r0, sl
   d8c9e:	4659      	mov	r1, fp
   d8ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ca4:	f7ff fa9c 	bl	d81e0 <__aeabi_ddiv>
   d8ca8:	4682      	mov	sl, r0
   d8caa:	468b      	mov	fp, r1
   d8cac:	1124      	asrs	r4, r4, #4
   d8cae:	d05f      	beq.n	d8d70 <_strtod_r+0x5f0>
   d8cb0:	2c1f      	cmp	r4, #31
   d8cb2:	dd04      	ble.n	d8cbe <_strtod_r+0x53e>
   d8cb4:	2400      	movs	r4, #0
   d8cb6:	4625      	mov	r5, r4
   d8cb8:	9405      	str	r4, [sp, #20]
   d8cba:	9404      	str	r4, [sp, #16]
   d8cbc:	e130      	b.n	d8f20 <_strtod_r+0x7a0>
   d8cbe:	f014 0f10 	tst.w	r4, #16
   d8cc2:	bf0c      	ite	eq
   d8cc4:	2300      	moveq	r3, #0
   d8cc6:	236a      	movne	r3, #106	; 0x6a
   d8cc8:	4e25      	ldr	r6, [pc, #148]	; (d8d60 <_strtod_r+0x5e0>)
   d8cca:	9303      	str	r3, [sp, #12]
   d8ccc:	4650      	mov	r0, sl
   d8cce:	4659      	mov	r1, fp
   d8cd0:	2300      	movs	r3, #0
   d8cd2:	2c00      	cmp	r4, #0
   d8cd4:	dd09      	ble.n	d8cea <_strtod_r+0x56a>
   d8cd6:	07e2      	lsls	r2, r4, #31
   d8cd8:	d504      	bpl.n	d8ce4 <_strtod_r+0x564>
   d8cda:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8cde:	f7ff f955 	bl	d7f8c <__aeabi_dmul>
   d8ce2:	2301      	movs	r3, #1
   d8ce4:	1064      	asrs	r4, r4, #1
   d8ce6:	3608      	adds	r6, #8
   d8ce8:	e7f3      	b.n	d8cd2 <_strtod_r+0x552>
   d8cea:	b10b      	cbz	r3, d8cf0 <_strtod_r+0x570>
   d8cec:	4682      	mov	sl, r0
   d8cee:	468b      	mov	fp, r1
   d8cf0:	9b03      	ldr	r3, [sp, #12]
   d8cf2:	b1eb      	cbz	r3, d8d30 <_strtod_r+0x5b0>
   d8cf4:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d8cf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8cfc:	2b00      	cmp	r3, #0
   d8cfe:	4659      	mov	r1, fp
   d8d00:	dd16      	ble.n	d8d30 <_strtod_r+0x5b0>
   d8d02:	2b1f      	cmp	r3, #31
   d8d04:	dd0e      	ble.n	d8d24 <_strtod_r+0x5a4>
   d8d06:	2b34      	cmp	r3, #52	; 0x34
   d8d08:	bfde      	ittt	le
   d8d0a:	3b20      	suble	r3, #32
   d8d0c:	f04f 32ff 	movle.w	r2, #4294967295
   d8d10:	fa02 f303 	lslle.w	r3, r2, r3
   d8d14:	f04f 0a00 	mov.w	sl, #0
   d8d18:	bfcc      	ite	gt
   d8d1a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d8d1e:	ea03 0b01 	andle.w	fp, r3, r1
   d8d22:	e005      	b.n	d8d30 <_strtod_r+0x5b0>
   d8d24:	f04f 32ff 	mov.w	r2, #4294967295
   d8d28:	fa02 f303 	lsl.w	r3, r2, r3
   d8d2c:	ea03 0a0a 	and.w	sl, r3, sl
   d8d30:	2200      	movs	r2, #0
   d8d32:	2300      	movs	r3, #0
   d8d34:	4650      	mov	r0, sl
   d8d36:	4659      	mov	r1, fp
   d8d38:	f7ff fb90 	bl	d845c <__aeabi_dcmpeq>
   d8d3c:	2800      	cmp	r0, #0
   d8d3e:	d1b9      	bne.n	d8cb4 <_strtod_r+0x534>
   d8d40:	e018      	b.n	d8d74 <_strtod_r+0x5f4>
   d8d42:	bf00      	nop
   d8d44:	000dadc3 	.word	0x000dadc3
   d8d48:	000db214 	.word	0x000db214
   d8d4c:	000dadb9 	.word	0x000dadb9
   d8d50:	000db200 	.word	0x000db200
   d8d54:	000db248 	.word	0x000db248
   d8d58:	000db310 	.word	0x000db310
   d8d5c:	7ca00000 	.word	0x7ca00000
   d8d60:	000db220 	.word	0x000db220
   d8d64:	7ff00000 	.word	0x7ff00000
   d8d68:	fff80000 	.word	0xfff80000
   d8d6c:	7fefffff 	.word	0x7fefffff
   d8d70:	2300      	movs	r3, #0
   d8d72:	9303      	str	r3, [sp, #12]
   d8d74:	9b05      	ldr	r3, [sp, #20]
   d8d76:	9300      	str	r3, [sp, #0]
   d8d78:	9a04      	ldr	r2, [sp, #16]
   d8d7a:	9907      	ldr	r1, [sp, #28]
   d8d7c:	9802      	ldr	r0, [sp, #8]
   d8d7e:	462b      	mov	r3, r5
   d8d80:	f000 ff3a 	bl	d9bf8 <__s2b>
   d8d84:	9005      	str	r0, [sp, #20]
   d8d86:	2800      	cmp	r0, #0
   d8d88:	f43f af3d 	beq.w	d8c06 <_strtod_r+0x486>
   d8d8c:	f1b9 0f00 	cmp.w	r9, #0
   d8d90:	f1c9 0300 	rsb	r3, r9, #0
   d8d94:	bfa8      	it	ge
   d8d96:	2300      	movge	r3, #0
   d8d98:	930d      	str	r3, [sp, #52]	; 0x34
   d8d9a:	2400      	movs	r4, #0
   d8d9c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d8da0:	9312      	str	r3, [sp, #72]	; 0x48
   d8da2:	4625      	mov	r5, r4
   d8da4:	9b05      	ldr	r3, [sp, #20]
   d8da6:	9802      	ldr	r0, [sp, #8]
   d8da8:	6859      	ldr	r1, [r3, #4]
   d8daa:	f000 fe9e 	bl	d9aea <_Balloc>
   d8dae:	9004      	str	r0, [sp, #16]
   d8db0:	2800      	cmp	r0, #0
   d8db2:	f43f af2c 	beq.w	d8c0e <_strtod_r+0x48e>
   d8db6:	9b05      	ldr	r3, [sp, #20]
   d8db8:	691a      	ldr	r2, [r3, #16]
   d8dba:	3202      	adds	r2, #2
   d8dbc:	f103 010c 	add.w	r1, r3, #12
   d8dc0:	0092      	lsls	r2, r2, #2
   d8dc2:	300c      	adds	r0, #12
   d8dc4:	f7ff fc48 	bl	d8658 <memcpy>
   d8dc8:	aa1a      	add	r2, sp, #104	; 0x68
   d8dca:	a919      	add	r1, sp, #100	; 0x64
   d8dcc:	ec4b ab10 	vmov	d0, sl, fp
   d8dd0:	9802      	ldr	r0, [sp, #8]
   d8dd2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d8dd6:	f001 f9c4 	bl	da162 <__d2b>
   d8dda:	9018      	str	r0, [sp, #96]	; 0x60
   d8ddc:	2800      	cmp	r0, #0
   d8dde:	f43f af16 	beq.w	d8c0e <_strtod_r+0x48e>
   d8de2:	2101      	movs	r1, #1
   d8de4:	9802      	ldr	r0, [sp, #8]
   d8de6:	f000 ff92 	bl	d9d0e <__i2b>
   d8dea:	4605      	mov	r5, r0
   d8dec:	2800      	cmp	r0, #0
   d8dee:	f43f af0e 	beq.w	d8c0e <_strtod_r+0x48e>
   d8df2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8df4:	9903      	ldr	r1, [sp, #12]
   d8df6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d8df8:	2b00      	cmp	r3, #0
   d8dfa:	bfad      	iteet	ge
   d8dfc:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d8dfe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d8e00:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d8e04:	eb02 0803 	addge.w	r8, r2, r3
   d8e08:	bfb8      	it	lt
   d8e0a:	1ad2      	sublt	r2, r2, r3
   d8e0c:	eba3 0301 	sub.w	r3, r3, r1
   d8e10:	4433      	add	r3, r6
   d8e12:	49b5      	ldr	r1, [pc, #724]	; (d90e8 <_strtod_r+0x968>)
   d8e14:	bfa8      	it	ge
   d8e16:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d8e18:	3b01      	subs	r3, #1
   d8e1a:	428b      	cmp	r3, r1
   d8e1c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d8e20:	f280 808a 	bge.w	d8f38 <_strtod_r+0x7b8>
   d8e24:	1ac9      	subs	r1, r1, r3
   d8e26:	291f      	cmp	r1, #31
   d8e28:	bfc8      	it	gt
   d8e2a:	4fb0      	ldrgt	r7, [pc, #704]	; (d90ec <_strtod_r+0x96c>)
   d8e2c:	f04f 0901 	mov.w	r9, #1
   d8e30:	bfd4      	ite	le
   d8e32:	fa09 f301 	lslle.w	r3, r9, r1
   d8e36:	1aff      	subgt	r7, r7, r3
   d8e38:	eba6 0601 	sub.w	r6, r6, r1
   d8e3c:	bfd9      	ittee	le
   d8e3e:	9306      	strle	r3, [sp, #24]
   d8e40:	2700      	movle	r7, #0
   d8e42:	fa09 f707 	lslgt.w	r7, r9, r7
   d8e46:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d8e4a:	eb08 0906 	add.w	r9, r8, r6
   d8e4e:	9b03      	ldr	r3, [sp, #12]
   d8e50:	45c8      	cmp	r8, r9
   d8e52:	4416      	add	r6, r2
   d8e54:	441e      	add	r6, r3
   d8e56:	4643      	mov	r3, r8
   d8e58:	bfa8      	it	ge
   d8e5a:	464b      	movge	r3, r9
   d8e5c:	42b3      	cmp	r3, r6
   d8e5e:	bfa8      	it	ge
   d8e60:	4633      	movge	r3, r6
   d8e62:	2b00      	cmp	r3, #0
   d8e64:	bfc2      	ittt	gt
   d8e66:	ebc3 0909 	rsbgt	r9, r3, r9
   d8e6a:	1af6      	subgt	r6, r6, r3
   d8e6c:	ebc3 0808 	rsbgt	r8, r3, r8
   d8e70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8e72:	2b00      	cmp	r3, #0
   d8e74:	d164      	bne.n	d8f40 <_strtod_r+0x7c0>
   d8e76:	f1b9 0f00 	cmp.w	r9, #0
   d8e7a:	dc7a      	bgt.n	d8f72 <_strtod_r+0x7f2>
   d8e7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d8e7e:	2b00      	cmp	r3, #0
   d8e80:	f040 8081 	bne.w	d8f86 <_strtod_r+0x806>
   d8e84:	2e00      	cmp	r6, #0
   d8e86:	f300 8088 	bgt.w	d8f9a <_strtod_r+0x81a>
   d8e8a:	f1b8 0f00 	cmp.w	r8, #0
   d8e8e:	f300 808e 	bgt.w	d8fae <_strtod_r+0x82e>
   d8e92:	9a04      	ldr	r2, [sp, #16]
   d8e94:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8e96:	9802      	ldr	r0, [sp, #8]
   d8e98:	f001 f88f 	bl	d9fba <__mdiff>
   d8e9c:	4604      	mov	r4, r0
   d8e9e:	2800      	cmp	r0, #0
   d8ea0:	f43f aeb5 	beq.w	d8c0e <_strtod_r+0x48e>
   d8ea4:	68c3      	ldr	r3, [r0, #12]
   d8ea6:	9307      	str	r3, [sp, #28]
   d8ea8:	2300      	movs	r3, #0
   d8eaa:	60c3      	str	r3, [r0, #12]
   d8eac:	4629      	mov	r1, r5
   d8eae:	f001 f868 	bl	d9f82 <__mcmp>
   d8eb2:	2800      	cmp	r0, #0
   d8eb4:	f280 8089 	bge.w	d8fca <_strtod_r+0x84a>
   d8eb8:	9b07      	ldr	r3, [sp, #28]
   d8eba:	2b00      	cmp	r3, #0
   d8ebc:	f040 8204 	bne.w	d92c8 <_strtod_r+0xb48>
   d8ec0:	f1ba 0f00 	cmp.w	sl, #0
   d8ec4:	f040 8200 	bne.w	d92c8 <_strtod_r+0xb48>
   d8ec8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8ecc:	2b00      	cmp	r3, #0
   d8ece:	f040 81fb 	bne.w	d92c8 <_strtod_r+0xb48>
   d8ed2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8ed6:	0d1b      	lsrs	r3, r3, #20
   d8ed8:	051b      	lsls	r3, r3, #20
   d8eda:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8ede:	f240 81f3 	bls.w	d92c8 <_strtod_r+0xb48>
   d8ee2:	6963      	ldr	r3, [r4, #20]
   d8ee4:	2b00      	cmp	r3, #0
   d8ee6:	d06c      	beq.n	d8fc2 <_strtod_r+0x842>
   d8ee8:	4621      	mov	r1, r4
   d8eea:	2201      	movs	r2, #1
   d8eec:	9802      	ldr	r0, [sp, #8]
   d8eee:	f000 fff7 	bl	d9ee0 <__lshift>
   d8ef2:	4629      	mov	r1, r5
   d8ef4:	4604      	mov	r4, r0
   d8ef6:	f001 f844 	bl	d9f82 <__mcmp>
   d8efa:	2800      	cmp	r0, #0
   d8efc:	f340 81e4 	ble.w	d92c8 <_strtod_r+0xb48>
   d8f00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8f04:	9a03      	ldr	r2, [sp, #12]
   d8f06:	0d1b      	lsrs	r3, r3, #20
   d8f08:	051b      	lsls	r3, r3, #20
   d8f0a:	2a00      	cmp	r2, #0
   d8f0c:	f000 808c 	beq.w	d9028 <_strtod_r+0x8a8>
   d8f10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8f14:	f300 8088 	bgt.w	d9028 <_strtod_r+0x8a8>
   d8f18:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d8f1c:	f300 81d6 	bgt.w	d92cc <_strtod_r+0xb4c>
   d8f20:	9a02      	ldr	r2, [sp, #8]
   d8f22:	2322      	movs	r3, #34	; 0x22
   d8f24:	f04f 0a00 	mov.w	sl, #0
   d8f28:	f04f 0b00 	mov.w	fp, #0
   d8f2c:	6013      	str	r3, [r2, #0]
   d8f2e:	9b05      	ldr	r3, [sp, #20]
   d8f30:	2b00      	cmp	r3, #0
   d8f32:	f040 81dc 	bne.w	d92ee <_strtod_r+0xb6e>
   d8f36:	e1ee      	b.n	d9316 <_strtod_r+0xb96>
   d8f38:	2301      	movs	r3, #1
   d8f3a:	2700      	movs	r7, #0
   d8f3c:	9306      	str	r3, [sp, #24]
   d8f3e:	e784      	b.n	d8e4a <_strtod_r+0x6ca>
   d8f40:	4629      	mov	r1, r5
   d8f42:	461a      	mov	r2, r3
   d8f44:	9802      	ldr	r0, [sp, #8]
   d8f46:	f000 ff7d 	bl	d9e44 <__pow5mult>
   d8f4a:	4605      	mov	r5, r0
   d8f4c:	2800      	cmp	r0, #0
   d8f4e:	f43f ae5e 	beq.w	d8c0e <_strtod_r+0x48e>
   d8f52:	4601      	mov	r1, r0
   d8f54:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d8f56:	9802      	ldr	r0, [sp, #8]
   d8f58:	f000 fee2 	bl	d9d20 <__multiply>
   d8f5c:	9007      	str	r0, [sp, #28]
   d8f5e:	2800      	cmp	r0, #0
   d8f60:	f43f ae55 	beq.w	d8c0e <_strtod_r+0x48e>
   d8f64:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8f66:	9802      	ldr	r0, [sp, #8]
   d8f68:	f000 fdf4 	bl	d9b54 <_Bfree>
   d8f6c:	9b07      	ldr	r3, [sp, #28]
   d8f6e:	9318      	str	r3, [sp, #96]	; 0x60
   d8f70:	e781      	b.n	d8e76 <_strtod_r+0x6f6>
   d8f72:	464a      	mov	r2, r9
   d8f74:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8f76:	9802      	ldr	r0, [sp, #8]
   d8f78:	f000 ffb2 	bl	d9ee0 <__lshift>
   d8f7c:	9018      	str	r0, [sp, #96]	; 0x60
   d8f7e:	2800      	cmp	r0, #0
   d8f80:	f47f af7c 	bne.w	d8e7c <_strtod_r+0x6fc>
   d8f84:	e643      	b.n	d8c0e <_strtod_r+0x48e>
   d8f86:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d8f88:	9904      	ldr	r1, [sp, #16]
   d8f8a:	9802      	ldr	r0, [sp, #8]
   d8f8c:	f000 ff5a 	bl	d9e44 <__pow5mult>
   d8f90:	9004      	str	r0, [sp, #16]
   d8f92:	2800      	cmp	r0, #0
   d8f94:	f47f af76 	bne.w	d8e84 <_strtod_r+0x704>
   d8f98:	e639      	b.n	d8c0e <_strtod_r+0x48e>
   d8f9a:	4632      	mov	r2, r6
   d8f9c:	9904      	ldr	r1, [sp, #16]
   d8f9e:	9802      	ldr	r0, [sp, #8]
   d8fa0:	f000 ff9e 	bl	d9ee0 <__lshift>
   d8fa4:	9004      	str	r0, [sp, #16]
   d8fa6:	2800      	cmp	r0, #0
   d8fa8:	f47f af6f 	bne.w	d8e8a <_strtod_r+0x70a>
   d8fac:	e62f      	b.n	d8c0e <_strtod_r+0x48e>
   d8fae:	4629      	mov	r1, r5
   d8fb0:	4642      	mov	r2, r8
   d8fb2:	9802      	ldr	r0, [sp, #8]
   d8fb4:	f000 ff94 	bl	d9ee0 <__lshift>
   d8fb8:	4605      	mov	r5, r0
   d8fba:	2800      	cmp	r0, #0
   d8fbc:	f47f af69 	bne.w	d8e92 <_strtod_r+0x712>
   d8fc0:	e625      	b.n	d8c0e <_strtod_r+0x48e>
   d8fc2:	6923      	ldr	r3, [r4, #16]
   d8fc4:	2b01      	cmp	r3, #1
   d8fc6:	dc8f      	bgt.n	d8ee8 <_strtod_r+0x768>
   d8fc8:	e17e      	b.n	d92c8 <_strtod_r+0xb48>
   d8fca:	d161      	bne.n	d9090 <_strtod_r+0x910>
   d8fcc:	9a07      	ldr	r2, [sp, #28]
   d8fce:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8fd2:	b322      	cbz	r2, d901e <_strtod_r+0x89e>
   d8fd4:	4946      	ldr	r1, [pc, #280]	; (d90f0 <_strtod_r+0x970>)
   d8fd6:	428b      	cmp	r3, r1
   d8fd8:	465a      	mov	r2, fp
   d8fda:	d12e      	bne.n	d903a <_strtod_r+0x8ba>
   d8fdc:	9b03      	ldr	r3, [sp, #12]
   d8fde:	4651      	mov	r1, sl
   d8fe0:	b163      	cbz	r3, d8ffc <_strtod_r+0x87c>
   d8fe2:	4b44      	ldr	r3, [pc, #272]	; (d90f4 <_strtod_r+0x974>)
   d8fe4:	4013      	ands	r3, r2
   d8fe6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d8fea:	d807      	bhi.n	d8ffc <_strtod_r+0x87c>
   d8fec:	0d1b      	lsrs	r3, r3, #20
   d8fee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8ff2:	f04f 30ff 	mov.w	r0, #4294967295
   d8ff6:	fa00 f303 	lsl.w	r3, r0, r3
   d8ffa:	e001      	b.n	d9000 <_strtod_r+0x880>
   d8ffc:	f04f 33ff 	mov.w	r3, #4294967295
   d9000:	428b      	cmp	r3, r1
   d9002:	d11a      	bne.n	d903a <_strtod_r+0x8ba>
   d9004:	493c      	ldr	r1, [pc, #240]	; (d90f8 <_strtod_r+0x978>)
   d9006:	428a      	cmp	r2, r1
   d9008:	d102      	bne.n	d9010 <_strtod_r+0x890>
   d900a:	3301      	adds	r3, #1
   d900c:	f43f adff 	beq.w	d8c0e <_strtod_r+0x48e>
   d9010:	4b38      	ldr	r3, [pc, #224]	; (d90f4 <_strtod_r+0x974>)
   d9012:	4013      	ands	r3, r2
   d9014:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9018:	f04f 0a00 	mov.w	sl, #0
   d901c:	e154      	b.n	d92c8 <_strtod_r+0xb48>
   d901e:	b963      	cbnz	r3, d903a <_strtod_r+0x8ba>
   d9020:	f1ba 0f00 	cmp.w	sl, #0
   d9024:	d109      	bne.n	d903a <_strtod_r+0x8ba>
   d9026:	e76b      	b.n	d8f00 <_strtod_r+0x780>
   d9028:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d902c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9030:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9034:	f04f 3aff 	mov.w	sl, #4294967295
   d9038:	e146      	b.n	d92c8 <_strtod_r+0xb48>
   d903a:	b117      	cbz	r7, d9042 <_strtod_r+0x8c2>
   d903c:	ea17 0f0b 	tst.w	r7, fp
   d9040:	e002      	b.n	d9048 <_strtod_r+0x8c8>
   d9042:	9b06      	ldr	r3, [sp, #24]
   d9044:	ea13 0f0a 	tst.w	r3, sl
   d9048:	f000 813e 	beq.w	d92c8 <_strtod_r+0xb48>
   d904c:	9b07      	ldr	r3, [sp, #28]
   d904e:	9a03      	ldr	r2, [sp, #12]
   d9050:	4650      	mov	r0, sl
   d9052:	4659      	mov	r1, fp
   d9054:	b153      	cbz	r3, d906c <_strtod_r+0x8ec>
   d9056:	f7ff fb75 	bl	d8744 <sulp>
   d905a:	4602      	mov	r2, r0
   d905c:	460b      	mov	r3, r1
   d905e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d9062:	f7fe fde1 	bl	d7c28 <__adddf3>
   d9066:	4682      	mov	sl, r0
   d9068:	468b      	mov	fp, r1
   d906a:	e12d      	b.n	d92c8 <_strtod_r+0xb48>
   d906c:	f7ff fb6a 	bl	d8744 <sulp>
   d9070:	4602      	mov	r2, r0
   d9072:	460b      	mov	r3, r1
   d9074:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d9078:	f7fe fdd4 	bl	d7c24 <__aeabi_dsub>
   d907c:	2200      	movs	r2, #0
   d907e:	2300      	movs	r3, #0
   d9080:	4682      	mov	sl, r0
   d9082:	468b      	mov	fp, r1
   d9084:	f7ff f9ea 	bl	d845c <__aeabi_dcmpeq>
   d9088:	2800      	cmp	r0, #0
   d908a:	f47f af49 	bne.w	d8f20 <_strtod_r+0x7a0>
   d908e:	e11b      	b.n	d92c8 <_strtod_r+0xb48>
   d9090:	4629      	mov	r1, r5
   d9092:	4620      	mov	r0, r4
   d9094:	f001 f8b3 	bl	da1fe <__ratio>
   d9098:	ec57 6b10 	vmov	r6, r7, d0
   d909c:	2200      	movs	r2, #0
   d909e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d90a2:	ee10 0a10 	vmov	r0, s0
   d90a6:	4639      	mov	r1, r7
   d90a8:	f7ff f9ec 	bl	d8484 <__aeabi_dcmple>
   d90ac:	2800      	cmp	r0, #0
   d90ae:	d042      	beq.n	d9136 <_strtod_r+0x9b6>
   d90b0:	9b07      	ldr	r3, [sp, #28]
   d90b2:	b123      	cbz	r3, d90be <_strtod_r+0x93e>
   d90b4:	f04f 0800 	mov.w	r8, #0
   d90b8:	f8df 9040 	ldr.w	r9, [pc, #64]	; d90fc <_strtod_r+0x97c>
   d90bc:	e011      	b.n	d90e2 <_strtod_r+0x962>
   d90be:	f1ba 0f00 	cmp.w	sl, #0
   d90c2:	d103      	bne.n	d90cc <_strtod_r+0x94c>
   d90c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d90c8:	b93b      	cbnz	r3, d90da <_strtod_r+0x95a>
   d90ca:	e01b      	b.n	d9104 <_strtod_r+0x984>
   d90cc:	f1ba 0f01 	cmp.w	sl, #1
   d90d0:	d103      	bne.n	d90da <_strtod_r+0x95a>
   d90d2:	f1bb 0f00 	cmp.w	fp, #0
   d90d6:	f43f af23 	beq.w	d8f20 <_strtod_r+0x7a0>
   d90da:	f8df 9024 	ldr.w	r9, [pc, #36]	; d9100 <_strtod_r+0x980>
   d90de:	f04f 0800 	mov.w	r8, #0
   d90e2:	2600      	movs	r6, #0
   d90e4:	4f05      	ldr	r7, [pc, #20]	; (d90fc <_strtod_r+0x97c>)
   d90e6:	e039      	b.n	d915c <_strtod_r+0x9dc>
   d90e8:	fffffc02 	.word	0xfffffc02
   d90ec:	fffffbe2 	.word	0xfffffbe2
   d90f0:	000fffff 	.word	0x000fffff
   d90f4:	7ff00000 	.word	0x7ff00000
   d90f8:	7fefffff 	.word	0x7fefffff
   d90fc:	3ff00000 	.word	0x3ff00000
   d9100:	bff00000 	.word	0xbff00000
   d9104:	2200      	movs	r2, #0
   d9106:	4b98      	ldr	r3, [pc, #608]	; (d9368 <_strtod_r+0xbe8>)
   d9108:	4630      	mov	r0, r6
   d910a:	4639      	mov	r1, r7
   d910c:	f7ff f9b0 	bl	d8470 <__aeabi_dcmplt>
   d9110:	b940      	cbnz	r0, d9124 <_strtod_r+0x9a4>
   d9112:	4630      	mov	r0, r6
   d9114:	4639      	mov	r1, r7
   d9116:	2200      	movs	r2, #0
   d9118:	4b94      	ldr	r3, [pc, #592]	; (d936c <_strtod_r+0xbec>)
   d911a:	f7fe ff37 	bl	d7f8c <__aeabi_dmul>
   d911e:	4606      	mov	r6, r0
   d9120:	460f      	mov	r7, r1
   d9122:	e001      	b.n	d9128 <_strtod_r+0x9a8>
   d9124:	4f91      	ldr	r7, [pc, #580]	; (d936c <_strtod_r+0xbec>)
   d9126:	2600      	movs	r6, #0
   d9128:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d912c:	9614      	str	r6, [sp, #80]	; 0x50
   d912e:	9315      	str	r3, [sp, #84]	; 0x54
   d9130:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d9134:	e012      	b.n	d915c <_strtod_r+0x9dc>
   d9136:	4b8d      	ldr	r3, [pc, #564]	; (d936c <_strtod_r+0xbec>)
   d9138:	4630      	mov	r0, r6
   d913a:	4639      	mov	r1, r7
   d913c:	2200      	movs	r2, #0
   d913e:	f7fe ff25 	bl	d7f8c <__aeabi_dmul>
   d9142:	9b07      	ldr	r3, [sp, #28]
   d9144:	4606      	mov	r6, r0
   d9146:	460f      	mov	r7, r1
   d9148:	b923      	cbnz	r3, d9154 <_strtod_r+0x9d4>
   d914a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d914e:	900e      	str	r0, [sp, #56]	; 0x38
   d9150:	930f      	str	r3, [sp, #60]	; 0x3c
   d9152:	e001      	b.n	d9158 <_strtod_r+0x9d8>
   d9154:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d9158:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d915c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9160:	0d1b      	lsrs	r3, r3, #20
   d9162:	051b      	lsls	r3, r3, #20
   d9164:	9306      	str	r3, [sp, #24]
   d9166:	9a06      	ldr	r2, [sp, #24]
   d9168:	4b81      	ldr	r3, [pc, #516]	; (d9370 <_strtod_r+0xbf0>)
   d916a:	429a      	cmp	r2, r3
   d916c:	d12b      	bne.n	d91c6 <_strtod_r+0xa46>
   d916e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9172:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9176:	ec4b ab10 	vmov	d0, sl, fp
   d917a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d917e:	f000 ff7b 	bl	da078 <__ulp>
   d9182:	4640      	mov	r0, r8
   d9184:	ec53 2b10 	vmov	r2, r3, d0
   d9188:	4649      	mov	r1, r9
   d918a:	f7fe feff 	bl	d7f8c <__aeabi_dmul>
   d918e:	4652      	mov	r2, sl
   d9190:	465b      	mov	r3, fp
   d9192:	f7fe fd49 	bl	d7c28 <__adddf3>
   d9196:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d919a:	0d1b      	lsrs	r3, r3, #20
   d919c:	4a75      	ldr	r2, [pc, #468]	; (d9374 <_strtod_r+0xbf4>)
   d919e:	051b      	lsls	r3, r3, #20
   d91a0:	4293      	cmp	r3, r2
   d91a2:	4682      	mov	sl, r0
   d91a4:	d90c      	bls.n	d91c0 <_strtod_r+0xa40>
   d91a6:	4b74      	ldr	r3, [pc, #464]	; (d9378 <_strtod_r+0xbf8>)
   d91a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d91aa:	429a      	cmp	r2, r3
   d91ac:	d103      	bne.n	d91b6 <_strtod_r+0xa36>
   d91ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d91b0:	3301      	adds	r3, #1
   d91b2:	f43f ad2c 	beq.w	d8c0e <_strtod_r+0x48e>
   d91b6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d9378 <_strtod_r+0xbf8>
   d91ba:	f04f 3aff 	mov.w	sl, #4294967295
   d91be:	e072      	b.n	d92a6 <_strtod_r+0xb26>
   d91c0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d91c4:	e038      	b.n	d9238 <_strtod_r+0xab8>
   d91c6:	9b03      	ldr	r3, [sp, #12]
   d91c8:	b333      	cbz	r3, d9218 <_strtod_r+0xa98>
   d91ca:	9b06      	ldr	r3, [sp, #24]
   d91cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d91d0:	d822      	bhi.n	d9218 <_strtod_r+0xa98>
   d91d2:	a35d      	add	r3, pc, #372	; (adr r3, d9348 <_strtod_r+0xbc8>)
   d91d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d91d8:	4630      	mov	r0, r6
   d91da:	4639      	mov	r1, r7
   d91dc:	f7ff f952 	bl	d8484 <__aeabi_dcmple>
   d91e0:	b1a8      	cbz	r0, d920e <_strtod_r+0xa8e>
   d91e2:	4639      	mov	r1, r7
   d91e4:	4630      	mov	r0, r6
   d91e6:	f7ff f9a9 	bl	d853c <__aeabi_d2uiz>
   d91ea:	2800      	cmp	r0, #0
   d91ec:	bf08      	it	eq
   d91ee:	2001      	moveq	r0, #1
   d91f0:	f7fe fe56 	bl	d7ea0 <__aeabi_ui2d>
   d91f4:	9b07      	ldr	r3, [sp, #28]
   d91f6:	4606      	mov	r6, r0
   d91f8:	460f      	mov	r7, r1
   d91fa:	b923      	cbnz	r3, d9206 <_strtod_r+0xa86>
   d91fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9200:	9010      	str	r0, [sp, #64]	; 0x40
   d9202:	9311      	str	r3, [sp, #68]	; 0x44
   d9204:	e001      	b.n	d920a <_strtod_r+0xa8a>
   d9206:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d920a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d920e:	9a06      	ldr	r2, [sp, #24]
   d9210:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d9214:	ebc2 0903 	rsb	r9, r2, r3
   d9218:	ed9d 0b08 	vldr	d0, [sp, #32]
   d921c:	f000 ff2c 	bl	da078 <__ulp>
   d9220:	4640      	mov	r0, r8
   d9222:	ec53 2b10 	vmov	r2, r3, d0
   d9226:	4649      	mov	r1, r9
   d9228:	f7fe feb0 	bl	d7f8c <__aeabi_dmul>
   d922c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9230:	f7fe fcfa 	bl	d7c28 <__adddf3>
   d9234:	4682      	mov	sl, r0
   d9236:	468b      	mov	fp, r1
   d9238:	9b03      	ldr	r3, [sp, #12]
   d923a:	bba3      	cbnz	r3, d92a6 <_strtod_r+0xb26>
   d923c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9240:	0d1b      	lsrs	r3, r3, #20
   d9242:	9a06      	ldr	r2, [sp, #24]
   d9244:	051b      	lsls	r3, r3, #20
   d9246:	429a      	cmp	r2, r3
   d9248:	46d8      	mov	r8, fp
   d924a:	d12c      	bne.n	d92a6 <_strtod_r+0xb26>
   d924c:	4639      	mov	r1, r7
   d924e:	4630      	mov	r0, r6
   d9250:	f7ff f94c 	bl	d84ec <__aeabi_d2iz>
   d9254:	f7fe fe34 	bl	d7ec0 <__aeabi_i2d>
   d9258:	460b      	mov	r3, r1
   d925a:	4602      	mov	r2, r0
   d925c:	4639      	mov	r1, r7
   d925e:	4630      	mov	r0, r6
   d9260:	f7fe fce0 	bl	d7c24 <__aeabi_dsub>
   d9264:	9b07      	ldr	r3, [sp, #28]
   d9266:	4606      	mov	r6, r0
   d9268:	460f      	mov	r7, r1
   d926a:	b92b      	cbnz	r3, d9278 <_strtod_r+0xaf8>
   d926c:	f1ba 0f00 	cmp.w	sl, #0
   d9270:	d102      	bne.n	d9278 <_strtod_r+0xaf8>
   d9272:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9276:	b183      	cbz	r3, d929a <_strtod_r+0xb1a>
   d9278:	a335      	add	r3, pc, #212	; (adr r3, d9350 <_strtod_r+0xbd0>)
   d927a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d927e:	4630      	mov	r0, r6
   d9280:	4639      	mov	r1, r7
   d9282:	f7ff f8f5 	bl	d8470 <__aeabi_dcmplt>
   d9286:	2800      	cmp	r0, #0
   d9288:	d131      	bne.n	d92ee <_strtod_r+0xb6e>
   d928a:	a333      	add	r3, pc, #204	; (adr r3, d9358 <_strtod_r+0xbd8>)
   d928c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9290:	4630      	mov	r0, r6
   d9292:	4639      	mov	r1, r7
   d9294:	f7ff f90a 	bl	d84ac <__aeabi_dcmpgt>
   d9298:	e004      	b.n	d92a4 <_strtod_r+0xb24>
   d929a:	a331      	add	r3, pc, #196	; (adr r3, d9360 <_strtod_r+0xbe0>)
   d929c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d92a0:	f7ff f8e6 	bl	d8470 <__aeabi_dcmplt>
   d92a4:	bb18      	cbnz	r0, d92ee <_strtod_r+0xb6e>
   d92a6:	9918      	ldr	r1, [sp, #96]	; 0x60
   d92a8:	9802      	ldr	r0, [sp, #8]
   d92aa:	f000 fc53 	bl	d9b54 <_Bfree>
   d92ae:	9904      	ldr	r1, [sp, #16]
   d92b0:	9802      	ldr	r0, [sp, #8]
   d92b2:	f000 fc4f 	bl	d9b54 <_Bfree>
   d92b6:	4629      	mov	r1, r5
   d92b8:	9802      	ldr	r0, [sp, #8]
   d92ba:	f000 fc4b 	bl	d9b54 <_Bfree>
   d92be:	4621      	mov	r1, r4
   d92c0:	9802      	ldr	r0, [sp, #8]
   d92c2:	f000 fc47 	bl	d9b54 <_Bfree>
   d92c6:	e56d      	b.n	d8da4 <_strtod_r+0x624>
   d92c8:	9b03      	ldr	r3, [sp, #12]
   d92ca:	b183      	cbz	r3, d92ee <_strtod_r+0xb6e>
   d92cc:	4b2b      	ldr	r3, [pc, #172]	; (d937c <_strtod_r+0xbfc>)
   d92ce:	930b      	str	r3, [sp, #44]	; 0x2c
   d92d0:	2300      	movs	r3, #0
   d92d2:	930a      	str	r3, [sp, #40]	; 0x28
   d92d4:	4650      	mov	r0, sl
   d92d6:	4659      	mov	r1, fp
   d92d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d92dc:	f7fe fe56 	bl	d7f8c <__aeabi_dmul>
   d92e0:	4682      	mov	sl, r0
   d92e2:	468b      	mov	fp, r1
   d92e4:	b919      	cbnz	r1, d92ee <_strtod_r+0xb6e>
   d92e6:	b910      	cbnz	r0, d92ee <_strtod_r+0xb6e>
   d92e8:	9a02      	ldr	r2, [sp, #8]
   d92ea:	2322      	movs	r3, #34	; 0x22
   d92ec:	6013      	str	r3, [r2, #0]
   d92ee:	9918      	ldr	r1, [sp, #96]	; 0x60
   d92f0:	9802      	ldr	r0, [sp, #8]
   d92f2:	f000 fc2f 	bl	d9b54 <_Bfree>
   d92f6:	9904      	ldr	r1, [sp, #16]
   d92f8:	9802      	ldr	r0, [sp, #8]
   d92fa:	f000 fc2b 	bl	d9b54 <_Bfree>
   d92fe:	4629      	mov	r1, r5
   d9300:	9802      	ldr	r0, [sp, #8]
   d9302:	f000 fc27 	bl	d9b54 <_Bfree>
   d9306:	9905      	ldr	r1, [sp, #20]
   d9308:	9802      	ldr	r0, [sp, #8]
   d930a:	f000 fc23 	bl	d9b54 <_Bfree>
   d930e:	4621      	mov	r1, r4
   d9310:	9802      	ldr	r0, [sp, #8]
   d9312:	f000 fc1f 	bl	d9b54 <_Bfree>
   d9316:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9318:	b113      	cbz	r3, d9320 <_strtod_r+0xba0>
   d931a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d931c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d931e:	6013      	str	r3, [r2, #0]
   d9320:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9322:	b11b      	cbz	r3, d932c <_strtod_r+0xbac>
   d9324:	4652      	mov	r2, sl
   d9326:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d932a:	e007      	b.n	d933c <_strtod_r+0xbbc>
   d932c:	4652      	mov	r2, sl
   d932e:	465b      	mov	r3, fp
   d9330:	e004      	b.n	d933c <_strtod_r+0xbbc>
   d9332:	2500      	movs	r5, #0
   d9334:	462a      	mov	r2, r5
   d9336:	2101      	movs	r1, #1
   d9338:	f7ff bb41 	b.w	d89be <_strtod_r+0x23e>
   d933c:	ec43 2b10 	vmov	d0, r2, r3
   d9340:	b01d      	add	sp, #116	; 0x74
   d9342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9346:	bf00      	nop
   d9348:	ffc00000 	.word	0xffc00000
   d934c:	41dfffff 	.word	0x41dfffff
   d9350:	94a03595 	.word	0x94a03595
   d9354:	3fdfffff 	.word	0x3fdfffff
   d9358:	35afe535 	.word	0x35afe535
   d935c:	3fe00000 	.word	0x3fe00000
   d9360:	94a03595 	.word	0x94a03595
   d9364:	3fcfffff 	.word	0x3fcfffff
   d9368:	3ff00000 	.word	0x3ff00000
   d936c:	3fe00000 	.word	0x3fe00000
   d9370:	7fe00000 	.word	0x7fe00000
   d9374:	7c9fffff 	.word	0x7c9fffff
   d9378:	7fefffff 	.word	0x7fefffff
   d937c:	39500000 	.word	0x39500000

000d9380 <strtod>:
   d9380:	4b02      	ldr	r3, [pc, #8]	; (d938c <strtod+0xc>)
   d9382:	460a      	mov	r2, r1
   d9384:	4601      	mov	r1, r0
   d9386:	6818      	ldr	r0, [r3, #0]
   d9388:	f7ff b9fa 	b.w	d8780 <_strtod_r>
   d938c:	2003e09c 	.word	0x2003e09c

000d9390 <_strtol_r>:
   d9390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9394:	4680      	mov	r8, r0
   d9396:	4840      	ldr	r0, [pc, #256]	; (d9498 <_strtol_r+0x108>)
   d9398:	f8d0 9000 	ldr.w	r9, [r0]
   d939c:	460f      	mov	r7, r1
   d939e:	463d      	mov	r5, r7
   d93a0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d93a4:	eb09 0004 	add.w	r0, r9, r4
   d93a8:	7840      	ldrb	r0, [r0, #1]
   d93aa:	f000 0008 	and.w	r0, r0, #8
   d93ae:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d93b2:	b108      	cbz	r0, d93b8 <_strtol_r+0x28>
   d93b4:	462f      	mov	r7, r5
   d93b6:	e7f2      	b.n	d939e <_strtol_r+0xe>
   d93b8:	2c2d      	cmp	r4, #45	; 0x2d
   d93ba:	d103      	bne.n	d93c4 <_strtol_r+0x34>
   d93bc:	1cbd      	adds	r5, r7, #2
   d93be:	787c      	ldrb	r4, [r7, #1]
   d93c0:	2601      	movs	r6, #1
   d93c2:	e003      	b.n	d93cc <_strtol_r+0x3c>
   d93c4:	2c2b      	cmp	r4, #43	; 0x2b
   d93c6:	bf04      	itt	eq
   d93c8:	787c      	ldrbeq	r4, [r7, #1]
   d93ca:	1cbd      	addeq	r5, r7, #2
   d93cc:	b113      	cbz	r3, d93d4 <_strtol_r+0x44>
   d93ce:	2b10      	cmp	r3, #16
   d93d0:	d10a      	bne.n	d93e8 <_strtol_r+0x58>
   d93d2:	e05b      	b.n	d948c <_strtol_r+0xfc>
   d93d4:	2c30      	cmp	r4, #48	; 0x30
   d93d6:	d157      	bne.n	d9488 <_strtol_r+0xf8>
   d93d8:	7828      	ldrb	r0, [r5, #0]
   d93da:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d93de:	2858      	cmp	r0, #88	; 0x58
   d93e0:	d14d      	bne.n	d947e <_strtol_r+0xee>
   d93e2:	786c      	ldrb	r4, [r5, #1]
   d93e4:	2310      	movs	r3, #16
   d93e6:	3502      	adds	r5, #2
   d93e8:	2e00      	cmp	r6, #0
   d93ea:	bf14      	ite	ne
   d93ec:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d93f0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d93f4:	2700      	movs	r7, #0
   d93f6:	fbbc faf3 	udiv	sl, ip, r3
   d93fa:	4638      	mov	r0, r7
   d93fc:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9400:	eb09 0e04 	add.w	lr, r9, r4
   d9404:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9408:	f01e 0f04 	tst.w	lr, #4
   d940c:	d001      	beq.n	d9412 <_strtol_r+0x82>
   d940e:	3c30      	subs	r4, #48	; 0x30
   d9410:	e00b      	b.n	d942a <_strtol_r+0x9a>
   d9412:	f01e 0e03 	ands.w	lr, lr, #3
   d9416:	d01b      	beq.n	d9450 <_strtol_r+0xc0>
   d9418:	f1be 0f01 	cmp.w	lr, #1
   d941c:	bf0c      	ite	eq
   d941e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9422:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9426:	ebce 0404 	rsb	r4, lr, r4
   d942a:	42a3      	cmp	r3, r4
   d942c:	dd10      	ble.n	d9450 <_strtol_r+0xc0>
   d942e:	f1b7 3fff 	cmp.w	r7, #4294967295
   d9432:	d00a      	beq.n	d944a <_strtol_r+0xba>
   d9434:	4550      	cmp	r0, sl
   d9436:	d806      	bhi.n	d9446 <_strtol_r+0xb6>
   d9438:	d101      	bne.n	d943e <_strtol_r+0xae>
   d943a:	4564      	cmp	r4, ip
   d943c:	dc03      	bgt.n	d9446 <_strtol_r+0xb6>
   d943e:	fb03 4000 	mla	r0, r3, r0, r4
   d9442:	2701      	movs	r7, #1
   d9444:	e001      	b.n	d944a <_strtol_r+0xba>
   d9446:	f04f 37ff 	mov.w	r7, #4294967295
   d944a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d944e:	e7d7      	b.n	d9400 <_strtol_r+0x70>
   d9450:	1c7b      	adds	r3, r7, #1
   d9452:	d10c      	bne.n	d946e <_strtol_r+0xde>
   d9454:	2e00      	cmp	r6, #0
   d9456:	f04f 0322 	mov.w	r3, #34	; 0x22
   d945a:	bf14      	ite	ne
   d945c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9460:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9464:	f8c8 3000 	str.w	r3, [r8]
   d9468:	b92a      	cbnz	r2, d9476 <_strtol_r+0xe6>
   d946a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d946e:	b106      	cbz	r6, d9472 <_strtol_r+0xe2>
   d9470:	4240      	negs	r0, r0
   d9472:	b172      	cbz	r2, d9492 <_strtol_r+0x102>
   d9474:	b107      	cbz	r7, d9478 <_strtol_r+0xe8>
   d9476:	1e69      	subs	r1, r5, #1
   d9478:	6011      	str	r1, [r2, #0]
   d947a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d947e:	2430      	movs	r4, #48	; 0x30
   d9480:	2b00      	cmp	r3, #0
   d9482:	d1b1      	bne.n	d93e8 <_strtol_r+0x58>
   d9484:	2308      	movs	r3, #8
   d9486:	e7af      	b.n	d93e8 <_strtol_r+0x58>
   d9488:	230a      	movs	r3, #10
   d948a:	e7ad      	b.n	d93e8 <_strtol_r+0x58>
   d948c:	2c30      	cmp	r4, #48	; 0x30
   d948e:	d0a3      	beq.n	d93d8 <_strtol_r+0x48>
   d9490:	e7aa      	b.n	d93e8 <_strtol_r+0x58>
   d9492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9496:	bf00      	nop
   d9498:	2003e038 	.word	0x2003e038

000d949c <strtol>:
   d949c:	4613      	mov	r3, r2
   d949e:	460a      	mov	r2, r1
   d94a0:	4601      	mov	r1, r0
   d94a2:	4802      	ldr	r0, [pc, #8]	; (d94ac <strtol+0x10>)
   d94a4:	6800      	ldr	r0, [r0, #0]
   d94a6:	f7ff bf73 	b.w	d9390 <_strtol_r>
   d94aa:	bf00      	nop
   d94ac:	2003e09c 	.word	0x2003e09c

000d94b0 <rshift>:
   d94b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d94b2:	6906      	ldr	r6, [r0, #16]
   d94b4:	114b      	asrs	r3, r1, #5
   d94b6:	42b3      	cmp	r3, r6
   d94b8:	f100 0514 	add.w	r5, r0, #20
   d94bc:	da27      	bge.n	d950e <rshift+0x5e>
   d94be:	f011 011f 	ands.w	r1, r1, #31
   d94c2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d94c6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d94ca:	d101      	bne.n	d94d0 <rshift+0x20>
   d94cc:	4629      	mov	r1, r5
   d94ce:	e016      	b.n	d94fe <rshift+0x4e>
   d94d0:	1d14      	adds	r4, r2, #4
   d94d2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d94d6:	f1c1 0e20 	rsb	lr, r1, #32
   d94da:	40ca      	lsrs	r2, r1
   d94dc:	462b      	mov	r3, r5
   d94de:	42b4      	cmp	r4, r6
   d94e0:	d209      	bcs.n	d94f6 <rshift+0x46>
   d94e2:	6827      	ldr	r7, [r4, #0]
   d94e4:	fa07 f70e 	lsl.w	r7, r7, lr
   d94e8:	433a      	orrs	r2, r7
   d94ea:	f843 2b04 	str.w	r2, [r3], #4
   d94ee:	f854 2b04 	ldr.w	r2, [r4], #4
   d94f2:	40ca      	lsrs	r2, r1
   d94f4:	e7f3      	b.n	d94de <rshift+0x2e>
   d94f6:	601a      	str	r2, [r3, #0]
   d94f8:	b152      	cbz	r2, d9510 <rshift+0x60>
   d94fa:	3304      	adds	r3, #4
   d94fc:	e008      	b.n	d9510 <rshift+0x60>
   d94fe:	42b2      	cmp	r2, r6
   d9500:	460b      	mov	r3, r1
   d9502:	d205      	bcs.n	d9510 <rshift+0x60>
   d9504:	f852 3b04 	ldr.w	r3, [r2], #4
   d9508:	f841 3b04 	str.w	r3, [r1], #4
   d950c:	e7f7      	b.n	d94fe <rshift+0x4e>
   d950e:	462b      	mov	r3, r5
   d9510:	1b5b      	subs	r3, r3, r5
   d9512:	109b      	asrs	r3, r3, #2
   d9514:	6103      	str	r3, [r0, #16]
   d9516:	b903      	cbnz	r3, d951a <rshift+0x6a>
   d9518:	6143      	str	r3, [r0, #20]
   d951a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d951c <__hexdig_fun>:
   d951c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9520:	2b09      	cmp	r3, #9
   d9522:	d801      	bhi.n	d9528 <__hexdig_fun+0xc>
   d9524:	3820      	subs	r0, #32
   d9526:	e00a      	b.n	d953e <__hexdig_fun+0x22>
   d9528:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d952c:	2b05      	cmp	r3, #5
   d952e:	d801      	bhi.n	d9534 <__hexdig_fun+0x18>
   d9530:	3847      	subs	r0, #71	; 0x47
   d9532:	e004      	b.n	d953e <__hexdig_fun+0x22>
   d9534:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d9538:	2b05      	cmp	r3, #5
   d953a:	d802      	bhi.n	d9542 <__hexdig_fun+0x26>
   d953c:	3827      	subs	r0, #39	; 0x27
   d953e:	b2c0      	uxtb	r0, r0
   d9540:	4770      	bx	lr
   d9542:	2000      	movs	r0, #0
   d9544:	4770      	bx	lr

000d9546 <__gethex>:
   d9546:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d954a:	b08b      	sub	sp, #44	; 0x2c
   d954c:	468a      	mov	sl, r1
   d954e:	4690      	mov	r8, r2
   d9550:	9306      	str	r3, [sp, #24]
   d9552:	9002      	str	r0, [sp, #8]
   d9554:	f7ff f87c 	bl	d8650 <_localeconv_r>
   d9558:	6803      	ldr	r3, [r0, #0]
   d955a:	9303      	str	r3, [sp, #12]
   d955c:	4618      	mov	r0, r3
   d955e:	f7ff f8c1 	bl	d86e4 <strlen>
   d9562:	9b03      	ldr	r3, [sp, #12]
   d9564:	9001      	str	r0, [sp, #4]
   d9566:	4403      	add	r3, r0
   d9568:	f04f 0b00 	mov.w	fp, #0
   d956c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d9570:	9307      	str	r3, [sp, #28]
   d9572:	f8da 3000 	ldr.w	r3, [sl]
   d9576:	3302      	adds	r3, #2
   d9578:	461f      	mov	r7, r3
   d957a:	f813 0b01 	ldrb.w	r0, [r3], #1
   d957e:	2830      	cmp	r0, #48	; 0x30
   d9580:	d102      	bne.n	d9588 <__gethex+0x42>
   d9582:	f10b 0b01 	add.w	fp, fp, #1
   d9586:	e7f7      	b.n	d9578 <__gethex+0x32>
   d9588:	f7ff ffc8 	bl	d951c <__hexdig_fun>
   d958c:	4604      	mov	r4, r0
   d958e:	b9e0      	cbnz	r0, d95ca <__gethex+0x84>
   d9590:	9a01      	ldr	r2, [sp, #4]
   d9592:	9903      	ldr	r1, [sp, #12]
   d9594:	4638      	mov	r0, r7
   d9596:	f7ff f8ad 	bl	d86f4 <strncmp>
   d959a:	2800      	cmp	r0, #0
   d959c:	d134      	bne.n	d9608 <__gethex+0xc2>
   d959e:	9b01      	ldr	r3, [sp, #4]
   d95a0:	5cf8      	ldrb	r0, [r7, r3]
   d95a2:	18fe      	adds	r6, r7, r3
   d95a4:	f7ff ffba 	bl	d951c <__hexdig_fun>
   d95a8:	b380      	cbz	r0, d960c <__gethex+0xc6>
   d95aa:	4633      	mov	r3, r6
   d95ac:	7818      	ldrb	r0, [r3, #0]
   d95ae:	2830      	cmp	r0, #48	; 0x30
   d95b0:	461f      	mov	r7, r3
   d95b2:	f103 0301 	add.w	r3, r3, #1
   d95b6:	d0f9      	beq.n	d95ac <__gethex+0x66>
   d95b8:	f7ff ffb0 	bl	d951c <__hexdig_fun>
   d95bc:	fab0 f580 	clz	r5, r0
   d95c0:	096d      	lsrs	r5, r5, #5
   d95c2:	4634      	mov	r4, r6
   d95c4:	f04f 0b01 	mov.w	fp, #1
   d95c8:	e001      	b.n	d95ce <__gethex+0x88>
   d95ca:	2500      	movs	r5, #0
   d95cc:	462c      	mov	r4, r5
   d95ce:	463a      	mov	r2, r7
   d95d0:	4616      	mov	r6, r2
   d95d2:	3201      	adds	r2, #1
   d95d4:	7830      	ldrb	r0, [r6, #0]
   d95d6:	f7ff ffa1 	bl	d951c <__hexdig_fun>
   d95da:	2800      	cmp	r0, #0
   d95dc:	d1f8      	bne.n	d95d0 <__gethex+0x8a>
   d95de:	9a01      	ldr	r2, [sp, #4]
   d95e0:	9903      	ldr	r1, [sp, #12]
   d95e2:	4630      	mov	r0, r6
   d95e4:	f7ff f886 	bl	d86f4 <strncmp>
   d95e8:	b950      	cbnz	r0, d9600 <__gethex+0xba>
   d95ea:	b954      	cbnz	r4, d9602 <__gethex+0xbc>
   d95ec:	9b01      	ldr	r3, [sp, #4]
   d95ee:	18f4      	adds	r4, r6, r3
   d95f0:	4622      	mov	r2, r4
   d95f2:	4616      	mov	r6, r2
   d95f4:	3201      	adds	r2, #1
   d95f6:	7830      	ldrb	r0, [r6, #0]
   d95f8:	f7ff ff90 	bl	d951c <__hexdig_fun>
   d95fc:	2800      	cmp	r0, #0
   d95fe:	d1f8      	bne.n	d95f2 <__gethex+0xac>
   d9600:	b134      	cbz	r4, d9610 <__gethex+0xca>
   d9602:	1ba4      	subs	r4, r4, r6
   d9604:	00a4      	lsls	r4, r4, #2
   d9606:	e003      	b.n	d9610 <__gethex+0xca>
   d9608:	463e      	mov	r6, r7
   d960a:	e000      	b.n	d960e <__gethex+0xc8>
   d960c:	4604      	mov	r4, r0
   d960e:	2501      	movs	r5, #1
   d9610:	7833      	ldrb	r3, [r6, #0]
   d9612:	2b50      	cmp	r3, #80	; 0x50
   d9614:	d001      	beq.n	d961a <__gethex+0xd4>
   d9616:	2b70      	cmp	r3, #112	; 0x70
   d9618:	d12a      	bne.n	d9670 <__gethex+0x12a>
   d961a:	7873      	ldrb	r3, [r6, #1]
   d961c:	2b2b      	cmp	r3, #43	; 0x2b
   d961e:	d008      	beq.n	d9632 <__gethex+0xec>
   d9620:	2b2d      	cmp	r3, #45	; 0x2d
   d9622:	d003      	beq.n	d962c <__gethex+0xe6>
   d9624:	1c71      	adds	r1, r6, #1
   d9626:	f04f 0900 	mov.w	r9, #0
   d962a:	e005      	b.n	d9638 <__gethex+0xf2>
   d962c:	f04f 0901 	mov.w	r9, #1
   d9630:	e001      	b.n	d9636 <__gethex+0xf0>
   d9632:	f04f 0900 	mov.w	r9, #0
   d9636:	1cb1      	adds	r1, r6, #2
   d9638:	7808      	ldrb	r0, [r1, #0]
   d963a:	f7ff ff6f 	bl	d951c <__hexdig_fun>
   d963e:	1e43      	subs	r3, r0, #1
   d9640:	b2db      	uxtb	r3, r3
   d9642:	2b18      	cmp	r3, #24
   d9644:	d814      	bhi.n	d9670 <__gethex+0x12a>
   d9646:	f1a0 0210 	sub.w	r2, r0, #16
   d964a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d964e:	f7ff ff65 	bl	d951c <__hexdig_fun>
   d9652:	1e43      	subs	r3, r0, #1
   d9654:	b2db      	uxtb	r3, r3
   d9656:	2b18      	cmp	r3, #24
   d9658:	d804      	bhi.n	d9664 <__gethex+0x11e>
   d965a:	230a      	movs	r3, #10
   d965c:	fb03 0202 	mla	r2, r3, r2, r0
   d9660:	3a10      	subs	r2, #16
   d9662:	e7f2      	b.n	d964a <__gethex+0x104>
   d9664:	f1b9 0f00 	cmp.w	r9, #0
   d9668:	d000      	beq.n	d966c <__gethex+0x126>
   d966a:	4252      	negs	r2, r2
   d966c:	4414      	add	r4, r2
   d966e:	e000      	b.n	d9672 <__gethex+0x12c>
   d9670:	4631      	mov	r1, r6
   d9672:	f8ca 1000 	str.w	r1, [sl]
   d9676:	b12d      	cbz	r5, d9684 <__gethex+0x13e>
   d9678:	f1bb 0f00 	cmp.w	fp, #0
   d967c:	bf14      	ite	ne
   d967e:	2000      	movne	r0, #0
   d9680:	2006      	moveq	r0, #6
   d9682:	e17c      	b.n	d997e <__gethex+0x438>
   d9684:	1bf3      	subs	r3, r6, r7
   d9686:	3b01      	subs	r3, #1
   d9688:	4629      	mov	r1, r5
   d968a:	2b07      	cmp	r3, #7
   d968c:	dd02      	ble.n	d9694 <__gethex+0x14e>
   d968e:	3101      	adds	r1, #1
   d9690:	105b      	asrs	r3, r3, #1
   d9692:	e7fa      	b.n	d968a <__gethex+0x144>
   d9694:	9802      	ldr	r0, [sp, #8]
   d9696:	f000 fa28 	bl	d9aea <_Balloc>
   d969a:	9b01      	ldr	r3, [sp, #4]
   d969c:	f100 0a14 	add.w	sl, r0, #20
   d96a0:	f04f 0900 	mov.w	r9, #0
   d96a4:	f1c3 0301 	rsb	r3, r3, #1
   d96a8:	4605      	mov	r5, r0
   d96aa:	f8cd a010 	str.w	sl, [sp, #16]
   d96ae:	46cb      	mov	fp, r9
   d96b0:	9308      	str	r3, [sp, #32]
   d96b2:	42b7      	cmp	r7, r6
   d96b4:	d22f      	bcs.n	d9716 <__gethex+0x1d0>
   d96b6:	1e73      	subs	r3, r6, #1
   d96b8:	9305      	str	r3, [sp, #20]
   d96ba:	9a07      	ldr	r2, [sp, #28]
   d96bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d96c0:	4293      	cmp	r3, r2
   d96c2:	d00b      	beq.n	d96dc <__gethex+0x196>
   d96c4:	f1bb 0f20 	cmp.w	fp, #32
   d96c8:	d116      	bne.n	d96f8 <__gethex+0x1b2>
   d96ca:	9b04      	ldr	r3, [sp, #16]
   d96cc:	f8c3 9000 	str.w	r9, [r3]
   d96d0:	3304      	adds	r3, #4
   d96d2:	f04f 0900 	mov.w	r9, #0
   d96d6:	9304      	str	r3, [sp, #16]
   d96d8:	46cb      	mov	fp, r9
   d96da:	e00d      	b.n	d96f8 <__gethex+0x1b2>
   d96dc:	9b05      	ldr	r3, [sp, #20]
   d96de:	9a08      	ldr	r2, [sp, #32]
   d96e0:	4413      	add	r3, r2
   d96e2:	429f      	cmp	r7, r3
   d96e4:	d8ee      	bhi.n	d96c4 <__gethex+0x17e>
   d96e6:	4618      	mov	r0, r3
   d96e8:	9a01      	ldr	r2, [sp, #4]
   d96ea:	9903      	ldr	r1, [sp, #12]
   d96ec:	9309      	str	r3, [sp, #36]	; 0x24
   d96ee:	f7ff f801 	bl	d86f4 <strncmp>
   d96f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d96f4:	b168      	cbz	r0, d9712 <__gethex+0x1cc>
   d96f6:	e7e5      	b.n	d96c4 <__gethex+0x17e>
   d96f8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d96fc:	f7ff ff0e 	bl	d951c <__hexdig_fun>
   d9700:	f000 000f 	and.w	r0, r0, #15
   d9704:	fa00 f00b 	lsl.w	r0, r0, fp
   d9708:	9b05      	ldr	r3, [sp, #20]
   d970a:	ea49 0900 	orr.w	r9, r9, r0
   d970e:	f10b 0b04 	add.w	fp, fp, #4
   d9712:	461e      	mov	r6, r3
   d9714:	e7cd      	b.n	d96b2 <__gethex+0x16c>
   d9716:	9804      	ldr	r0, [sp, #16]
   d9718:	f840 9b04 	str.w	r9, [r0], #4
   d971c:	ebca 0000 	rsb	r0, sl, r0
   d9720:	1080      	asrs	r0, r0, #2
   d9722:	6128      	str	r0, [r5, #16]
   d9724:	0147      	lsls	r7, r0, #5
   d9726:	4648      	mov	r0, r9
   d9728:	f000 faa4 	bl	d9c74 <__hi0bits>
   d972c:	f8d8 6000 	ldr.w	r6, [r8]
   d9730:	1a38      	subs	r0, r7, r0
   d9732:	42b0      	cmp	r0, r6
   d9734:	dd26      	ble.n	d9784 <__gethex+0x23e>
   d9736:	1b87      	subs	r7, r0, r6
   d9738:	4639      	mov	r1, r7
   d973a:	4628      	mov	r0, r5
   d973c:	f000 fda3 	bl	da286 <__any_on>
   d9740:	b1c8      	cbz	r0, d9776 <__gethex+0x230>
   d9742:	1e7b      	subs	r3, r7, #1
   d9744:	1159      	asrs	r1, r3, #5
   d9746:	f003 021f 	and.w	r2, r3, #31
   d974a:	f04f 0901 	mov.w	r9, #1
   d974e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d9752:	fa09 f202 	lsl.w	r2, r9, r2
   d9756:	420a      	tst	r2, r1
   d9758:	d00e      	beq.n	d9778 <__gethex+0x232>
   d975a:	454b      	cmp	r3, r9
   d975c:	dc02      	bgt.n	d9764 <__gethex+0x21e>
   d975e:	f04f 0902 	mov.w	r9, #2
   d9762:	e009      	b.n	d9778 <__gethex+0x232>
   d9764:	1eb9      	subs	r1, r7, #2
   d9766:	4628      	mov	r0, r5
   d9768:	f000 fd8d 	bl	da286 <__any_on>
   d976c:	2800      	cmp	r0, #0
   d976e:	d0f6      	beq.n	d975e <__gethex+0x218>
   d9770:	f04f 0903 	mov.w	r9, #3
   d9774:	e000      	b.n	d9778 <__gethex+0x232>
   d9776:	4681      	mov	r9, r0
   d9778:	4639      	mov	r1, r7
   d977a:	4628      	mov	r0, r5
   d977c:	f7ff fe98 	bl	d94b0 <rshift>
   d9780:	443c      	add	r4, r7
   d9782:	e00c      	b.n	d979e <__gethex+0x258>
   d9784:	da09      	bge.n	d979a <__gethex+0x254>
   d9786:	1a37      	subs	r7, r6, r0
   d9788:	4629      	mov	r1, r5
   d978a:	463a      	mov	r2, r7
   d978c:	9802      	ldr	r0, [sp, #8]
   d978e:	f000 fba7 	bl	d9ee0 <__lshift>
   d9792:	1be4      	subs	r4, r4, r7
   d9794:	4605      	mov	r5, r0
   d9796:	f100 0a14 	add.w	sl, r0, #20
   d979a:	f04f 0900 	mov.w	r9, #0
   d979e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d97a2:	429c      	cmp	r4, r3
   d97a4:	dd08      	ble.n	d97b8 <__gethex+0x272>
   d97a6:	9802      	ldr	r0, [sp, #8]
   d97a8:	4629      	mov	r1, r5
   d97aa:	f000 f9d3 	bl	d9b54 <_Bfree>
   d97ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d97b0:	2300      	movs	r3, #0
   d97b2:	6013      	str	r3, [r2, #0]
   d97b4:	20a3      	movs	r0, #163	; 0xa3
   d97b6:	e0e2      	b.n	d997e <__gethex+0x438>
   d97b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d97bc:	4284      	cmp	r4, r0
   d97be:	da53      	bge.n	d9868 <__gethex+0x322>
   d97c0:	1b04      	subs	r4, r0, r4
   d97c2:	42a6      	cmp	r6, r4
   d97c4:	dc2e      	bgt.n	d9824 <__gethex+0x2de>
   d97c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d97ca:	2b02      	cmp	r3, #2
   d97cc:	d01a      	beq.n	d9804 <__gethex+0x2be>
   d97ce:	2b03      	cmp	r3, #3
   d97d0:	d01c      	beq.n	d980c <__gethex+0x2c6>
   d97d2:	2b01      	cmp	r3, #1
   d97d4:	d11d      	bne.n	d9812 <__gethex+0x2cc>
   d97d6:	42a6      	cmp	r6, r4
   d97d8:	d11b      	bne.n	d9812 <__gethex+0x2cc>
   d97da:	2e01      	cmp	r6, #1
   d97dc:	dc0b      	bgt.n	d97f6 <__gethex+0x2b0>
   d97de:	9a06      	ldr	r2, [sp, #24]
   d97e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d97e4:	6013      	str	r3, [r2, #0]
   d97e6:	2301      	movs	r3, #1
   d97e8:	612b      	str	r3, [r5, #16]
   d97ea:	f8ca 3000 	str.w	r3, [sl]
   d97ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d97f0:	2062      	movs	r0, #98	; 0x62
   d97f2:	601d      	str	r5, [r3, #0]
   d97f4:	e0c3      	b.n	d997e <__gethex+0x438>
   d97f6:	1e71      	subs	r1, r6, #1
   d97f8:	4628      	mov	r0, r5
   d97fa:	f000 fd44 	bl	da286 <__any_on>
   d97fe:	2800      	cmp	r0, #0
   d9800:	d1ed      	bne.n	d97de <__gethex+0x298>
   d9802:	e006      	b.n	d9812 <__gethex+0x2cc>
   d9804:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9806:	2b00      	cmp	r3, #0
   d9808:	d0e9      	beq.n	d97de <__gethex+0x298>
   d980a:	e002      	b.n	d9812 <__gethex+0x2cc>
   d980c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d980e:	2b00      	cmp	r3, #0
   d9810:	d1e5      	bne.n	d97de <__gethex+0x298>
   d9812:	9802      	ldr	r0, [sp, #8]
   d9814:	4629      	mov	r1, r5
   d9816:	f000 f99d 	bl	d9b54 <_Bfree>
   d981a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d981c:	2300      	movs	r3, #0
   d981e:	6013      	str	r3, [r2, #0]
   d9820:	2050      	movs	r0, #80	; 0x50
   d9822:	e0ac      	b.n	d997e <__gethex+0x438>
   d9824:	1e67      	subs	r7, r4, #1
   d9826:	f1b9 0f00 	cmp.w	r9, #0
   d982a:	d106      	bne.n	d983a <__gethex+0x2f4>
   d982c:	b13f      	cbz	r7, d983e <__gethex+0x2f8>
   d982e:	4639      	mov	r1, r7
   d9830:	4628      	mov	r0, r5
   d9832:	f000 fd28 	bl	da286 <__any_on>
   d9836:	4681      	mov	r9, r0
   d9838:	e001      	b.n	d983e <__gethex+0x2f8>
   d983a:	f04f 0901 	mov.w	r9, #1
   d983e:	117a      	asrs	r2, r7, #5
   d9840:	2301      	movs	r3, #1
   d9842:	f007 071f 	and.w	r7, r7, #31
   d9846:	fa03 f707 	lsl.w	r7, r3, r7
   d984a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d984e:	4621      	mov	r1, r4
   d9850:	421f      	tst	r7, r3
   d9852:	4628      	mov	r0, r5
   d9854:	bf18      	it	ne
   d9856:	f049 0902 	orrne.w	r9, r9, #2
   d985a:	1b36      	subs	r6, r6, r4
   d985c:	f7ff fe28 	bl	d94b0 <rshift>
   d9860:	2702      	movs	r7, #2
   d9862:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d9866:	e000      	b.n	d986a <__gethex+0x324>
   d9868:	2701      	movs	r7, #1
   d986a:	f1b9 0f00 	cmp.w	r9, #0
   d986e:	f000 8081 	beq.w	d9974 <__gethex+0x42e>
   d9872:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9876:	2b02      	cmp	r3, #2
   d9878:	d00e      	beq.n	d9898 <__gethex+0x352>
   d987a:	2b03      	cmp	r3, #3
   d987c:	d010      	beq.n	d98a0 <__gethex+0x35a>
   d987e:	2b01      	cmp	r3, #1
   d9880:	d176      	bne.n	d9970 <__gethex+0x42a>
   d9882:	f019 0f02 	tst.w	r9, #2
   d9886:	d073      	beq.n	d9970 <__gethex+0x42a>
   d9888:	f8da 0000 	ldr.w	r0, [sl]
   d988c:	ea49 0900 	orr.w	r9, r9, r0
   d9890:	f019 0f01 	tst.w	r9, #1
   d9894:	d107      	bne.n	d98a6 <__gethex+0x360>
   d9896:	e06b      	b.n	d9970 <__gethex+0x42a>
   d9898:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d989a:	f1c3 0301 	rsb	r3, r3, #1
   d989e:	9315      	str	r3, [sp, #84]	; 0x54
   d98a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d98a2:	2b00      	cmp	r3, #0
   d98a4:	d064      	beq.n	d9970 <__gethex+0x42a>
   d98a6:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d98aa:	f105 0314 	add.w	r3, r5, #20
   d98ae:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d98b2:	eb03 0109 	add.w	r1, r3, r9
   d98b6:	2000      	movs	r0, #0
   d98b8:	681a      	ldr	r2, [r3, #0]
   d98ba:	f1b2 3fff 	cmp.w	r2, #4294967295
   d98be:	d002      	beq.n	d98c6 <__gethex+0x380>
   d98c0:	3201      	adds	r2, #1
   d98c2:	601a      	str	r2, [r3, #0]
   d98c4:	e020      	b.n	d9908 <__gethex+0x3c2>
   d98c6:	f843 0b04 	str.w	r0, [r3], #4
   d98ca:	4299      	cmp	r1, r3
   d98cc:	d8f4      	bhi.n	d98b8 <__gethex+0x372>
   d98ce:	68ab      	ldr	r3, [r5, #8]
   d98d0:	459a      	cmp	sl, r3
   d98d2:	db12      	blt.n	d98fa <__gethex+0x3b4>
   d98d4:	6869      	ldr	r1, [r5, #4]
   d98d6:	9802      	ldr	r0, [sp, #8]
   d98d8:	3101      	adds	r1, #1
   d98da:	f000 f906 	bl	d9aea <_Balloc>
   d98de:	692a      	ldr	r2, [r5, #16]
   d98e0:	3202      	adds	r2, #2
   d98e2:	f105 010c 	add.w	r1, r5, #12
   d98e6:	4683      	mov	fp, r0
   d98e8:	0092      	lsls	r2, r2, #2
   d98ea:	300c      	adds	r0, #12
   d98ec:	f7fe feb4 	bl	d8658 <memcpy>
   d98f0:	4629      	mov	r1, r5
   d98f2:	9802      	ldr	r0, [sp, #8]
   d98f4:	f000 f92e 	bl	d9b54 <_Bfree>
   d98f8:	465d      	mov	r5, fp
   d98fa:	692b      	ldr	r3, [r5, #16]
   d98fc:	1c5a      	adds	r2, r3, #1
   d98fe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d9902:	612a      	str	r2, [r5, #16]
   d9904:	2201      	movs	r2, #1
   d9906:	615a      	str	r2, [r3, #20]
   d9908:	2f02      	cmp	r7, #2
   d990a:	f105 0214 	add.w	r2, r5, #20
   d990e:	d111      	bne.n	d9934 <__gethex+0x3ee>
   d9910:	f8d8 3000 	ldr.w	r3, [r8]
   d9914:	3b01      	subs	r3, #1
   d9916:	429e      	cmp	r6, r3
   d9918:	d127      	bne.n	d996a <__gethex+0x424>
   d991a:	1171      	asrs	r1, r6, #5
   d991c:	2301      	movs	r3, #1
   d991e:	f006 061f 	and.w	r6, r6, #31
   d9922:	fa03 f606 	lsl.w	r6, r3, r6
   d9926:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d992a:	421e      	tst	r6, r3
   d992c:	bf0c      	ite	eq
   d992e:	2702      	moveq	r7, #2
   d9930:	2701      	movne	r7, #1
   d9932:	e01a      	b.n	d996a <__gethex+0x424>
   d9934:	692b      	ldr	r3, [r5, #16]
   d9936:	459a      	cmp	sl, r3
   d9938:	da0a      	bge.n	d9950 <__gethex+0x40a>
   d993a:	2101      	movs	r1, #1
   d993c:	4628      	mov	r0, r5
   d993e:	f7ff fdb7 	bl	d94b0 <rshift>
   d9942:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9946:	3401      	adds	r4, #1
   d9948:	429c      	cmp	r4, r3
   d994a:	f73f af2c 	bgt.w	d97a6 <__gethex+0x260>
   d994e:	e00b      	b.n	d9968 <__gethex+0x422>
   d9950:	f016 061f 	ands.w	r6, r6, #31
   d9954:	d008      	beq.n	d9968 <__gethex+0x422>
   d9956:	4491      	add	r9, r2
   d9958:	f1c6 0620 	rsb	r6, r6, #32
   d995c:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d9960:	f000 f988 	bl	d9c74 <__hi0bits>
   d9964:	42b0      	cmp	r0, r6
   d9966:	dbe8      	blt.n	d993a <__gethex+0x3f4>
   d9968:	2701      	movs	r7, #1
   d996a:	f047 0720 	orr.w	r7, r7, #32
   d996e:	e001      	b.n	d9974 <__gethex+0x42e>
   d9970:	f047 0710 	orr.w	r7, r7, #16
   d9974:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9976:	601d      	str	r5, [r3, #0]
   d9978:	9b06      	ldr	r3, [sp, #24]
   d997a:	4638      	mov	r0, r7
   d997c:	601c      	str	r4, [r3, #0]
   d997e:	b00b      	add	sp, #44	; 0x2c
   d9980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9984 <L_shift>:
   d9984:	f1c2 0208 	rsb	r2, r2, #8
   d9988:	0092      	lsls	r2, r2, #2
   d998a:	b570      	push	{r4, r5, r6, lr}
   d998c:	f1c2 0620 	rsb	r6, r2, #32
   d9990:	6843      	ldr	r3, [r0, #4]
   d9992:	6805      	ldr	r5, [r0, #0]
   d9994:	fa03 f406 	lsl.w	r4, r3, r6
   d9998:	432c      	orrs	r4, r5
   d999a:	40d3      	lsrs	r3, r2
   d999c:	6004      	str	r4, [r0, #0]
   d999e:	f840 3f04 	str.w	r3, [r0, #4]!
   d99a2:	4288      	cmp	r0, r1
   d99a4:	d3f4      	bcc.n	d9990 <L_shift+0xc>
   d99a6:	bd70      	pop	{r4, r5, r6, pc}

000d99a8 <__match>:
   d99a8:	b530      	push	{r4, r5, lr}
   d99aa:	6803      	ldr	r3, [r0, #0]
   d99ac:	f811 4b01 	ldrb.w	r4, [r1], #1
   d99b0:	3301      	adds	r3, #1
   d99b2:	b14c      	cbz	r4, d99c8 <__match+0x20>
   d99b4:	781a      	ldrb	r2, [r3, #0]
   d99b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d99ba:	2d19      	cmp	r5, #25
   d99bc:	bf98      	it	ls
   d99be:	3220      	addls	r2, #32
   d99c0:	42a2      	cmp	r2, r4
   d99c2:	d0f3      	beq.n	d99ac <__match+0x4>
   d99c4:	2000      	movs	r0, #0
   d99c6:	bd30      	pop	{r4, r5, pc}
   d99c8:	6003      	str	r3, [r0, #0]
   d99ca:	2001      	movs	r0, #1
   d99cc:	bd30      	pop	{r4, r5, pc}

000d99ce <__hexnan>:
   d99ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d99d2:	680b      	ldr	r3, [r1, #0]
   d99d4:	f8d0 b000 	ldr.w	fp, [r0]
   d99d8:	115e      	asrs	r6, r3, #5
   d99da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d99de:	f013 031f 	ands.w	r3, r3, #31
   d99e2:	b085      	sub	sp, #20
   d99e4:	bf18      	it	ne
   d99e6:	3604      	addne	r6, #4
   d99e8:	1f35      	subs	r5, r6, #4
   d99ea:	4617      	mov	r7, r2
   d99ec:	2200      	movs	r2, #0
   d99ee:	4682      	mov	sl, r0
   d99f0:	9301      	str	r3, [sp, #4]
   d99f2:	f846 2c04 	str.w	r2, [r6, #-4]
   d99f6:	46a8      	mov	r8, r5
   d99f8:	462c      	mov	r4, r5
   d99fa:	9200      	str	r2, [sp, #0]
   d99fc:	4691      	mov	r9, r2
   d99fe:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d9a02:	2900      	cmp	r1, #0
   d9a04:	d03c      	beq.n	d9a80 <__hexnan+0xb2>
   d9a06:	4608      	mov	r0, r1
   d9a08:	9203      	str	r2, [sp, #12]
   d9a0a:	9102      	str	r1, [sp, #8]
   d9a0c:	f7ff fd86 	bl	d951c <__hexdig_fun>
   d9a10:	9a03      	ldr	r2, [sp, #12]
   d9a12:	bb00      	cbnz	r0, d9a56 <__hexnan+0x88>
   d9a14:	9902      	ldr	r1, [sp, #8]
   d9a16:	2920      	cmp	r1, #32
   d9a18:	d816      	bhi.n	d9a48 <__hexnan+0x7a>
   d9a1a:	9b00      	ldr	r3, [sp, #0]
   d9a1c:	4599      	cmp	r9, r3
   d9a1e:	ddee      	ble.n	d99fe <__hexnan+0x30>
   d9a20:	4544      	cmp	r4, r8
   d9a22:	d205      	bcs.n	d9a30 <__hexnan+0x62>
   d9a24:	2a07      	cmp	r2, #7
   d9a26:	dc03      	bgt.n	d9a30 <__hexnan+0x62>
   d9a28:	4641      	mov	r1, r8
   d9a2a:	4620      	mov	r0, r4
   d9a2c:	f7ff ffaa 	bl	d9984 <L_shift>
   d9a30:	42bc      	cmp	r4, r7
   d9a32:	d923      	bls.n	d9a7c <__hexnan+0xae>
   d9a34:	2300      	movs	r3, #0
   d9a36:	f1a4 0804 	sub.w	r8, r4, #4
   d9a3a:	f844 3c04 	str.w	r3, [r4, #-4]
   d9a3e:	f8cd 9000 	str.w	r9, [sp]
   d9a42:	4644      	mov	r4, r8
   d9a44:	461a      	mov	r2, r3
   d9a46:	e7da      	b.n	d99fe <__hexnan+0x30>
   d9a48:	2929      	cmp	r1, #41	; 0x29
   d9a4a:	d148      	bne.n	d9ade <__hexnan+0x110>
   d9a4c:	f10b 0301 	add.w	r3, fp, #1
   d9a50:	f8ca 3000 	str.w	r3, [sl]
   d9a54:	e014      	b.n	d9a80 <__hexnan+0xb2>
   d9a56:	3201      	adds	r2, #1
   d9a58:	2a08      	cmp	r2, #8
   d9a5a:	f109 0901 	add.w	r9, r9, #1
   d9a5e:	dd06      	ble.n	d9a6e <__hexnan+0xa0>
   d9a60:	42bc      	cmp	r4, r7
   d9a62:	d9cc      	bls.n	d99fe <__hexnan+0x30>
   d9a64:	2300      	movs	r3, #0
   d9a66:	f844 3c04 	str.w	r3, [r4, #-4]
   d9a6a:	2201      	movs	r2, #1
   d9a6c:	3c04      	subs	r4, #4
   d9a6e:	6821      	ldr	r1, [r4, #0]
   d9a70:	f000 000f 	and.w	r0, r0, #15
   d9a74:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d9a78:	6020      	str	r0, [r4, #0]
   d9a7a:	e7c0      	b.n	d99fe <__hexnan+0x30>
   d9a7c:	2208      	movs	r2, #8
   d9a7e:	e7be      	b.n	d99fe <__hexnan+0x30>
   d9a80:	f1b9 0f00 	cmp.w	r9, #0
   d9a84:	d02b      	beq.n	d9ade <__hexnan+0x110>
   d9a86:	4544      	cmp	r4, r8
   d9a88:	d205      	bcs.n	d9a96 <__hexnan+0xc8>
   d9a8a:	2a07      	cmp	r2, #7
   d9a8c:	dc03      	bgt.n	d9a96 <__hexnan+0xc8>
   d9a8e:	4641      	mov	r1, r8
   d9a90:	4620      	mov	r0, r4
   d9a92:	f7ff ff77 	bl	d9984 <L_shift>
   d9a96:	42bc      	cmp	r4, r7
   d9a98:	d90c      	bls.n	d9ab4 <__hexnan+0xe6>
   d9a9a:	463b      	mov	r3, r7
   d9a9c:	f854 2b04 	ldr.w	r2, [r4], #4
   d9aa0:	f843 2b04 	str.w	r2, [r3], #4
   d9aa4:	42a5      	cmp	r5, r4
   d9aa6:	d2f9      	bcs.n	d9a9c <__hexnan+0xce>
   d9aa8:	2200      	movs	r2, #0
   d9aaa:	f843 2b04 	str.w	r2, [r3], #4
   d9aae:	429d      	cmp	r5, r3
   d9ab0:	d2fb      	bcs.n	d9aaa <__hexnan+0xdc>
   d9ab2:	e00b      	b.n	d9acc <__hexnan+0xfe>
   d9ab4:	9b01      	ldr	r3, [sp, #4]
   d9ab6:	b14b      	cbz	r3, d9acc <__hexnan+0xfe>
   d9ab8:	f1c3 0220 	rsb	r2, r3, #32
   d9abc:	f04f 33ff 	mov.w	r3, #4294967295
   d9ac0:	40d3      	lsrs	r3, r2
   d9ac2:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d9ac6:	4013      	ands	r3, r2
   d9ac8:	f846 3c04 	str.w	r3, [r6, #-4]
   d9acc:	682b      	ldr	r3, [r5, #0]
   d9ace:	b943      	cbnz	r3, d9ae2 <__hexnan+0x114>
   d9ad0:	42bd      	cmp	r5, r7
   d9ad2:	d102      	bne.n	d9ada <__hexnan+0x10c>
   d9ad4:	2301      	movs	r3, #1
   d9ad6:	602b      	str	r3, [r5, #0]
   d9ad8:	e003      	b.n	d9ae2 <__hexnan+0x114>
   d9ada:	3d04      	subs	r5, #4
   d9adc:	e7f6      	b.n	d9acc <__hexnan+0xfe>
   d9ade:	2004      	movs	r0, #4
   d9ae0:	e000      	b.n	d9ae4 <__hexnan+0x116>
   d9ae2:	2005      	movs	r0, #5
   d9ae4:	b005      	add	sp, #20
   d9ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9aea <_Balloc>:
   d9aea:	b570      	push	{r4, r5, r6, lr}
   d9aec:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d9aee:	4604      	mov	r4, r0
   d9af0:	460e      	mov	r6, r1
   d9af2:	b93d      	cbnz	r5, d9b04 <_Balloc+0x1a>
   d9af4:	2010      	movs	r0, #16
   d9af6:	f7fc fd07 	bl	d6508 <malloc>
   d9afa:	6260      	str	r0, [r4, #36]	; 0x24
   d9afc:	6045      	str	r5, [r0, #4]
   d9afe:	6085      	str	r5, [r0, #8]
   d9b00:	6005      	str	r5, [r0, #0]
   d9b02:	60c5      	str	r5, [r0, #12]
   d9b04:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d9b06:	68eb      	ldr	r3, [r5, #12]
   d9b08:	b143      	cbz	r3, d9b1c <_Balloc+0x32>
   d9b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9b0c:	68db      	ldr	r3, [r3, #12]
   d9b0e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d9b12:	b178      	cbz	r0, d9b34 <_Balloc+0x4a>
   d9b14:	6802      	ldr	r2, [r0, #0]
   d9b16:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d9b1a:	e017      	b.n	d9b4c <_Balloc+0x62>
   d9b1c:	2221      	movs	r2, #33	; 0x21
   d9b1e:	2104      	movs	r1, #4
   d9b20:	4620      	mov	r0, r4
   d9b22:	f000 fbd2 	bl	da2ca <_calloc_r>
   d9b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9b28:	60e8      	str	r0, [r5, #12]
   d9b2a:	68db      	ldr	r3, [r3, #12]
   d9b2c:	2b00      	cmp	r3, #0
   d9b2e:	d1ec      	bne.n	d9b0a <_Balloc+0x20>
   d9b30:	2000      	movs	r0, #0
   d9b32:	bd70      	pop	{r4, r5, r6, pc}
   d9b34:	2101      	movs	r1, #1
   d9b36:	fa01 f506 	lsl.w	r5, r1, r6
   d9b3a:	1d6a      	adds	r2, r5, #5
   d9b3c:	0092      	lsls	r2, r2, #2
   d9b3e:	4620      	mov	r0, r4
   d9b40:	f000 fbc3 	bl	da2ca <_calloc_r>
   d9b44:	2800      	cmp	r0, #0
   d9b46:	d0f3      	beq.n	d9b30 <_Balloc+0x46>
   d9b48:	6046      	str	r6, [r0, #4]
   d9b4a:	6085      	str	r5, [r0, #8]
   d9b4c:	2300      	movs	r3, #0
   d9b4e:	6103      	str	r3, [r0, #16]
   d9b50:	60c3      	str	r3, [r0, #12]
   d9b52:	bd70      	pop	{r4, r5, r6, pc}

000d9b54 <_Bfree>:
   d9b54:	b570      	push	{r4, r5, r6, lr}
   d9b56:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d9b58:	4606      	mov	r6, r0
   d9b5a:	460d      	mov	r5, r1
   d9b5c:	b93c      	cbnz	r4, d9b6e <_Bfree+0x1a>
   d9b5e:	2010      	movs	r0, #16
   d9b60:	f7fc fcd2 	bl	d6508 <malloc>
   d9b64:	6270      	str	r0, [r6, #36]	; 0x24
   d9b66:	6044      	str	r4, [r0, #4]
   d9b68:	6084      	str	r4, [r0, #8]
   d9b6a:	6004      	str	r4, [r0, #0]
   d9b6c:	60c4      	str	r4, [r0, #12]
   d9b6e:	b13d      	cbz	r5, d9b80 <_Bfree+0x2c>
   d9b70:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d9b72:	686a      	ldr	r2, [r5, #4]
   d9b74:	68db      	ldr	r3, [r3, #12]
   d9b76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d9b7a:	6029      	str	r1, [r5, #0]
   d9b7c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d9b80:	bd70      	pop	{r4, r5, r6, pc}

000d9b82 <__multadd>:
   d9b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9b86:	690d      	ldr	r5, [r1, #16]
   d9b88:	461f      	mov	r7, r3
   d9b8a:	4606      	mov	r6, r0
   d9b8c:	460c      	mov	r4, r1
   d9b8e:	f101 0e14 	add.w	lr, r1, #20
   d9b92:	2300      	movs	r3, #0
   d9b94:	f8de 0000 	ldr.w	r0, [lr]
   d9b98:	b281      	uxth	r1, r0
   d9b9a:	fb02 7101 	mla	r1, r2, r1, r7
   d9b9e:	0c0f      	lsrs	r7, r1, #16
   d9ba0:	0c00      	lsrs	r0, r0, #16
   d9ba2:	fb02 7000 	mla	r0, r2, r0, r7
   d9ba6:	b289      	uxth	r1, r1
   d9ba8:	3301      	adds	r3, #1
   d9baa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d9bae:	429d      	cmp	r5, r3
   d9bb0:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d9bb4:	f84e 1b04 	str.w	r1, [lr], #4
   d9bb8:	dcec      	bgt.n	d9b94 <__multadd+0x12>
   d9bba:	b1d7      	cbz	r7, d9bf2 <__multadd+0x70>
   d9bbc:	68a3      	ldr	r3, [r4, #8]
   d9bbe:	429d      	cmp	r5, r3
   d9bc0:	db12      	blt.n	d9be8 <__multadd+0x66>
   d9bc2:	6861      	ldr	r1, [r4, #4]
   d9bc4:	4630      	mov	r0, r6
   d9bc6:	3101      	adds	r1, #1
   d9bc8:	f7ff ff8f 	bl	d9aea <_Balloc>
   d9bcc:	6922      	ldr	r2, [r4, #16]
   d9bce:	3202      	adds	r2, #2
   d9bd0:	f104 010c 	add.w	r1, r4, #12
   d9bd4:	4680      	mov	r8, r0
   d9bd6:	0092      	lsls	r2, r2, #2
   d9bd8:	300c      	adds	r0, #12
   d9bda:	f7fe fd3d 	bl	d8658 <memcpy>
   d9bde:	4621      	mov	r1, r4
   d9be0:	4630      	mov	r0, r6
   d9be2:	f7ff ffb7 	bl	d9b54 <_Bfree>
   d9be6:	4644      	mov	r4, r8
   d9be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d9bec:	3501      	adds	r5, #1
   d9bee:	615f      	str	r7, [r3, #20]
   d9bf0:	6125      	str	r5, [r4, #16]
   d9bf2:	4620      	mov	r0, r4
   d9bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9bf8 <__s2b>:
   d9bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9bfc:	460c      	mov	r4, r1
   d9bfe:	4615      	mov	r5, r2
   d9c00:	461f      	mov	r7, r3
   d9c02:	2209      	movs	r2, #9
   d9c04:	3308      	adds	r3, #8
   d9c06:	4606      	mov	r6, r0
   d9c08:	fb93 f3f2 	sdiv	r3, r3, r2
   d9c0c:	2100      	movs	r1, #0
   d9c0e:	2201      	movs	r2, #1
   d9c10:	429a      	cmp	r2, r3
   d9c12:	da02      	bge.n	d9c1a <__s2b+0x22>
   d9c14:	0052      	lsls	r2, r2, #1
   d9c16:	3101      	adds	r1, #1
   d9c18:	e7fa      	b.n	d9c10 <__s2b+0x18>
   d9c1a:	4630      	mov	r0, r6
   d9c1c:	f7ff ff65 	bl	d9aea <_Balloc>
   d9c20:	9b08      	ldr	r3, [sp, #32]
   d9c22:	6143      	str	r3, [r0, #20]
   d9c24:	2d09      	cmp	r5, #9
   d9c26:	f04f 0301 	mov.w	r3, #1
   d9c2a:	6103      	str	r3, [r0, #16]
   d9c2c:	dd11      	ble.n	d9c52 <__s2b+0x5a>
   d9c2e:	f104 0809 	add.w	r8, r4, #9
   d9c32:	46c1      	mov	r9, r8
   d9c34:	442c      	add	r4, r5
   d9c36:	f819 3b01 	ldrb.w	r3, [r9], #1
   d9c3a:	4601      	mov	r1, r0
   d9c3c:	3b30      	subs	r3, #48	; 0x30
   d9c3e:	220a      	movs	r2, #10
   d9c40:	4630      	mov	r0, r6
   d9c42:	f7ff ff9e 	bl	d9b82 <__multadd>
   d9c46:	45a1      	cmp	r9, r4
   d9c48:	d1f5      	bne.n	d9c36 <__s2b+0x3e>
   d9c4a:	eb08 0405 	add.w	r4, r8, r5
   d9c4e:	3c08      	subs	r4, #8
   d9c50:	e001      	b.n	d9c56 <__s2b+0x5e>
   d9c52:	340a      	adds	r4, #10
   d9c54:	2509      	movs	r5, #9
   d9c56:	1b2d      	subs	r5, r5, r4
   d9c58:	1963      	adds	r3, r4, r5
   d9c5a:	429f      	cmp	r7, r3
   d9c5c:	dd08      	ble.n	d9c70 <__s2b+0x78>
   d9c5e:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9c62:	4601      	mov	r1, r0
   d9c64:	3b30      	subs	r3, #48	; 0x30
   d9c66:	220a      	movs	r2, #10
   d9c68:	4630      	mov	r0, r6
   d9c6a:	f7ff ff8a 	bl	d9b82 <__multadd>
   d9c6e:	e7f3      	b.n	d9c58 <__s2b+0x60>
   d9c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9c74 <__hi0bits>:
   d9c74:	0c03      	lsrs	r3, r0, #16
   d9c76:	041b      	lsls	r3, r3, #16
   d9c78:	b913      	cbnz	r3, d9c80 <__hi0bits+0xc>
   d9c7a:	0400      	lsls	r0, r0, #16
   d9c7c:	2310      	movs	r3, #16
   d9c7e:	e000      	b.n	d9c82 <__hi0bits+0xe>
   d9c80:	2300      	movs	r3, #0
   d9c82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d9c86:	bf04      	itt	eq
   d9c88:	0200      	lsleq	r0, r0, #8
   d9c8a:	3308      	addeq	r3, #8
   d9c8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d9c90:	bf04      	itt	eq
   d9c92:	0100      	lsleq	r0, r0, #4
   d9c94:	3304      	addeq	r3, #4
   d9c96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d9c9a:	bf04      	itt	eq
   d9c9c:	0080      	lsleq	r0, r0, #2
   d9c9e:	3302      	addeq	r3, #2
   d9ca0:	2800      	cmp	r0, #0
   d9ca2:	db03      	blt.n	d9cac <__hi0bits+0x38>
   d9ca4:	0042      	lsls	r2, r0, #1
   d9ca6:	d503      	bpl.n	d9cb0 <__hi0bits+0x3c>
   d9ca8:	1c58      	adds	r0, r3, #1
   d9caa:	4770      	bx	lr
   d9cac:	4618      	mov	r0, r3
   d9cae:	4770      	bx	lr
   d9cb0:	2020      	movs	r0, #32
   d9cb2:	4770      	bx	lr

000d9cb4 <__lo0bits>:
   d9cb4:	6803      	ldr	r3, [r0, #0]
   d9cb6:	f013 0207 	ands.w	r2, r3, #7
   d9cba:	d00b      	beq.n	d9cd4 <__lo0bits+0x20>
   d9cbc:	07d9      	lsls	r1, r3, #31
   d9cbe:	d422      	bmi.n	d9d06 <__lo0bits+0x52>
   d9cc0:	079a      	lsls	r2, r3, #30
   d9cc2:	bf4b      	itete	mi
   d9cc4:	085b      	lsrmi	r3, r3, #1
   d9cc6:	089b      	lsrpl	r3, r3, #2
   d9cc8:	6003      	strmi	r3, [r0, #0]
   d9cca:	6003      	strpl	r3, [r0, #0]
   d9ccc:	bf4c      	ite	mi
   d9cce:	2001      	movmi	r0, #1
   d9cd0:	2002      	movpl	r0, #2
   d9cd2:	4770      	bx	lr
   d9cd4:	b299      	uxth	r1, r3
   d9cd6:	b909      	cbnz	r1, d9cdc <__lo0bits+0x28>
   d9cd8:	0c1b      	lsrs	r3, r3, #16
   d9cda:	2210      	movs	r2, #16
   d9cdc:	f013 0fff 	tst.w	r3, #255	; 0xff
   d9ce0:	bf04      	itt	eq
   d9ce2:	0a1b      	lsreq	r3, r3, #8
   d9ce4:	3208      	addeq	r2, #8
   d9ce6:	0719      	lsls	r1, r3, #28
   d9ce8:	bf04      	itt	eq
   d9cea:	091b      	lsreq	r3, r3, #4
   d9cec:	3204      	addeq	r2, #4
   d9cee:	0799      	lsls	r1, r3, #30
   d9cf0:	bf04      	itt	eq
   d9cf2:	089b      	lsreq	r3, r3, #2
   d9cf4:	3202      	addeq	r2, #2
   d9cf6:	07d9      	lsls	r1, r3, #31
   d9cf8:	d402      	bmi.n	d9d00 <__lo0bits+0x4c>
   d9cfa:	085b      	lsrs	r3, r3, #1
   d9cfc:	d005      	beq.n	d9d0a <__lo0bits+0x56>
   d9cfe:	3201      	adds	r2, #1
   d9d00:	6003      	str	r3, [r0, #0]
   d9d02:	4610      	mov	r0, r2
   d9d04:	4770      	bx	lr
   d9d06:	2000      	movs	r0, #0
   d9d08:	4770      	bx	lr
   d9d0a:	2020      	movs	r0, #32
   d9d0c:	4770      	bx	lr

000d9d0e <__i2b>:
   d9d0e:	b510      	push	{r4, lr}
   d9d10:	460c      	mov	r4, r1
   d9d12:	2101      	movs	r1, #1
   d9d14:	f7ff fee9 	bl	d9aea <_Balloc>
   d9d18:	2201      	movs	r2, #1
   d9d1a:	6144      	str	r4, [r0, #20]
   d9d1c:	6102      	str	r2, [r0, #16]
   d9d1e:	bd10      	pop	{r4, pc}

000d9d20 <__multiply>:
   d9d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9d24:	4614      	mov	r4, r2
   d9d26:	690a      	ldr	r2, [r1, #16]
   d9d28:	6923      	ldr	r3, [r4, #16]
   d9d2a:	429a      	cmp	r2, r3
   d9d2c:	bfb8      	it	lt
   d9d2e:	460b      	movlt	r3, r1
   d9d30:	4688      	mov	r8, r1
   d9d32:	bfbc      	itt	lt
   d9d34:	46a0      	movlt	r8, r4
   d9d36:	461c      	movlt	r4, r3
   d9d38:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d9d3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9d40:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9d44:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d9d48:	eb07 0609 	add.w	r6, r7, r9
   d9d4c:	429e      	cmp	r6, r3
   d9d4e:	bfc8      	it	gt
   d9d50:	3101      	addgt	r1, #1
   d9d52:	f7ff feca 	bl	d9aea <_Balloc>
   d9d56:	f100 0514 	add.w	r5, r0, #20
   d9d5a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d9d5e:	462b      	mov	r3, r5
   d9d60:	2200      	movs	r2, #0
   d9d62:	4563      	cmp	r3, ip
   d9d64:	d202      	bcs.n	d9d6c <__multiply+0x4c>
   d9d66:	f843 2b04 	str.w	r2, [r3], #4
   d9d6a:	e7fa      	b.n	d9d62 <__multiply+0x42>
   d9d6c:	f104 0214 	add.w	r2, r4, #20
   d9d70:	f108 0114 	add.w	r1, r8, #20
   d9d74:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d9d78:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d9d7c:	9300      	str	r3, [sp, #0]
   d9d7e:	9b00      	ldr	r3, [sp, #0]
   d9d80:	9201      	str	r2, [sp, #4]
   d9d82:	4293      	cmp	r3, r2
   d9d84:	d957      	bls.n	d9e36 <__multiply+0x116>
   d9d86:	f8b2 b000 	ldrh.w	fp, [r2]
   d9d8a:	f1bb 0f00 	cmp.w	fp, #0
   d9d8e:	d023      	beq.n	d9dd8 <__multiply+0xb8>
   d9d90:	4689      	mov	r9, r1
   d9d92:	46ae      	mov	lr, r5
   d9d94:	f04f 0800 	mov.w	r8, #0
   d9d98:	f859 4b04 	ldr.w	r4, [r9], #4
   d9d9c:	f8be a000 	ldrh.w	sl, [lr]
   d9da0:	b2a3      	uxth	r3, r4
   d9da2:	fb0b a303 	mla	r3, fp, r3, sl
   d9da6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d9daa:	f8de 4000 	ldr.w	r4, [lr]
   d9dae:	4443      	add	r3, r8
   d9db0:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d9db4:	fb0b 840a 	mla	r4, fp, sl, r8
   d9db8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d9dbc:	46f2      	mov	sl, lr
   d9dbe:	b29b      	uxth	r3, r3
   d9dc0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d9dc4:	454f      	cmp	r7, r9
   d9dc6:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d9dca:	f84a 3b04 	str.w	r3, [sl], #4
   d9dce:	d901      	bls.n	d9dd4 <__multiply+0xb4>
   d9dd0:	46d6      	mov	lr, sl
   d9dd2:	e7e1      	b.n	d9d98 <__multiply+0x78>
   d9dd4:	f8ce 8004 	str.w	r8, [lr, #4]
   d9dd8:	9b01      	ldr	r3, [sp, #4]
   d9dda:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d9dde:	3204      	adds	r2, #4
   d9de0:	f1ba 0f00 	cmp.w	sl, #0
   d9de4:	d021      	beq.n	d9e2a <__multiply+0x10a>
   d9de6:	682b      	ldr	r3, [r5, #0]
   d9de8:	462c      	mov	r4, r5
   d9dea:	4689      	mov	r9, r1
   d9dec:	f04f 0800 	mov.w	r8, #0
   d9df0:	f8b9 e000 	ldrh.w	lr, [r9]
   d9df4:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d9df8:	fb0a be0e 	mla	lr, sl, lr, fp
   d9dfc:	44f0      	add	r8, lr
   d9dfe:	46a3      	mov	fp, r4
   d9e00:	b29b      	uxth	r3, r3
   d9e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d9e06:	f84b 3b04 	str.w	r3, [fp], #4
   d9e0a:	f859 3b04 	ldr.w	r3, [r9], #4
   d9e0e:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d9e12:	0c1b      	lsrs	r3, r3, #16
   d9e14:	fb0a e303 	mla	r3, sl, r3, lr
   d9e18:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d9e1c:	454f      	cmp	r7, r9
   d9e1e:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d9e22:	d901      	bls.n	d9e28 <__multiply+0x108>
   d9e24:	465c      	mov	r4, fp
   d9e26:	e7e3      	b.n	d9df0 <__multiply+0xd0>
   d9e28:	6063      	str	r3, [r4, #4]
   d9e2a:	3504      	adds	r5, #4
   d9e2c:	e7a7      	b.n	d9d7e <__multiply+0x5e>
   d9e2e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d9e32:	b913      	cbnz	r3, d9e3a <__multiply+0x11a>
   d9e34:	3e01      	subs	r6, #1
   d9e36:	2e00      	cmp	r6, #0
   d9e38:	dcf9      	bgt.n	d9e2e <__multiply+0x10e>
   d9e3a:	6106      	str	r6, [r0, #16]
   d9e3c:	b003      	add	sp, #12
   d9e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d9e44 <__pow5mult>:
   d9e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9e48:	4615      	mov	r5, r2
   d9e4a:	f012 0203 	ands.w	r2, r2, #3
   d9e4e:	4606      	mov	r6, r0
   d9e50:	460f      	mov	r7, r1
   d9e52:	d007      	beq.n	d9e64 <__pow5mult+0x20>
   d9e54:	3a01      	subs	r2, #1
   d9e56:	4c21      	ldr	r4, [pc, #132]	; (d9edc <__pow5mult+0x98>)
   d9e58:	2300      	movs	r3, #0
   d9e5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d9e5e:	f7ff fe90 	bl	d9b82 <__multadd>
   d9e62:	4607      	mov	r7, r0
   d9e64:	10ad      	asrs	r5, r5, #2
   d9e66:	d036      	beq.n	d9ed6 <__pow5mult+0x92>
   d9e68:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d9e6a:	b93c      	cbnz	r4, d9e7c <__pow5mult+0x38>
   d9e6c:	2010      	movs	r0, #16
   d9e6e:	f7fc fb4b 	bl	d6508 <malloc>
   d9e72:	6270      	str	r0, [r6, #36]	; 0x24
   d9e74:	6044      	str	r4, [r0, #4]
   d9e76:	6084      	str	r4, [r0, #8]
   d9e78:	6004      	str	r4, [r0, #0]
   d9e7a:	60c4      	str	r4, [r0, #12]
   d9e7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d9e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d9e84:	b94c      	cbnz	r4, d9e9a <__pow5mult+0x56>
   d9e86:	f240 2171 	movw	r1, #625	; 0x271
   d9e8a:	4630      	mov	r0, r6
   d9e8c:	f7ff ff3f 	bl	d9d0e <__i2b>
   d9e90:	2300      	movs	r3, #0
   d9e92:	f8c8 0008 	str.w	r0, [r8, #8]
   d9e96:	4604      	mov	r4, r0
   d9e98:	6003      	str	r3, [r0, #0]
   d9e9a:	f04f 0800 	mov.w	r8, #0
   d9e9e:	07eb      	lsls	r3, r5, #31
   d9ea0:	d50a      	bpl.n	d9eb8 <__pow5mult+0x74>
   d9ea2:	4639      	mov	r1, r7
   d9ea4:	4622      	mov	r2, r4
   d9ea6:	4630      	mov	r0, r6
   d9ea8:	f7ff ff3a 	bl	d9d20 <__multiply>
   d9eac:	4639      	mov	r1, r7
   d9eae:	4681      	mov	r9, r0
   d9eb0:	4630      	mov	r0, r6
   d9eb2:	f7ff fe4f 	bl	d9b54 <_Bfree>
   d9eb6:	464f      	mov	r7, r9
   d9eb8:	106d      	asrs	r5, r5, #1
   d9eba:	d00c      	beq.n	d9ed6 <__pow5mult+0x92>
   d9ebc:	6820      	ldr	r0, [r4, #0]
   d9ebe:	b108      	cbz	r0, d9ec4 <__pow5mult+0x80>
   d9ec0:	4604      	mov	r4, r0
   d9ec2:	e7ec      	b.n	d9e9e <__pow5mult+0x5a>
   d9ec4:	4622      	mov	r2, r4
   d9ec6:	4621      	mov	r1, r4
   d9ec8:	4630      	mov	r0, r6
   d9eca:	f7ff ff29 	bl	d9d20 <__multiply>
   d9ece:	6020      	str	r0, [r4, #0]
   d9ed0:	f8c0 8000 	str.w	r8, [r0]
   d9ed4:	e7f4      	b.n	d9ec0 <__pow5mult+0x7c>
   d9ed6:	4638      	mov	r0, r7
   d9ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9edc:	000db338 	.word	0x000db338

000d9ee0 <__lshift>:
   d9ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9ee4:	460c      	mov	r4, r1
   d9ee6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d9eea:	6926      	ldr	r6, [r4, #16]
   d9eec:	6849      	ldr	r1, [r1, #4]
   d9eee:	68a3      	ldr	r3, [r4, #8]
   d9ef0:	4456      	add	r6, sl
   d9ef2:	4607      	mov	r7, r0
   d9ef4:	4691      	mov	r9, r2
   d9ef6:	1c75      	adds	r5, r6, #1
   d9ef8:	42ab      	cmp	r3, r5
   d9efa:	da02      	bge.n	d9f02 <__lshift+0x22>
   d9efc:	3101      	adds	r1, #1
   d9efe:	005b      	lsls	r3, r3, #1
   d9f00:	e7fa      	b.n	d9ef8 <__lshift+0x18>
   d9f02:	4638      	mov	r0, r7
   d9f04:	f7ff fdf1 	bl	d9aea <_Balloc>
   d9f08:	2300      	movs	r3, #0
   d9f0a:	4680      	mov	r8, r0
   d9f0c:	f100 0114 	add.w	r1, r0, #20
   d9f10:	461a      	mov	r2, r3
   d9f12:	4553      	cmp	r3, sl
   d9f14:	da03      	bge.n	d9f1e <__lshift+0x3e>
   d9f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   d9f1a:	3301      	adds	r3, #1
   d9f1c:	e7f9      	b.n	d9f12 <__lshift+0x32>
   d9f1e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   d9f22:	6920      	ldr	r0, [r4, #16]
   d9f24:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   d9f28:	f019 091f 	ands.w	r9, r9, #31
   d9f2c:	f104 0114 	add.w	r1, r4, #20
   d9f30:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   d9f34:	d014      	beq.n	d9f60 <__lshift+0x80>
   d9f36:	f1c9 0c20 	rsb	ip, r9, #32
   d9f3a:	2200      	movs	r2, #0
   d9f3c:	6808      	ldr	r0, [r1, #0]
   d9f3e:	fa00 f009 	lsl.w	r0, r0, r9
   d9f42:	4302      	orrs	r2, r0
   d9f44:	469a      	mov	sl, r3
   d9f46:	f843 2b04 	str.w	r2, [r3], #4
   d9f4a:	f851 2b04 	ldr.w	r2, [r1], #4
   d9f4e:	458e      	cmp	lr, r1
   d9f50:	fa22 f20c 	lsr.w	r2, r2, ip
   d9f54:	d8f2      	bhi.n	d9f3c <__lshift+0x5c>
   d9f56:	f8ca 2004 	str.w	r2, [sl, #4]
   d9f5a:	b142      	cbz	r2, d9f6e <__lshift+0x8e>
   d9f5c:	1cb5      	adds	r5, r6, #2
   d9f5e:	e006      	b.n	d9f6e <__lshift+0x8e>
   d9f60:	3b04      	subs	r3, #4
   d9f62:	f851 2b04 	ldr.w	r2, [r1], #4
   d9f66:	f843 2f04 	str.w	r2, [r3, #4]!
   d9f6a:	458e      	cmp	lr, r1
   d9f6c:	d8f9      	bhi.n	d9f62 <__lshift+0x82>
   d9f6e:	3d01      	subs	r5, #1
   d9f70:	4638      	mov	r0, r7
   d9f72:	f8c8 5010 	str.w	r5, [r8, #16]
   d9f76:	4621      	mov	r1, r4
   d9f78:	f7ff fdec 	bl	d9b54 <_Bfree>
   d9f7c:	4640      	mov	r0, r8
   d9f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d9f82 <__mcmp>:
   d9f82:	6903      	ldr	r3, [r0, #16]
   d9f84:	690a      	ldr	r2, [r1, #16]
   d9f86:	1a9b      	subs	r3, r3, r2
   d9f88:	b510      	push	{r4, lr}
   d9f8a:	d111      	bne.n	d9fb0 <__mcmp+0x2e>
   d9f8c:	0092      	lsls	r2, r2, #2
   d9f8e:	3014      	adds	r0, #20
   d9f90:	3114      	adds	r1, #20
   d9f92:	1883      	adds	r3, r0, r2
   d9f94:	440a      	add	r2, r1
   d9f96:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   d9f9a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   d9f9e:	428c      	cmp	r4, r1
   d9fa0:	d002      	beq.n	d9fa8 <__mcmp+0x26>
   d9fa2:	d307      	bcc.n	d9fb4 <__mcmp+0x32>
   d9fa4:	2001      	movs	r0, #1
   d9fa6:	bd10      	pop	{r4, pc}
   d9fa8:	4298      	cmp	r0, r3
   d9faa:	d3f4      	bcc.n	d9f96 <__mcmp+0x14>
   d9fac:	2000      	movs	r0, #0
   d9fae:	bd10      	pop	{r4, pc}
   d9fb0:	4618      	mov	r0, r3
   d9fb2:	bd10      	pop	{r4, pc}
   d9fb4:	f04f 30ff 	mov.w	r0, #4294967295
   d9fb8:	bd10      	pop	{r4, pc}

000d9fba <__mdiff>:
   d9fba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9fbe:	460c      	mov	r4, r1
   d9fc0:	4607      	mov	r7, r0
   d9fc2:	4611      	mov	r1, r2
   d9fc4:	4620      	mov	r0, r4
   d9fc6:	4615      	mov	r5, r2
   d9fc8:	f7ff ffdb 	bl	d9f82 <__mcmp>
   d9fcc:	1e06      	subs	r6, r0, #0
   d9fce:	d108      	bne.n	d9fe2 <__mdiff+0x28>
   d9fd0:	4631      	mov	r1, r6
   d9fd2:	4638      	mov	r0, r7
   d9fd4:	f7ff fd89 	bl	d9aea <_Balloc>
   d9fd8:	2301      	movs	r3, #1
   d9fda:	6103      	str	r3, [r0, #16]
   d9fdc:	6146      	str	r6, [r0, #20]
   d9fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9fe2:	bfbc      	itt	lt
   d9fe4:	4623      	movlt	r3, r4
   d9fe6:	462c      	movlt	r4, r5
   d9fe8:	4638      	mov	r0, r7
   d9fea:	6861      	ldr	r1, [r4, #4]
   d9fec:	bfba      	itte	lt
   d9fee:	461d      	movlt	r5, r3
   d9ff0:	2601      	movlt	r6, #1
   d9ff2:	2600      	movge	r6, #0
   d9ff4:	f7ff fd79 	bl	d9aea <_Balloc>
   d9ff8:	692b      	ldr	r3, [r5, #16]
   d9ffa:	60c6      	str	r6, [r0, #12]
   d9ffc:	6926      	ldr	r6, [r4, #16]
   d9ffe:	f105 0914 	add.w	r9, r5, #20
   da002:	3414      	adds	r4, #20
   da004:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   da008:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   da00c:	f100 0514 	add.w	r5, r0, #20
   da010:	f04f 0c00 	mov.w	ip, #0
   da014:	f854 3b04 	ldr.w	r3, [r4], #4
   da018:	f859 2b04 	ldr.w	r2, [r9], #4
   da01c:	fa1c f183 	uxtah	r1, ip, r3
   da020:	fa1f fe82 	uxth.w	lr, r2
   da024:	0c12      	lsrs	r2, r2, #16
   da026:	ebce 0101 	rsb	r1, lr, r1
   da02a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   da02e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   da032:	b289      	uxth	r1, r1
   da034:	ea4f 4c23 	mov.w	ip, r3, asr #16
   da038:	45c8      	cmp	r8, r9
   da03a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   da03e:	46a6      	mov	lr, r4
   da040:	f845 3b04 	str.w	r3, [r5], #4
   da044:	d8e6      	bhi.n	da014 <__mdiff+0x5a>
   da046:	45be      	cmp	lr, r7
   da048:	d20e      	bcs.n	da068 <__mdiff+0xae>
   da04a:	f85e 1b04 	ldr.w	r1, [lr], #4
   da04e:	fa1c f281 	uxtah	r2, ip, r1
   da052:	1413      	asrs	r3, r2, #16
   da054:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   da058:	b292      	uxth	r2, r2
   da05a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   da05e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   da062:	f845 2b04 	str.w	r2, [r5], #4
   da066:	e7ee      	b.n	da046 <__mdiff+0x8c>
   da068:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   da06c:	b90b      	cbnz	r3, da072 <__mdiff+0xb8>
   da06e:	3e01      	subs	r6, #1
   da070:	e7fa      	b.n	da068 <__mdiff+0xae>
   da072:	6106      	str	r6, [r0, #16]
   da074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da078 <__ulp>:
   da078:	4b12      	ldr	r3, [pc, #72]	; (da0c4 <__ulp+0x4c>)
   da07a:	ee10 2a90 	vmov	r2, s1
   da07e:	401a      	ands	r2, r3
   da080:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   da084:	2b00      	cmp	r3, #0
   da086:	dd02      	ble.n	da08e <__ulp+0x16>
   da088:	2000      	movs	r0, #0
   da08a:	4619      	mov	r1, r3
   da08c:	e017      	b.n	da0be <__ulp+0x46>
   da08e:	425b      	negs	r3, r3
   da090:	151b      	asrs	r3, r3, #20
   da092:	2b13      	cmp	r3, #19
   da094:	f04f 0000 	mov.w	r0, #0
   da098:	f04f 0100 	mov.w	r1, #0
   da09c:	dc04      	bgt.n	da0a8 <__ulp+0x30>
   da09e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   da0a2:	fa42 f103 	asr.w	r1, r2, r3
   da0a6:	e00a      	b.n	da0be <__ulp+0x46>
   da0a8:	3b14      	subs	r3, #20
   da0aa:	2b1e      	cmp	r3, #30
   da0ac:	f04f 0201 	mov.w	r2, #1
   da0b0:	bfda      	itte	le
   da0b2:	f1c3 031f 	rsble	r3, r3, #31
   da0b6:	fa02 f303 	lslle.w	r3, r2, r3
   da0ba:	4613      	movgt	r3, r2
   da0bc:	4618      	mov	r0, r3
   da0be:	ec41 0b10 	vmov	d0, r0, r1
   da0c2:	4770      	bx	lr
   da0c4:	7ff00000 	.word	0x7ff00000

000da0c8 <__b2d>:
   da0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da0ca:	6905      	ldr	r5, [r0, #16]
   da0cc:	f100 0614 	add.w	r6, r0, #20
   da0d0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   da0d4:	1f2f      	subs	r7, r5, #4
   da0d6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   da0da:	4620      	mov	r0, r4
   da0dc:	f7ff fdca 	bl	d9c74 <__hi0bits>
   da0e0:	f1c0 0320 	rsb	r3, r0, #32
   da0e4:	280a      	cmp	r0, #10
   da0e6:	600b      	str	r3, [r1, #0]
   da0e8:	dc14      	bgt.n	da114 <__b2d+0x4c>
   da0ea:	f1c0 0e0b 	rsb	lr, r0, #11
   da0ee:	fa24 f10e 	lsr.w	r1, r4, lr
   da0f2:	42be      	cmp	r6, r7
   da0f4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   da0f8:	bf34      	ite	cc
   da0fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da0fe:	2100      	movcs	r1, #0
   da100:	3015      	adds	r0, #21
   da102:	fa04 f000 	lsl.w	r0, r4, r0
   da106:	fa21 f10e 	lsr.w	r1, r1, lr
   da10a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da10e:	ea40 0201 	orr.w	r2, r0, r1
   da112:	e023      	b.n	da15c <__b2d+0x94>
   da114:	42be      	cmp	r6, r7
   da116:	bf3a      	itte	cc
   da118:	f1a5 0708 	subcc.w	r7, r5, #8
   da11c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da120:	2100      	movcs	r1, #0
   da122:	380b      	subs	r0, #11
   da124:	d015      	beq.n	da152 <__b2d+0x8a>
   da126:	4084      	lsls	r4, r0
   da128:	f1c0 0520 	rsb	r5, r0, #32
   da12c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   da130:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   da134:	42b7      	cmp	r7, r6
   da136:	fa21 fe05 	lsr.w	lr, r1, r5
   da13a:	ea44 030e 	orr.w	r3, r4, lr
   da13e:	bf8c      	ite	hi
   da140:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   da144:	2400      	movls	r4, #0
   da146:	fa01 f000 	lsl.w	r0, r1, r0
   da14a:	40ec      	lsrs	r4, r5
   da14c:	ea40 0204 	orr.w	r2, r0, r4
   da150:	e004      	b.n	da15c <__b2d+0x94>
   da152:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   da156:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da15a:	460a      	mov	r2, r1
   da15c:	ec43 2b10 	vmov	d0, r2, r3
   da160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da162 <__d2b>:
   da162:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da166:	460e      	mov	r6, r1
   da168:	2101      	movs	r1, #1
   da16a:	ec59 8b10 	vmov	r8, r9, d0
   da16e:	4615      	mov	r5, r2
   da170:	f7ff fcbb 	bl	d9aea <_Balloc>
   da174:	f3c9 540a 	ubfx	r4, r9, #20, #11
   da178:	4607      	mov	r7, r0
   da17a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   da17e:	b10c      	cbz	r4, da184 <__d2b+0x22>
   da180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da184:	9301      	str	r3, [sp, #4]
   da186:	f1b8 0f00 	cmp.w	r8, #0
   da18a:	d019      	beq.n	da1c0 <__d2b+0x5e>
   da18c:	a802      	add	r0, sp, #8
   da18e:	f840 8d08 	str.w	r8, [r0, #-8]!
   da192:	f7ff fd8f 	bl	d9cb4 <__lo0bits>
   da196:	9b00      	ldr	r3, [sp, #0]
   da198:	b148      	cbz	r0, da1ae <__d2b+0x4c>
   da19a:	9a01      	ldr	r2, [sp, #4]
   da19c:	f1c0 0120 	rsb	r1, r0, #32
   da1a0:	fa02 f101 	lsl.w	r1, r2, r1
   da1a4:	430b      	orrs	r3, r1
   da1a6:	40c2      	lsrs	r2, r0
   da1a8:	617b      	str	r3, [r7, #20]
   da1aa:	9201      	str	r2, [sp, #4]
   da1ac:	e000      	b.n	da1b0 <__d2b+0x4e>
   da1ae:	617b      	str	r3, [r7, #20]
   da1b0:	9b01      	ldr	r3, [sp, #4]
   da1b2:	61bb      	str	r3, [r7, #24]
   da1b4:	2b00      	cmp	r3, #0
   da1b6:	bf14      	ite	ne
   da1b8:	2102      	movne	r1, #2
   da1ba:	2101      	moveq	r1, #1
   da1bc:	6139      	str	r1, [r7, #16]
   da1be:	e007      	b.n	da1d0 <__d2b+0x6e>
   da1c0:	a801      	add	r0, sp, #4
   da1c2:	f7ff fd77 	bl	d9cb4 <__lo0bits>
   da1c6:	9b01      	ldr	r3, [sp, #4]
   da1c8:	617b      	str	r3, [r7, #20]
   da1ca:	2101      	movs	r1, #1
   da1cc:	6139      	str	r1, [r7, #16]
   da1ce:	3020      	adds	r0, #32
   da1d0:	b134      	cbz	r4, da1e0 <__d2b+0x7e>
   da1d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   da1d6:	4404      	add	r4, r0
   da1d8:	6034      	str	r4, [r6, #0]
   da1da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   da1de:	e009      	b.n	da1f4 <__d2b+0x92>
   da1e0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   da1e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   da1e8:	6030      	str	r0, [r6, #0]
   da1ea:	6918      	ldr	r0, [r3, #16]
   da1ec:	f7ff fd42 	bl	d9c74 <__hi0bits>
   da1f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   da1f4:	6028      	str	r0, [r5, #0]
   da1f6:	4638      	mov	r0, r7
   da1f8:	b003      	add	sp, #12
   da1fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da1fe <__ratio>:
   da1fe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da202:	4688      	mov	r8, r1
   da204:	4669      	mov	r1, sp
   da206:	4681      	mov	r9, r0
   da208:	f7ff ff5e 	bl	da0c8 <__b2d>
   da20c:	a901      	add	r1, sp, #4
   da20e:	4640      	mov	r0, r8
   da210:	ec55 4b10 	vmov	r4, r5, d0
   da214:	f7ff ff58 	bl	da0c8 <__b2d>
   da218:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da21c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da220:	1a9a      	subs	r2, r3, r2
   da222:	e89d 000a 	ldmia.w	sp, {r1, r3}
   da226:	1ac9      	subs	r1, r1, r3
   da228:	ec57 6b10 	vmov	r6, r7, d0
   da22c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   da230:	2b00      	cmp	r3, #0
   da232:	bfcc      	ite	gt
   da234:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   da238:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   da23c:	4632      	mov	r2, r6
   da23e:	463b      	mov	r3, r7
   da240:	4620      	mov	r0, r4
   da242:	4629      	mov	r1, r5
   da244:	f7fd ffcc 	bl	d81e0 <__aeabi_ddiv>
   da248:	ec41 0b10 	vmov	d0, r0, r1
   da24c:	b003      	add	sp, #12
   da24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da252 <__copybits>:
   da252:	3901      	subs	r1, #1
   da254:	b510      	push	{r4, lr}
   da256:	1149      	asrs	r1, r1, #5
   da258:	6914      	ldr	r4, [r2, #16]
   da25a:	3101      	adds	r1, #1
   da25c:	f102 0314 	add.w	r3, r2, #20
   da260:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   da264:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da268:	42a3      	cmp	r3, r4
   da26a:	4602      	mov	r2, r0
   da26c:	d204      	bcs.n	da278 <__copybits+0x26>
   da26e:	f853 2b04 	ldr.w	r2, [r3], #4
   da272:	f840 2b04 	str.w	r2, [r0], #4
   da276:	e7f7      	b.n	da268 <__copybits+0x16>
   da278:	2300      	movs	r3, #0
   da27a:	428a      	cmp	r2, r1
   da27c:	d202      	bcs.n	da284 <__copybits+0x32>
   da27e:	f842 3b04 	str.w	r3, [r2], #4
   da282:	e7fa      	b.n	da27a <__copybits+0x28>
   da284:	bd10      	pop	{r4, pc}

000da286 <__any_on>:
   da286:	f100 0214 	add.w	r2, r0, #20
   da28a:	6900      	ldr	r0, [r0, #16]
   da28c:	114b      	asrs	r3, r1, #5
   da28e:	4298      	cmp	r0, r3
   da290:	b510      	push	{r4, lr}
   da292:	db0c      	blt.n	da2ae <__any_on+0x28>
   da294:	dd0c      	ble.n	da2b0 <__any_on+0x2a>
   da296:	f011 011f 	ands.w	r1, r1, #31
   da29a:	d009      	beq.n	da2b0 <__any_on+0x2a>
   da29c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   da2a0:	fa24 f001 	lsr.w	r0, r4, r1
   da2a4:	fa00 f101 	lsl.w	r1, r0, r1
   da2a8:	428c      	cmp	r4, r1
   da2aa:	d10c      	bne.n	da2c6 <__any_on+0x40>
   da2ac:	e000      	b.n	da2b0 <__any_on+0x2a>
   da2ae:	4603      	mov	r3, r0
   da2b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da2b4:	4293      	cmp	r3, r2
   da2b6:	d904      	bls.n	da2c2 <__any_on+0x3c>
   da2b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   da2bc:	2900      	cmp	r1, #0
   da2be:	d0f9      	beq.n	da2b4 <__any_on+0x2e>
   da2c0:	e001      	b.n	da2c6 <__any_on+0x40>
   da2c2:	2000      	movs	r0, #0
   da2c4:	bd10      	pop	{r4, pc}
   da2c6:	2001      	movs	r0, #1
   da2c8:	bd10      	pop	{r4, pc}

000da2ca <_calloc_r>:
   da2ca:	b538      	push	{r3, r4, r5, lr}
   da2cc:	fb02 f401 	mul.w	r4, r2, r1
   da2d0:	4621      	mov	r1, r4
   da2d2:	f7fc f931 	bl	d6538 <_malloc_r>
   da2d6:	4605      	mov	r5, r0
   da2d8:	b118      	cbz	r0, da2e2 <_calloc_r+0x18>
   da2da:	4622      	mov	r2, r4
   da2dc:	2100      	movs	r1, #0
   da2de:	f7fe f9c6 	bl	d866e <memset>
   da2e2:	4628      	mov	r0, r5
   da2e4:	bd38      	pop	{r3, r4, r5, pc}

000da2e6 <link_code_end>:
	...

000da2e8 <dynalib_user>:
   da2e8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   da2f8:	0000 0000                                   ....

000da2fc <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   da2fc:	6c62 6b6e 6e69 0066 6576 0072 2e30 2e35     blnkinf.ver.0.5.
   da30c:	0034 2d68 6562 7461 3100 0030 7562 6666     4.h-beat.10.buff
   da31c:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   da32c:	6974 6c63 0065 7562 6c69 0064 754a 206c     ticle.build.Jul 
   da33c:	3420 3220 3130 2039 3930 343a 3a37 3335      4 2019 09:47:53
   da34c:	0000 2500 0069 6c25 0069 6e69 6f00 7475     ...%i.%li.in.out
   da35c:	7000 6d77 6400 0077 7761 7600 0077 3225     .pwm.dw.aw.vw.%2
   da36c:	332e 0066 6f59 7275 6c20 6769 7468 6e69     .3f.Your lightin
   da37c:	2067 6874 6572 6873 6c6f 2064 6168 2073     g threshold has 
   da38c:	6562 6e65 6520 6378 6565 6564 0064 6562     been exceeded.be
   da39c:	3732 3631 3961 6530 6337 3934 6364 3038     2716a90e7c49dc80
   da3ac:	3336 6266 6337 3630 3631 3035 6130 0000     63fb7c0616500a..

000da3bc <_ZTV12Adafruit_GFX>:
	...
   da3cc:	5449 000d 6709 000d 40a9 000d 4f57 000d     IT...g...@..WO..
   da3dc:	4f0d 000d 4f3f 000d 4f1b 000d 4f2d 000d     .O..?O...O..-O..
   da3ec:	4e4d 000d 4f57 000d 5137 000d 5135 000d     MN..WO..7Q..5Q..
   da3fc:	4f59 000d 4f97 000d 4fd1 000d 5017 000d     YO...O...O...P..
   da40c:	5033 000d 50b5 000d                         3P...P..

000da414 <_ZL4font>:
   da414:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   da424:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   da434:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   da444:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   da454:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   da464:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   da474:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   da484:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   da494:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   da4a4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   da4b4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   da4c4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   da4d4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   da4e4:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   da4f4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   da504:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   da514:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   da524:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   da534:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   da544:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   da554:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   da564:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   da574:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   da584:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   da594:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   da5a4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   da5b4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   da5c4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   da5d4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   da5e4:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   da5f4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   da604:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   da614:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   da624:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   da634:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   da644:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   da654:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   da664:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   da674:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   da684:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   da694:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   da6a4:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   da6b4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   da6c4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   da6d4:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   da6e4:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   da6f4:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   da704:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   da714:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   da724:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   da734:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   da744:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   da754:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   da764:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   da774:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   da784:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   da794:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   da7a4:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   da7b4:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   da7c4:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   da7d4:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   da7e4:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   da7f4:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   da804:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   da814:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   da824:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   da834:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   da844:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   da854:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   da864:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   da874:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   da884:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   da894:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   da8a4:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   da8b4:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   da8c4:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   da8d4:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   da8e4:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   da8f4:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   da904:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000da914 <_ZTV16Adafruit_SSD1306>:
	...
   da91c:	40cd 000d 4dbd 000d 5449 000d 6709 000d     .@...M..IT...g..
   da92c:	5939 000d 4f57 000d 4f0d 000d 4f3f 000d     9Y..WO...O..?O..
   da93c:	4f1b 000d 4f2d 000d 4e4d 000d 4f57 000d     .O..-O..MN..WO..
   da94c:	5137 000d 5135 000d 5749 000d 5559 000d     7Q..5Q..IW..YU..
   da95c:	4fd1 000d 5017 000d 5033 000d 50b5 000d     .O...P..3P...P..

000da96c <_ZL23BlynkWriteHandlerVector>:
   da96c:	41f1 000d 5fef 000d 4219 000d 422d 000d     .A..._...B..-B..
   da97c:	4241 000d 5fef 000d 5fef 000d 5fef 000d     AB..._..._..._..
   da98c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   da99c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   da9ac:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   da9bc:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   da9cc:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   da9dc:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   da9ec:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   da9fc:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daa0c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daa1c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daa2c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daa3c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daa4c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daa5c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daa6c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daa7c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daa8c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daa9c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daaac:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daabc:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daacc:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daadc:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daaec:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   daafc:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   dab0c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   dab1c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   dab2c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   dab3c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   dab4c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..
   dab5c:	5fef 000d 5fef 000d 5fef 000d 5fef 000d     ._..._..._..._..

000dab6c <_ZL22BlynkReadHandlerVector>:
   dab6c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dab7c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dab8c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dab9c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dabac:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dabbc:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dabcc:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dabdc:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dabec:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dabfc:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dac0c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dac1c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dac2c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dac3c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dac4c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dac5c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dac6c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dac7c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dac8c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dac9c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dacac:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dacbc:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   daccc:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dacdc:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dacec:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dacfc:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dad0c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dad1c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dad2c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dad3c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dad4c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..
   dad5c:	5fed 000d 5fed 000d 5fed 000d 5fed 000d     ._..._..._..._..

000dad6c <_ZTVN5spark13EthernetClassE>:
	...
   dad74:	65b7 000d 65ad 000d 65a3 000d 6599 000d     .e...e...e...e..
   dad84:	658d 000d 6581 000d 6575 000d 656d 000d     .e...e..ue..me..
   dad94:	6563 000d 6559 000d 76dd 000d               ce..Ye...v..

000dada0 <_ZTV8SPIClass>:
	...
   dada8:	65d5 000d 65d7 000d                         .e...e..

000dadb0 <_ZL14clock_divisors>:
   dadb0:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   dadc0:	002e 6e69 0066 6e6c 6600 006e 6f63 6564     ..inf.ln.fn.code
   dadd0:	6400 7465 6961 006c 0a0d 2500 3130 7530     .detail....%010u
   dade0:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
   dadf0:	6f63 6564 3d20 0020 6564 6174 6c69 2073     code = .details 
   dae00:	203d 6200 7561 0064 6553 6972 6c61 5300     = .baud.Serial.S
   dae10:	7265 6169 316c 7400 7079 0065 6170 6172     erial1.type.para
   dae20:	006d 6d63 0064 6469 6800 646e 7300 7274     m.cmd.id.hnd.str
   dae30:	006d 6966 746c 6c00 6c76 6100 6464 6148     m.filt.lvl.addHa
   dae40:	646e 656c 0072 6572 6f6d 6576 6148 646e     ndler.removeHand
   dae50:	656c 0072 6e65 6d75 6148 646e 656c 7372     ler.enumHandlers
   dae60:	4a00 4f53 534e 7274 6165 4c6d 676f 6148     .JSONStreamLogHa
   dae70:	646e 656c 0072 7061 0070 6f6e 656e 7400     ndler.app.none.t
   dae80:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
   dae90:	7272 726f 7000 6e61 6369 6100 6c6c 5a00     rror.panic.all.Z
   daea0:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
   daeb0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   daec0:	7361 7463 6d69 0065                         asctime.

000daec8 <_ZTV9IPAddress>:
	...
   daed0:	6b2d 000d 6b1d 000d 6b1f 000d               -k...k...k..

000daedc <_ZTV9USBSerial>:
	...
   daee4:	6c4b 000d 6c9b 000d 6ca9 000d 6709 000d     Kl...l...l...g..
   daef4:	6c87 000d 6c4d 000d 6c63 000d 6c95 000d     .l..Ml..cl...l..
   daf04:	6c79 000d 6c47 000d                         yl..Gl..

000daf0c <_ZTV11USARTSerial>:
	...
   daf14:	6d59 000d 6da9 000d 6db7 000d 6709 000d     Ym...m...m...g..
   daf24:	6d6d 000d 6d8f 000d 6d7b 000d 6da3 000d     mm...m..{m...m..
   daf34:	6d5b 000d 6d5f 000d                         [m.._m..

000daf3c <_ZTV7TwoWire>:
	...
   daf44:	6e5d 000d 6ea7 000d 6e7f 000d 6e5f 000d     ]n...n...n.._n..
   daf54:	6e87 000d 6e8f 000d 6e97 000d 6e9f 000d     .n...n...n...n..

000daf64 <_ZTVN5spark9MeshClassE>:
	...
   daf6c:	6f67 000d 6f5d 000d 6f53 000d 6f49 000d     go..]o..So..Io..
   daf7c:	6f3d 000d 6f31 000d 6f25 000d 6f1d 000d     =o..1o..%o...o..
   daf8c:	6f13 000d 6f09 000d 76dd 000d               .o...o...v..

000daf98 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dafa0:	70f1 000d 70f7 000d 75df 000d 7105 000d     .p...p...u...q..
   dafb0:	70f3 000d                                   .p..

000dafb4 <_ZTV9TCPClient>:
	...
   dafbc:	40e9 000d 4129 000d 7069 000d 7083 000d     .@..)A..ip...p..
   dafcc:	7485 000d 72c7 000d 7299 000d 70ad 000d     .t...r...r...p..
   dafdc:	735d 000d 7109 000d 72fb 000d 7457 000d     ]s...q...r..Wt..
   dafec:	70af 000d 70e7 000d 7095 000d 71f9 000d     .p...p...p...q..
   daffc:	7279 000d 6977 6972 676e 7200 6365 2076     yr..wiring.recv 
   db00c:	7265 6f72 2072 203d 6425 0000               error = %d..

000db018 <_ZTVN5spark9WiFiClassE>:
	...
   db020:	7655 000d 764b 000d 7641 000d 75f7 000d     Uv..Kv..Av...u..
   db030:	7635 000d 7629 000d 761d 000d 7615 000d     5v..)v...v...v..
   db040:	760b 000d 7601 000d 76dd 000d               .v...v...v..

000db04c <_ZTVN5spark12NetworkClassE>:
	...
   db054:	7675 000d 767f 000d 7689 000d 7693 000d     uv...v...v...v..
   db064:	769d 000d 76a9 000d 76b5 000d 76c1 000d     .v...v...v...v..
   db074:	76c9 000d 76d3 000d 76dd 000d               .v...v...v..

000db080 <_ctype_>:
   db080:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db090:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db0a0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db0b0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db0c0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db0d0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db0e0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db0f0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db100:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000db184 <__sf_fake_stdin>:
	...

000db1a4 <__sf_fake_stdout>:
	...

000db1c4 <__sf_fake_stderr>:
	...
   db1e4:	0043 4f50 4953 0058                         C.POSIX.

000db1ec <fpi.5344>:
   db1ec:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   db1fc:	0000 0000                                   ....

000db200 <fpinan.5380>:
   db200:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   db210:	0000 0000 6e69 7469 0079 0000 0000 0000     ....inity.......

000db220 <tinytens>:
   db220:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db230:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db240:	6f43 64ac 0628 1168                         Co.d(.h.

000db248 <__mprec_tens>:
   db248:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db258:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db268:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db278:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db288:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db298:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db2a8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db2b8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db2c8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db2d8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db2e8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db2f8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db308:	9db4 79d9 7843 44ea                         ...yCx.D

000db310 <__mprec_bigtens>:
   db310:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db320:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db330:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db338 <p05.5387>:
   db338:	0005 0000 0019 0000 007d 0000               ........}...

000db344 <link_const_variable_data_end>:
   db344:	000d4dcd 	.word	0x000d4dcd
   db348:	000d5555 	.word	0x000d5555
   db34c:	000d5e4b 	.word	0x000d5e4b
   db350:	000d5fdd 	.word	0x000d5fdd
   db354:	000d5fe9 	.word	0x000d5fe9
   db358:	000d601d 	.word	0x000d601d
   db35c:	000d65c1 	.word	0x000d65c1
   db360:	000d66e1 	.word	0x000d66e1
   db364:	000d66f9 	.word	0x000d66f9
   db368:	000d69e5 	.word	0x000d69e5
   db36c:	000d69f5 	.word	0x000d69f5
   db370:	000d6a2d 	.word	0x000d6a2d
   db374:	000d701d 	.word	0x000d701d
   db378:	000d7661 	.word	0x000d7661
   db37c:	000d77a9 	.word	0x000d77a9
   db380:	000d78f9 	.word	0x000d78f9
   db384:	000d798d 	.word	0x000d798d
   db388:	000d7a11 	.word	0x000d7a11
   db38c:	000d7ad5 	.word	0x000d7ad5
   db390:	000d7b99 	.word	0x000d7b99

000db394 <link_constructors_end>:
	...
