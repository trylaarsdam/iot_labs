
c:/Users/Nerdom/Desktop/lab6/target/lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00017aa4  2**0
                  CONTENTS
  3 .data         00000078  2003e314  000d7a00  0000e314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000464  2003e38c  2003e38c  0001e38c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d7a78  000d7a78  00017a78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d7aa0  000d7aa0  00017aa0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000d13eb  00000000  00000000  00017aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00010ab4  00000000  00000000  000e8e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001d48a  00000000  00000000  000f9943  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002310  00000000  00000000  00116dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003f20  00000000  00000000  001190dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000378f8  00000000  00000000  0011cffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00028f95  00000000  00000000  001548f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00105a12  00000000  00000000  0017d88a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c720  00000000  00000000  0028329c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	f8 70 0d 00                                         .p..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f81f 	bl	d7070 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f824 	bl	d7086 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e314 	.word	0x2003e314
   d4048:	000d7a00 	.word	0x000d7a00
   d404c:	2003e38c 	.word	0x2003e38c
   d4050:	2003e38c 	.word	0x2003e38c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fd85 	bl	d5b68 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7a00 	.word	0x000d7a00
   d4080:	000d79bc 	.word	0x000d79bc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b822 	b.w	d40cc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f835 	bl	d40f8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bd37 	b.w	d5b04 <_post_loop>

000d4096 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d4096:	f001 bab9 	b.w	d560c <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 babf 	b.w	d561c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 babd 	b.w	d561c <free>
	...

000d40a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 fa2a 	bl	d5504 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d52f5 	.word	0x000d52f5

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c8:	4770      	bx	lr
	...

000d40cc <setup>:
#include "Adafruit_SSD1306_RK.h"
SYSTEM_MODE(MANUAL);
Adafruit_SSD1306 myDisplay(128,64);
void setup(){
   d40cc:	b510      	push	{r4, lr}
    pinMode(A2, INPUT);
   d40ce:	2100      	movs	r1, #0
   d40d0:	2011      	movs	r0, #17
   d40d2:	f002 f8eb 	bl	d62ac <pinMode>
    Serial.begin(9600);
   d40d6:	f001 fe35 	bl	d5d44 <_Z16_fetch_usbserialv>
   d40da:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40de:	f001 fe25 	bl	d5d2c <_ZN9USBSerial5beginEl>
    myDisplay.begin(SSD1306_SWITCHCAPVCC);   
   d40e2:	2301      	movs	r3, #1
   d40e4:	223c      	movs	r2, #60	; 0x3c
   d40e6:	2102      	movs	r1, #2
   d40e8:	4802      	ldr	r0, [pc, #8]	; (d40f4 <setup+0x28>)
}
   d40ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(MANUAL);
Adafruit_SSD1306 myDisplay(128,64);
void setup(){
    pinMode(A2, INPUT);
    Serial.begin(9600);
    myDisplay.begin(SSD1306_SWITCHCAPVCC);   
   d40ee:	f000 beff 	b.w	d4ef0 <_ZN16Adafruit_SSD13065beginEhhb>
   d40f2:	bf00      	nop
   d40f4:	2003e390 	.word	0x2003e390

000d40f8 <loop>:
}
void loop(){
   d40f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    myDisplay.setTextSize(3);
   d40fa:	4c29      	ldr	r4, [pc, #164]	; (d41a0 <loop+0xa8>)
void setup(){
    pinMode(A2, INPUT);
    Serial.begin(9600);
    myDisplay.begin(SSD1306_SWITCHCAPVCC);   
}
void loop(){
   d40fc:	ed2d 8b02 	vpush	{d8}
    myDisplay.setTextSize(3);
   d4100:	4620      	mov	r0, r4
   d4102:	2103      	movs	r1, #3
   d4104:	f000 fbf6 	bl	d48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    myDisplay.setTextColor(WHITE);
   d4108:	4620      	mov	r0, r4
   d410a:	2101      	movs	r1, #1
   d410c:	f000 fbf7 	bl	d48fe <_ZN12Adafruit_GFX12setTextColorEt>
    myDisplay.setCursor(5,5);
   d4110:	2205      	movs	r2, #5
   d4112:	4611      	mov	r1, r2
   d4114:	4620      	mov	r0, r4
   d4116:	f000 fbea 	bl	d48ee <_ZN12Adafruit_GFX9setCursorEss>
    myDisplay.display();
   d411a:	4620      	mov	r0, r4
   d411c:	f000 ffec 	bl	d50f8 <_ZN16Adafruit_SSD13067displayEv>
    float currentTemp = 0;
    currentTemp = analogRead(A2);
   d4120:	2011      	movs	r0, #17
   d4122:	f002 f8ed 	bl	d6300 <analogRead>
   d4126:	ee08 0a10 	vmov	s16, r0
    Serial.println(currentTemp);
   d412a:	f001 fe0b 	bl	d5d44 <_Z16_fetch_usbserialv>
   d412e:	eef8 7ac8 	vcvt.f32.s32	s15, s16
   d4132:	4605      	mov	r5, r0
   d4134:	ee17 0a90 	vmov	r0, s15
   d4138:	f002 fbf0 	bl	d691c <__aeabi_f2d>
   d413c:	4606      	mov	r6, r0
   d413e:	460f      	mov	r7, r1
   d4140:	ec47 6b10 	vmov	d0, r6, r7
   d4144:	2102      	movs	r1, #2
   d4146:	4628      	mov	r0, r5
   d4148:	f001 fc80 	bl	d5a4c <_ZN5Print7printlnEdi>
    myDisplay.clearDisplay();
   d414c:	4620      	mov	r0, r4
   d414e:	f000 fe5f 	bl	d4e10 <_ZN16Adafruit_SSD130612clearDisplayEv>
    float convertedTemp = (currentTemp * (3300.0/4095));
    convertedTemp = ((convertedTemp - 50)/10);
   d4152:	a311      	add	r3, pc, #68	; (adr r3, d4198 <loop+0xa0>)
   d4154:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4158:	4630      	mov	r0, r6
   d415a:	4639      	mov	r1, r7
   d415c:	f002 fc32 	bl	d69c4 <__aeabi_dmul>
   d4160:	f002 ff28 	bl	d6fb4 <__aeabi_d2f>
   d4164:	eddf 7a0f 	vldr	s15, [pc, #60]	; d41a4 <loop+0xac>
   d4168:	ee07 0a10 	vmov	s14, r0
   d416c:	ee77 7a67 	vsub.f32	s15, s14, s15
    myDisplay.println(convertedTemp);
   d4170:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d4174:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d4178:	ee16 0a90 	vmov	r0, s13
   d417c:	f002 fbce 	bl	d691c <__aeabi_f2d>
}
   d4180:	ecbd 8b02 	vpop	{d8}
    currentTemp = analogRead(A2);
    Serial.println(currentTemp);
    myDisplay.clearDisplay();
    float convertedTemp = (currentTemp * (3300.0/4095));
    convertedTemp = ((convertedTemp - 50)/10);
    myDisplay.println(convertedTemp);
   d4184:	ec41 0b10 	vmov	d0, r0, r1
   d4188:	4620      	mov	r0, r4
   d418a:	2102      	movs	r1, #2
}
   d418c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    currentTemp = analogRead(A2);
    Serial.println(currentTemp);
    myDisplay.clearDisplay();
    float convertedTemp = (currentTemp * (3300.0/4095));
    convertedTemp = ((convertedTemp - 50)/10);
    myDisplay.println(convertedTemp);
   d4190:	f001 bc5c 	b.w	d5a4c <_ZN5Print7printlnEdi>
   d4194:	f3af 8000 	nop.w
   d4198:	99c99c9a 	.word	0x99c99c9a
   d419c:	3fe9c99c 	.word	0x3fe9c99c
   d41a0:	2003e390 	.word	0x2003e390
   d41a4:	42480000 	.word	0x42480000

000d41a8 <_ZN16Adafruit_SSD1306D0Ev>:
   d41a8:	b510      	push	{r4, lr}
   d41aa:	2134      	movs	r1, #52	; 0x34
   d41ac:	4604      	mov	r4, r0
   d41ae:	f002 f906 	bl	d63be <_ZdlPvj>
   d41b2:	4620      	mov	r0, r4
   d41b4:	bd10      	pop	{r4, pc}
	...

000d41b8 <_GLOBAL__sub_I_SystemMode>:
}
   d41b8:	b510      	push	{r4, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41ba:	f001 f833 	bl	d5224 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d41be:	4b0c      	ldr	r3, [pc, #48]	; (d41f0 <_GLOBAL__sub_I_SystemMode+0x38>)
#include "Adafruit_SSD1306_RK.h"
SYSTEM_MODE(MANUAL);
Adafruit_SSD1306 myDisplay(128,64);
   d41c0:	4c0c      	ldr	r4, [pc, #48]	; (d41f4 <_GLOBAL__sub_I_SystemMode+0x3c>)
   d41c2:	2200      	movs	r2, #0
   d41c4:	701a      	strb	r2, [r3, #0]
   d41c6:	805a      	strh	r2, [r3, #2]
   d41c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d41cc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d41ce:	2003      	movs	r0, #3
   d41d0:	f001 f9a0 	bl	d5514 <set_system_mode>
   d41d4:	2240      	movs	r2, #64	; 0x40
   d41d6:	2180      	movs	r1, #128	; 0x80
   d41d8:	4620      	mov	r0, r4
   d41da:	f04f 33ff 	mov.w	r3, #4294967295
   d41de:	f000 fde5 	bl	d4dac <_ZN16Adafruit_SSD1306C1Ejja>
   d41e2:	4620      	mov	r0, r4
   d41e4:	4a04      	ldr	r2, [pc, #16]	; (d41f8 <_GLOBAL__sub_I_SystemMode+0x40>)
   d41e6:	4905      	ldr	r1, [pc, #20]	; (d41fc <_GLOBAL__sub_I_SystemMode+0x44>)
    Serial.println(currentTemp);
    myDisplay.clearDisplay();
    float convertedTemp = (currentTemp * (3300.0/4095));
    convertedTemp = ((convertedTemp - 50)/10);
    myDisplay.println(convertedTemp);
}
   d41e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "Adafruit_SSD1306_RK.h"
SYSTEM_MODE(MANUAL);
Adafruit_SSD1306 myDisplay(128,64);
   d41ec:	f002 b8e2 	b.w	d63b4 <__aeabi_atexit>
   d41f0:	2003e3c4 	.word	0x2003e3c4
   d41f4:	2003e390 	.word	0x2003e390
   d41f8:	2003e38c 	.word	0x2003e38c
   d41fc:	000d40c9 	.word	0x000d40c9

000d4200 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4204:	b085      	sub	sp, #20
   d4206:	461e      	mov	r6, r3
   d4208:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d420c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4210:	4615      	mov	r5, r2
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4212:	1a9a      	subs	r2, r3, r2
   d4214:	2a00      	cmp	r2, #0
   d4216:	bfb8      	it	lt
   d4218:	4252      	neglt	r2, r2
   d421a:	9200      	str	r2, [sp, #0]
   d421c:	1a72      	subs	r2, r6, r1
   d421e:	2a00      	cmp	r2, #0
   d4220:	bfb8      	it	lt
   d4222:	4252      	neglt	r2, r2
   d4224:	9201      	str	r2, [sp, #4]
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4226:	460c      	mov	r4, r1
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
   d4228:	9a00      	ldr	r2, [sp, #0]
   d422a:	9901      	ldr	r1, [sp, #4]
   d422c:	428a      	cmp	r2, r1
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d422e:	4681      	mov	r9, r0
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
   d4230:	dd05      	ble.n	d423e <_ZN12Adafruit_GFX9writeLineEsssst+0x3e>
   d4232:	4632      	mov	r2, r6
        _swap_int16_t(x0, y0);
        _swap_int16_t(x1, y1);
   d4234:	461e      	mov	r6, r3
   d4236:	4613      	mov	r3, r2
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
    if (steep) {
   d4238:	4622      	mov	r2, r4
        _swap_int16_t(x0, y0);
   d423a:	462c      	mov	r4, r5
   d423c:	4615      	mov	r5, r2
        _swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
   d423e:	42b4      	cmp	r4, r6
   d4240:	dd05      	ble.n	d424e <_ZN12Adafruit_GFX9writeLineEsssst+0x4e>
   d4242:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d4244:	461d      	mov	r5, r3
   d4246:	4613      	mov	r3, r2
    if (steep) {
        _swap_int16_t(x0, y0);
        _swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
   d4248:	4622      	mov	r2, r4
   d424a:	4634      	mov	r4, r6
   d424c:	4616      	mov	r6, r2
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);
   d424e:	1b5a      	subs	r2, r3, r5
   d4250:	2a00      	cmp	r2, #0
   d4252:	bfb8      	it	lt
   d4254:	4252      	neglt	r2, r2
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4256:	ebc4 0806 	rsb	r8, r4, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d425a:	429d      	cmp	r5, r3
   d425c:	bfb4      	ite	lt
   d425e:	2301      	movlt	r3, #1
   d4260:	f04f 33ff 	movge.w	r3, #4294967295
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d4264:	fa1f f888 	uxth.w	r8, r8
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d4268:	9302      	str	r3, [sp, #8]
        _swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
    dy = abs(y1 - y0);
   d426a:	9203      	str	r2, [sp, #12]

    int16_t err = dx / 2;
   d426c:	fa0f f788 	sxth.w	r7, r8
   d4270:	2202      	movs	r2, #2
   d4272:	fb97 f7f2 	sdiv	r7, r7, r2
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
   d4276:	42b4      	cmp	r4, r6
   d4278:	dc1f      	bgt.n	d42ba <_ZN12Adafruit_GFX9writeLineEsssst+0xba>
        if (steep) {
   d427a:	9a01      	ldr	r2, [sp, #4]
   d427c:	9b00      	ldr	r3, [sp, #0]
   d427e:	4293      	cmp	r3, r2
   d4280:	f8d9 3000 	ldr.w	r3, [r9]
            writePixel(y0, x0, color);
   d4284:	bfc8      	it	gt
   d4286:	4622      	movgt	r2, r4
   d4288:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d428c:	bfc8      	it	gt
   d428e:	4629      	movgt	r1, r5
   d4290:	4653      	mov	r3, sl
        } else {
            writePixel(x0, y0, color);
   d4292:	bfdc      	itt	le
   d4294:	462a      	movle	r2, r5
   d4296:	4621      	movle	r1, r4
   d4298:	4648      	mov	r0, r9
   d429a:	47d8      	blx	fp
        }
        err -= dy;
   d429c:	9b03      	ldr	r3, [sp, #12]
   d429e:	1aff      	subs	r7, r7, r3
   d42a0:	b2bb      	uxth	r3, r7
   d42a2:	b21f      	sxth	r7, r3
        if (err < 0) {
   d42a4:	2f00      	cmp	r7, #0
   d42a6:	da05      	bge.n	d42b4 <_ZN12Adafruit_GFX9writeLineEsssst+0xb4>
            y0 += ystep;
   d42a8:	9a02      	ldr	r2, [sp, #8]
            err += dx;
   d42aa:	eb08 0703 	add.w	r7, r8, r3
        } else {
            writePixel(x0, y0, color);
        }
        err -= dy;
        if (err < 0) {
            y0 += ystep;
   d42ae:	4415      	add	r5, r2
   d42b0:	b22d      	sxth	r5, r5
            err += dx;
   d42b2:	b23f      	sxth	r7, r7
   d42b4:	3401      	adds	r4, #1
   d42b6:	b224      	sxth	r4, r4
        ystep = 1;
    } else {
        ystep = -1;
    }

    for (; x0<=x1; x0++) {
   d42b8:	e7dd      	b.n	d4276 <_ZN12Adafruit_GFX9writeLineEsssst+0x76>
        if (err < 0) {
            y0 += ystep;
            err += dx;
        }
    }
}
   d42ba:	b005      	add	sp, #20
   d42bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d42c0 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d42c0:	b410      	push	{r4}
    drawPixel(x, y, color);
   d42c2:	6804      	ldr	r4, [r0, #0]
   d42c4:	6924      	ldr	r4, [r4, #16]
   d42c6:	46a4      	mov	ip, r4
}
   d42c8:	f85d 4b04 	ldr.w	r4, [sp], #4
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
    drawPixel(x, y, color);
   d42cc:	4760      	bx	ip

000d42ce <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d42ce:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d42d0:	6804      	ldr	r4, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d42d2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d42d6:	9502      	str	r5, [sp, #8]
   d42d8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d42da:	46a4      	mov	ip, r4
}
   d42dc:	bc30      	pop	{r4, r5}
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d42de:	4760      	bx	ip

000d42e0 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d42e0:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d42e2:	6804      	ldr	r4, [r0, #0]
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d42e4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d42e8:	9502      	str	r5, [sp, #8]
   d42ea:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d42ec:	46a4      	mov	ip, r4
}
   d42ee:	bc30      	pop	{r4, r5}
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d42f0:	4760      	bx	ip

000d42f2 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d42f2:	b470      	push	{r4, r5, r6}
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d42f4:	6804      	ldr	r4, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d42f6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d42fa:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d42fe:	9604      	str	r6, [sp, #16]
   d4300:	9503      	str	r5, [sp, #12]
   d4302:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4304:	46a4      	mov	ip, r4
}
   d4306:	bc70      	pop	{r4, r5, r6}
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d4308:	4760      	bx	ip

000d430a <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    End a display-writing routine, overwrite in subclasses if startWrite is defined!
*/
/**************************************************************************/
void Adafruit_GFX::endWrite(){
   d430a:	4770      	bx	lr

000d430c <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d430c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4310:	461c      	mov	r4, r3
    startWrite();
   d4312:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4314:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4318:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d431a:	4605      	mov	r5, r0
   d431c:	4616      	mov	r6, r2
    startWrite();
    writeLine(x, y, x, y+h-1, color);
   d431e:	3c01      	subs	r4, #1
   d4320:	4434      	add	r4, r6
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4322:	460f      	mov	r7, r1
    startWrite();
    writeLine(x, y, x, y+h-1, color);
   d4324:	b224      	sxth	r4, r4
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    startWrite();
   d4326:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d4328:	682b      	ldr	r3, [r5, #0]
   d432a:	f8cd 8004 	str.w	r8, [sp, #4]
   d432e:	9400      	str	r4, [sp, #0]
   d4330:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d4332:	4628      	mov	r0, r5
   d4334:	463b      	mov	r3, r7
   d4336:	4632      	mov	r2, r6
   d4338:	4639      	mov	r1, r7
   d433a:	47a0      	blx	r4
    endWrite();
   d433c:	682b      	ldr	r3, [r5, #0]
   d433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4340:	4628      	mov	r0, r5
}
   d4342:	b002      	add	sp, #8
   d4344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
    startWrite();
    writeLine(x, y, x, y+h-1, color);
    endWrite();
   d4348:	4718      	bx	r3

000d434a <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d434a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d434e:	461d      	mov	r5, r3
    startWrite();
   d4350:	6803      	ldr	r3, [r0, #0]
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4352:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d4356:	695b      	ldr	r3, [r3, #20]
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4358:	4604      	mov	r4, r0
   d435a:	4617      	mov	r7, r2
   d435c:	460e      	mov	r6, r1
    startWrite();
   d435e:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d4360:	e88d 0180 	stmia.w	sp, {r7, r8}
   d4364:	6822      	ldr	r2, [r4, #0]
   d4366:	1e6b      	subs	r3, r5, #1
   d4368:	4433      	add	r3, r6
   d436a:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d436c:	4620      	mov	r0, r4
   d436e:	b21b      	sxth	r3, r3
   d4370:	463a      	mov	r2, r7
   d4372:	4631      	mov	r1, r6
   d4374:	47a8      	blx	r5
    endWrite();
   d4376:	6823      	ldr	r3, [r4, #0]
   d4378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d437a:	4620      	mov	r0, r4
}
   d437c:	b002      	add	sp, #8
   d437e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
    startWrite();
    writeLine(x, y, x+w-1, y, color);
    endWrite();
   d4382:	4718      	bx	r3

000d4384 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4384:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4388:	461e      	mov	r6, r3
    startWrite();
   d438a:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d438c:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
    startWrite();
   d4390:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4392:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4396:	460c      	mov	r4, r1
   d4398:	4605      	mov	r5, r0
   d439a:	4617      	mov	r7, r2
    startWrite();
   d439c:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d439e:	4426      	add	r6, r4
   d43a0:	42b4      	cmp	r4, r6
   d43a2:	682a      	ldr	r2, [r5, #0]
   d43a4:	da0b      	bge.n	d43be <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d43a6:	f8cd 9000 	str.w	r9, [sp]
   d43aa:	f8d2 a020 	ldr.w	sl, [r2, #32]
   d43ae:	4621      	mov	r1, r4
   d43b0:	4643      	mov	r3, r8
   d43b2:	463a      	mov	r2, r7
   d43b4:	4628      	mov	r0, r5
   d43b6:	3401      	adds	r4, #1
   d43b8:	47d0      	blx	sl
   d43ba:	b224      	sxth	r4, r4
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
    startWrite();
    for (int16_t i=x; i<x+w; i++) {
   d43bc:	e7f0      	b.n	d43a0 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
        writeFastVLine(i, y, h, color);
    }
    endWrite();
   d43be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d43c0:	4628      	mov	r0, r5
}
   d43c2:	b002      	add	sp, #8
   d43c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        uint16_t color) {
    startWrite();
    for (int16_t i=x; i<x+w; i++) {
        writeFastVLine(i, y, h, color);
    }
    endWrite();
   d43c8:	4718      	bx	r3

000d43ca <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d43ca:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d43cc:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d43d0:	6804      	ldr	r4, [r0, #0]
   d43d2:	9101      	str	r1, [sp, #4]
   d43d4:	9200      	str	r2, [sp, #0]
   d43d6:	2200      	movs	r2, #0
   d43d8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d43dc:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d43de:	4611      	mov	r1, r2
   d43e0:	47a0      	blx	r4
}
   d43e2:	b002      	add	sp, #8
   d43e4:	bd10      	pop	{r4, pc}

000d43e6 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d43e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   d43ea:	4299      	cmp	r1, r3
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d43ec:	4690      	mov	r8, r2
   d43ee:	4607      	mov	r7, r0
   d43f0:	460e      	mov	r6, r1
   d43f2:	461c      	mov	r4, r3
   d43f4:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
   d43f8:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d43fc:	6802      	ldr	r2, [r0, #0]
    // Update in subclasses if desired!
    if(x0 == x1){
   d43fe:	d10b      	bne.n	d4418 <_ZN12Adafruit_GFX8drawLineEsssst+0x32>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4400:	45a8      	cmp	r8, r5
   d4402:	bfc2      	ittt	gt
   d4404:	4643      	movgt	r3, r8
   d4406:	46a8      	movgt	r8, r5
   d4408:	461d      	movgt	r5, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d440a:	1c6b      	adds	r3, r5, #1
   d440c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d4410:	ebc8 0303 	rsb	r3, r8, r3
   d4414:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d4416:	e00c      	b.n	d4432 <_ZN12Adafruit_GFX8drawLineEsssst+0x4c>
    } else if(y0 == y1){
   d4418:	45a8      	cmp	r8, r5
   d441a:	d113      	bne.n	d4444 <_ZN12Adafruit_GFX8drawLineEsssst+0x5e>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d441c:	4299      	cmp	r1, r3
   d441e:	bfc4      	itt	gt
   d4420:	460b      	movgt	r3, r1
   d4422:	4626      	movgt	r6, r4
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4424:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    // Update in subclasses if desired!
    if(x0 == x1){
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
   d4428:	bfc8      	it	gt
   d442a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d442c:	1c63      	adds	r3, r4, #1
   d442e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4430:	1b9b      	subs	r3, r3, r6
   d4432:	b21b      	sxth	r3, r3
   d4434:	4642      	mov	r2, r8
   d4436:	4631      	mov	r1, r6
   d4438:	4638      	mov	r0, r7
   d443a:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   d443c:	b003      	add	sp, #12
   d443e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4442:	4760      	bx	ip
    } else {
        startWrite();
   d4444:	6953      	ldr	r3, [r2, #20]
   d4446:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d4448:	683b      	ldr	r3, [r7, #0]
   d444a:	e88d 0220 	stmia.w	sp, {r5, r9}
   d444e:	4638      	mov	r0, r7
   d4450:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   d4452:	4642      	mov	r2, r8
   d4454:	4623      	mov	r3, r4
   d4456:	4631      	mov	r1, r6
   d4458:	47a8      	blx	r5
        endWrite();
   d445a:	683b      	ldr	r3, [r7, #0]
   d445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d445e:	4638      	mov	r0, r7
    }
}
   d4460:	b003      	add	sp, #12
   d4462:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
   d4466:	4718      	bx	r3

000d4468 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4468:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d446c:	461e      	mov	r6, r3
    startWrite();
   d446e:	6803      	ldr	r3, [r0, #0]
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4470:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d4474:	695b      	ldr	r3, [r3, #20]
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4476:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d447a:	4604      	mov	r4, r0
   d447c:	460d      	mov	r5, r1
   d447e:	4617      	mov	r7, r2
    startWrite();
   d4480:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4482:	6823      	ldr	r3, [r4, #0]
   d4484:	f8cd 8000 	str.w	r8, [sp]
   d4488:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d448c:	463a      	mov	r2, r7
   d448e:	4633      	mov	r3, r6
   d4490:	4629      	mov	r1, r5
   d4492:	4620      	mov	r0, r4
   d4494:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d4496:	6823      	ldr	r3, [r4, #0]
   d4498:	f8cd 8000 	str.w	r8, [sp]
   d449c:	f109 32ff 	add.w	r2, r9, #4294967295
   d44a0:	443a      	add	r2, r7
   d44a2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d44a6:	4629      	mov	r1, r5
   d44a8:	4633      	mov	r3, r6
   d44aa:	4620      	mov	r0, r4
   d44ac:	b212      	sxth	r2, r2
   d44ae:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d44b0:	6823      	ldr	r3, [r4, #0]
   d44b2:	f8cd 8000 	str.w	r8, [sp]
   d44b6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d44ba:	463a      	mov	r2, r7
   d44bc:	464b      	mov	r3, r9
   d44be:	4629      	mov	r1, r5
   d44c0:	4620      	mov	r0, r4
   d44c2:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d44c4:	6823      	ldr	r3, [r4, #0]
   d44c6:	f8cd 8000 	str.w	r8, [sp]
   d44ca:	1e71      	subs	r1, r6, #1
   d44cc:	4429      	add	r1, r5
   d44ce:	4620      	mov	r0, r4
   d44d0:	6a1d      	ldr	r5, [r3, #32]
   d44d2:	463a      	mov	r2, r7
   d44d4:	464b      	mov	r3, r9
   d44d6:	b209      	sxth	r1, r1
   d44d8:	47a8      	blx	r5
    endWrite();
   d44da:	6823      	ldr	r3, [r4, #0]
   d44dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44de:	4620      	mov	r0, r4
}
   d44e0:	b002      	add	sp, #8
   d44e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    startWrite();
    writeFastHLine(x, y, w, color);
    writeFastHLine(x, y+h-1, w, color);
    writeFastVLine(x, y, h, color);
    writeFastVLine(x+w-1, y, h, color);
    endWrite();
   d44e6:	4718      	bx	r3

000d44e8 <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
   d44e8:	4770      	bx	lr

000d44ea <_ZN12Adafruit_GFX11setRotationEh>:
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    rotation = (x & 3);
   d44ea:	f001 0103 	and.w	r1, r1, #3
    switch(rotation) {
   d44ee:	2901      	cmp	r1, #1
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
    rotation = (x & 3);
   d44f0:	7641      	strb	r1, [r0, #25]
   d44f2:	8903      	ldrh	r3, [r0, #8]
   d44f4:	8942      	ldrh	r2, [r0, #10]
    switch(rotation) {
   d44f6:	d004      	beq.n	d4502 <_ZN12Adafruit_GFX11setRotationEh+0x18>
   d44f8:	2903      	cmp	r1, #3
   d44fa:	d002      	beq.n	d4502 <_ZN12Adafruit_GFX11setRotationEh+0x18>
        case 0:
        case 2:
            _width  = WIDTH;
   d44fc:	8183      	strh	r3, [r0, #12]
            _height = HEIGHT;
   d44fe:	81c2      	strh	r2, [r0, #14]
   d4500:	4770      	bx	lr
            break;
        case 1:
        case 3:
            _width  = HEIGHT;
   d4502:	8182      	strh	r2, [r0, #12]
            _height = WIDTH;
   d4504:	81c3      	strh	r3, [r0, #14]
   d4506:	4770      	bx	lr

000d4508 <_ZN12Adafruit_GFXC1Ess>:
   @brief    Instatiate a GFX context for graphics! Can only be done by a superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4508:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d450a:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d450c:	2400      	movs	r4, #0
   d450e:	4d09      	ldr	r5, [pc, #36]	; (d4534 <_ZN12Adafruit_GFXC1Ess+0x2c>)
   d4510:	8142      	strh	r2, [r0, #10]
{
    _width    = WIDTH;
   d4512:	8181      	strh	r1, [r0, #12]
    _height   = HEIGHT;
   d4514:	81c2      	strh	r2, [r0, #14]
    rotation  = 0;
    cursor_y  = cursor_x    = 0;
    textsize  = 1;
    textcolor = textbgcolor = 0xFFFF;
   d4516:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    _width    = WIDTH;
    _height   = HEIGHT;
    rotation  = 0;
    cursor_y  = cursor_x    = 0;
    textsize  = 1;
   d451a:	2201      	movs	r2, #1
   d451c:	6044      	str	r4, [r0, #4]
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
WIDTH(w), HEIGHT(h)
   d451e:	6005      	str	r5, [r0, #0]
{
    _width    = WIDTH;
    _height   = HEIGHT;
    rotation  = 0;
   d4520:	7644      	strb	r4, [r0, #25]
    cursor_y  = cursor_x    = 0;
   d4522:	8204      	strh	r4, [r0, #16]
   d4524:	8244      	strh	r4, [r0, #18]
    textsize  = 1;
   d4526:	7602      	strb	r2, [r0, #24]
    textcolor = textbgcolor = 0xFFFF;
   d4528:	82c1      	strh	r1, [r0, #22]
   d452a:	8281      	strh	r1, [r0, #20]
    wrap      = true;
   d452c:	7682      	strb	r2, [r0, #26]
    _cp437    = false;
   d452e:	76c4      	strb	r4, [r0, #27]
    gfxFont   = NULL;
   d4530:	61c4      	str	r4, [r0, #28]
}
   d4532:	bd30      	pop	{r4, r5, pc}
   d4534:	000d7114 	.word	0x000d7114

000d4538 <_ZN12Adafruit_GFX8drawCharEsshtth>:
    @param    bg 16-bit 5-6-5 Color to fill background with (if same as color, no background)
    @param    size  Font magnification level, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
   d4538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d453c:	b091      	sub	sp, #68	; 0x44
   d453e:	4691      	mov	r9, r2

    if(!gfxFont) { // 'Classic' built-in font
   d4540:	69c2      	ldr	r2, [r0, #28]
    @param    bg 16-bit 5-6-5 Color to fill background with (if same as color, no background)
    @param    size  Font magnification level, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
   d4542:	9105      	str	r1, [sp, #20]
   d4544:	461e      	mov	r6, r3
   d4546:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
   d454a:	9302      	str	r3, [sp, #8]
   d454c:	4604      	mov	r4, r0
   d454e:	f8bd a06c 	ldrh.w	sl, [sp, #108]	; 0x6c
   d4552:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70

    if(!gfxFont) { // 'Classic' built-in font
   d4556:	2a00      	cmp	r2, #0
   d4558:	f040 80b7 	bne.w	d46ca <_ZN12Adafruit_GFX8drawCharEsshtth+0x192>

        if((x >= _width)            || // Clip right
   d455c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4560:	428b      	cmp	r3, r1
   d4562:	f340 8145 	ble.w	d47f0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b8>
   d4566:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d456a:	454b      	cmp	r3, r9
   d456c:	f340 8140 	ble.w	d47f0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b8>
           (y >= _height)           || // Clip bottom
           ((x + 6 * size - 1) < 0) || // Clip left
   d4570:	2306      	movs	r3, #6
  uint16_t color, uint16_t bg, uint8_t size) {

    if(!gfxFont) { // 'Classic' built-in font

        if((x >= _width)            || // Clip right
           (y >= _height)           || // Clip bottom
   d4572:	fb13 1305 	smlabb	r3, r3, r5, r1
   d4576:	2b00      	cmp	r3, #0
   d4578:	f340 813a 	ble.w	d47f0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b8>
           ((x + 6 * size - 1) < 0) || // Clip left
   d457c:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   d4580:	2b00      	cmp	r3, #0
   d4582:	f340 8135 	ble.w	d47f0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2b8>
           ((y + 8 * size - 1) < 0))   // Clip top
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d4586:	7ec3      	ldrb	r3, [r0, #27]
   d4588:	b91b      	cbnz	r3, d4592 <_ZN12Adafruit_GFX8drawCharEsshtth+0x5a>
   d458a:	2eaf      	cmp	r6, #175	; 0xaf
   d458c:	bf84      	itt	hi
   d458e:	3601      	addhi	r6, #1
   d4590:	b2f6      	uxtbhi	r6, r6

        startWrite();
   d4592:	6823      	ldr	r3, [r4, #0]
   d4594:	4620      	mov	r0, r4
   d4596:	695b      	ldr	r3, [r3, #20]
   d4598:	4798      	blx	r3
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d459a:	2305      	movs	r3, #5
   d459c:	930c      	str	r3, [sp, #48]	; 0x30
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d459e:	2300      	movs	r3, #0
   d45a0:	9303      	str	r3, [sp, #12]
   d45a2:	fa1f f389 	uxth.w	r3, r9
   d45a6:	9307      	str	r3, [sp, #28]
   d45a8:	3308      	adds	r3, #8
   d45aa:	b29b      	uxth	r3, r3
   d45ac:	930e      	str	r3, [sp, #56]	; 0x38
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d45ae:	2305      	movs	r3, #5
   d45b0:	461a      	mov	r2, r3
   d45b2:	9b03      	ldr	r3, [sp, #12]
   d45b4:	f8dd 801c 	ldr.w	r8, [sp, #28]
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d45b8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d45bc:	fb12 3306 	smlabb	r3, r2, r6, r3
   d45c0:	4a8d      	ldr	r2, [pc, #564]	; (d47f8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2c0>)
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d45c2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d45c6:	5cd3      	ldrb	r3, [r2, r3]
   d45c8:	9308      	str	r3, [sp, #32]
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
                    if(size == 1)
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d45ca:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d45ce:	9304      	str	r3, [sp, #16]
   d45d0:	9a04      	ldr	r2, [sp, #16]
   d45d2:	9b03      	ldr	r3, [sp, #12]
   d45d4:	b2af      	uxth	r7, r5
   d45d6:	fb03 2307 	mla	r3, r3, r7, r2
   d45da:	b21b      	sxth	r3, r3
   d45dc:	930b      	str	r3, [sp, #44]	; 0x2c
                } else if(bg != color) {
                    if(size == 1)
                        writePixel(x+i, y+j, bg);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d45de:	b22b      	sxth	r3, r5
   d45e0:	9306      	str	r3, [sp, #24]
                        writePixel(x+i, y+j, color);
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
                } else if(bg != color) {
                    if(size == 1)
                        writePixel(x+i, y+j, bg);
   d45e2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   d45e6:	9b04      	ldr	r3, [sp, #16]
   d45e8:	fa13 f382 	uxtah	r3, r3, r2
   d45ec:	b21b      	sxth	r3, r3
   d45ee:	930d      	str	r3, [sp, #52]	; 0x34

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
                if(line & 1) {
   d45f0:	9b08      	ldr	r3, [sp, #32]
   d45f2:	07d9      	lsls	r1, r3, #31
   d45f4:	d510      	bpl.n	d4618 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe0>
                    if(size == 1)
   d45f6:	2d01      	cmp	r5, #1
   d45f8:	6823      	ldr	r3, [r4, #0]
   d45fa:	d103      	bne.n	d4604 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
                        writePixel(x+i, y+j, color);
   d45fc:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d4600:	9b02      	ldr	r3, [sp, #8]
   d4602:	e012      	b.n	d462a <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, color);
   d4604:	9a02      	ldr	r2, [sp, #8]
   d4606:	9201      	str	r2, [sp, #4]
   d4608:	9a06      	ldr	r2, [sp, #24]
   d460a:	9200      	str	r2, [sp, #0]
   d460c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
   d4610:	4613      	mov	r3, r2
   d4612:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   d4616:	e017      	b.n	d4648 <_ZN12Adafruit_GFX8drawCharEsshtth+0x110>
                } else if(bg != color) {
   d4618:	9b02      	ldr	r3, [sp, #8]
   d461a:	4553      	cmp	r3, sl
   d461c:	d017      	beq.n	d464e <_ZN12Adafruit_GFX8drawCharEsshtth+0x116>
                    if(size == 1)
   d461e:	2d01      	cmp	r5, #1
   d4620:	6823      	ldr	r3, [r4, #0]
   d4622:	d108      	bne.n	d4636 <_ZN12Adafruit_GFX8drawCharEsshtth+0xfe>
                        writePixel(x+i, y+j, bg);
   d4624:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d4628:	4653      	mov	r3, sl
   d462a:	fa0f f288 	sxth.w	r2, r8
   d462e:	990d      	ldr	r1, [sp, #52]	; 0x34
   d4630:	4620      	mov	r0, r4
   d4632:	47d8      	blx	fp
   d4634:	e00b      	b.n	d464e <_ZN12Adafruit_GFX8drawCharEsshtth+0x116>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
   d4636:	9a06      	ldr	r2, [sp, #24]
   d4638:	9200      	str	r2, [sp, #0]
   d463a:	f8cd a004 	str.w	sl, [sp, #4]
   d463e:	f8d3 b01c 	ldr.w	fp, [r3, #28]
   d4642:	4613      	mov	r3, r2
   d4644:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
   d4648:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d464a:	4620      	mov	r0, r4
   d464c:	47d8      	blx	fp
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d464e:	9b08      	ldr	r3, [sp, #32]
   d4650:	085b      	lsrs	r3, r3, #1
   d4652:	9308      	str	r3, [sp, #32]
   d4654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4656:	443b      	add	r3, r7
   d4658:	b29b      	uxth	r3, r3
   d465a:	930a      	str	r3, [sp, #40]	; 0x28
   d465c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d465e:	443b      	add	r3, r7
   d4660:	b29b      	uxth	r3, r3
   d4662:	9309      	str	r3, [sp, #36]	; 0x24
   d4664:	f108 0801 	add.w	r8, r8, #1
   d4668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d466a:	fa1f f888 	uxth.w	r8, r8
   d466e:	4543      	cmp	r3, r8
   d4670:	d1be      	bne.n	d45f0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
            return;

        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

        startWrite();
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4672:	9b03      	ldr	r3, [sp, #12]
   d4674:	3301      	adds	r3, #1
   d4676:	b25b      	sxtb	r3, r3
   d4678:	9303      	str	r3, [sp, #12]
   d467a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d467c:	3b01      	subs	r3, #1
   d467e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4682:	930c      	str	r3, [sp, #48]	; 0x30
   d4684:	d193      	bne.n	d45ae <_ZN12Adafruit_GFX8drawCharEsshtth+0x76>
                    else
                        writeFillRect(x+i*size, y+j*size, size, size, bg);
                }
            }
        }
        if(bg != color) { // If opaque, draw vertical line for last column
   d4686:	9b02      	ldr	r3, [sp, #8]
   d4688:	4553      	cmp	r3, sl
   d468a:	f000 80aa 	beq.w	d47e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
            if(size == 1) writeFastVLine(x+5, y, 8, bg);
   d468e:	2d01      	cmp	r5, #1
   d4690:	6823      	ldr	r3, [r4, #0]
   d4692:	d10a      	bne.n	d46aa <_ZN12Adafruit_GFX8drawCharEsshtth+0x172>
   d4694:	9904      	ldr	r1, [sp, #16]
   d4696:	f8cd a000 	str.w	sl, [sp]
   d469a:	3105      	adds	r1, #5
   d469c:	6a1d      	ldr	r5, [r3, #32]
   d469e:	464a      	mov	r2, r9
   d46a0:	2308      	movs	r3, #8
   d46a2:	b209      	sxth	r1, r1
   d46a4:	4620      	mov	r0, r4
   d46a6:	47a8      	blx	r5
   d46a8:	e09b      	b.n	d47e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
            else          writeFillRect(x+5*size, y, size, 8*size, bg);
   d46aa:	9a04      	ldr	r2, [sp, #16]
   d46ac:	f8cd a004 	str.w	sl, [sp, #4]
   d46b0:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   d46b4:	440a      	add	r2, r1
   d46b6:	00ff      	lsls	r7, r7, #3
   d46b8:	4611      	mov	r1, r2
   d46ba:	9700      	str	r7, [sp, #0]
   d46bc:	69de      	ldr	r6, [r3, #28]
   d46be:	464a      	mov	r2, r9
   d46c0:	462b      	mov	r3, r5
   d46c2:	b209      	sxth	r1, r1
   d46c4:	4620      	mov	r0, r4
   d46c6:	47b0      	blx	r6
   d46c8:	e08b      	b.n	d47e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d46ca:	7a13      	ldrb	r3, [r2, #8]
   d46cc:	1af6      	subs	r6, r6, r3
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
   d46ce:	6853      	ldr	r3, [r2, #4]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d46d0:	b2f6      	uxtb	r6, r6
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
   d46d2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
   d46d6:	6813      	ldr	r3, [r2, #0]
   d46d8:	930b      	str	r3, [sp, #44]	; 0x2c

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d46da:	78b3      	ldrb	r3, [r6, #2]
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
   d46dc:	f996 a006 	ldrsb.w	sl, [r6, #6]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d46e0:	9307      	str	r3, [sp, #28]
                 h  = pgm_read_byte(&glyph->height);
   d46e2:	78f3      	ldrb	r3, [r6, #3]
   d46e4:	930c      	str	r3, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
   d46e6:	2d01      	cmp	r5, #1
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d46e8:	f996 3005 	ldrsb.w	r3, [r6, #5]
   d46ec:	9308      	str	r3, [sp, #32]
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;
   d46ee:	bf94      	ite	ls
   d46f0:	2300      	movls	r3, #0

        if(size > 1) {
            xo16 = xo;
            yo16 = yo;
   d46f2:	fa0f f38a 	sxthhi.w	r3, sl

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d46f6:	f8b6 b000 	ldrh.w	fp, [r6]
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
            xo16 = xo;
            yo16 = yo;
   d46fa:	bf8e      	itee	hi
   d46fc:	9304      	strhi	r3, [sp, #16]
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;
   d46fe:	461e      	movls	r6, r3
   d4700:	9304      	strls	r3, [sp, #16]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
   d4702:	6803      	ldr	r3, [r0, #0]
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
        int16_t  xo16 = 0, yo16 = 0;

        if(size > 1) {
            xo16 = xo;
   d4704:	bf88      	it	hi
   d4706:	f9bd 6020 	ldrshhi.w	r6, [sp, #32]
        // only creates a new set of problems.  Have an idea to work around
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
   d470a:	695b      	ldr	r3, [r3, #20]
   d470c:	4798      	blx	r3
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d470e:	b2ab      	uxth	r3, r5
   d4710:	9306      	str	r3, [sp, #24]
   d4712:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4716:	9305      	str	r3, [sp, #20]
   d4718:	9a05      	ldr	r2, [sp, #20]
   d471a:	9b06      	ldr	r3, [sp, #24]
   d471c:	fb06 2603 	mla	r6, r6, r3, r2
   d4720:	b2b3      	uxth	r3, r6
   d4722:	930a      	str	r3, [sp, #40]	; 0x28
   d4724:	fa1f f389 	uxth.w	r3, r9
   d4728:	2600      	movs	r6, #0
   d472a:	9309      	str	r3, [sp, #36]	; 0x24
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
   d472c:	4453      	add	r3, sl
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
        uint8_t  w  = pgm_read_byte(&glyph->width),
                 h  = pgm_read_byte(&glyph->height);
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
                 yo = pgm_read_byte(&glyph->yOffset);
        uint8_t  xx, yy, bits = 0, bit = 0;
   d472e:	46b0      	mov	r8, r6
   d4730:	9603      	str	r6, [sp, #12]
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4732:	930f      	str	r3, [sp, #60]	; 0x3c
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
   d4734:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4736:	b2f2      	uxtb	r2, r6
   d4738:	429a      	cmp	r2, r3
   d473a:	d252      	bcs.n	d47e2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2aa>
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d473c:	9b04      	ldr	r3, [sp, #16]
   d473e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   d4742:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   d4746:	18f3      	adds	r3, r6, r3
   d4748:	fb13 f301 	smulbb	r3, r3, r1
   d474c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d474e:	440b      	add	r3, r1
   d4750:	b21b      	sxth	r3, r3
   d4752:	930d      	str	r3, [sp, #52]	; 0x34
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d4756:	441a      	add	r2, r3
   d4758:	b213      	sxth	r3, r2
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d475a:	f04f 0a00 	mov.w	sl, #0
                if(!(bit++ & 7)) {
                    bits = pgm_read_byte(&bitmap[bo++]);
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
   d475e:	930e      	str	r3, [sp, #56]	; 0x38
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
   d4760:	9907      	ldr	r1, [sp, #28]
   d4762:	fa5f f28a 	uxtb.w	r2, sl
   d4766:	eb08 0302 	add.w	r3, r8, r2
   d476a:	4291      	cmp	r1, r2
   d476c:	b2db      	uxtb	r3, r3
   d476e:	d932      	bls.n	d47d6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x29e>
                if(!(bit++ & 7)) {
   d4770:	075a      	lsls	r2, r3, #29
   d4772:	d107      	bne.n	d4784 <_ZN12Adafruit_GFX8drawCharEsshtth+0x24c>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d4774:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d4776:	f10b 0301 	add.w	r3, fp, #1
   d477a:	f812 200b 	ldrb.w	r2, [r2, fp]
   d477e:	9203      	str	r2, [sp, #12]
   d4780:	fa1f fb83 	uxth.w	fp, r3
                }
                if(bits & 0x80) {
   d4784:	9b03      	ldr	r3, [sp, #12]
   d4786:	061b      	lsls	r3, r3, #24
   d4788:	d51a      	bpl.n	d47c0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x288>
                    if(size == 1) {
   d478a:	2d01      	cmp	r5, #1
   d478c:	d10c      	bne.n	d47a8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x270>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d478e:	9b05      	ldr	r3, [sp, #20]
   d4790:	9a08      	ldr	r2, [sp, #32]
   d4792:	1899      	adds	r1, r3, r2
   d4794:	6823      	ldr	r3, [r4, #0]
   d4796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d4798:	699b      	ldr	r3, [r3, #24]
   d479a:	4451      	add	r1, sl
   d479c:	461f      	mov	r7, r3
   d479e:	b209      	sxth	r1, r1
   d47a0:	9b02      	ldr	r3, [sp, #8]
   d47a2:	4620      	mov	r0, r4
   d47a4:	47b8      	blx	r7
   d47a6:	e00b      	b.n	d47c0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x288>
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
                          size, size, color);
   d47a8:	9902      	ldr	r1, [sp, #8]
   d47aa:	6822      	ldr	r2, [r4, #0]
   d47ac:	9101      	str	r1, [sp, #4]
                }
                if(bits & 0x80) {
                    if(size == 1) {
                        writePixel(x+xo+xx, y+yo+yy, color);
                    } else {
                        writeFillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
   d47ae:	b22b      	sxth	r3, r5
                          size, size, color);
   d47b0:	9300      	str	r3, [sp, #0]
   d47b2:	69d2      	ldr	r2, [r2, #28]
   d47b4:	fa0f f189 	sxth.w	r1, r9
   d47b8:	4617      	mov	r7, r2
   d47ba:	4620      	mov	r0, r4
   d47bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d47be:	47b8      	blx	r7
                    }
                }
                bits <<= 1;
   d47c0:	9b03      	ldr	r3, [sp, #12]
   d47c2:	005f      	lsls	r7, r3, #1
   d47c4:	b2fb      	uxtb	r3, r7
   d47c6:	9303      	str	r3, [sp, #12]
   d47c8:	9b06      	ldr	r3, [sp, #24]
   d47ca:	4499      	add	r9, r3
   d47cc:	f10a 0a01 	add.w	sl, sl, #1
   d47d0:	fa1f f989 	uxth.w	r9, r9
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
            for(xx=0; xx<w; xx++) {
   d47d4:	e7c4      	b.n	d4760 <_ZN12Adafruit_GFX8drawCharEsshtth+0x228>
   d47d6:	9b07      	ldr	r3, [sp, #28]
   d47d8:	4498      	add	r8, r3
   d47da:	fa5f f888 	uxtb.w	r8, r8
   d47de:	3601      	adds	r6, #1
        // this (a canvas object type for MCUs that can afford the RAM and
        // displays supporting setAddrWindow() and pushColors()), but haven't
        // implemented this yet.

        startWrite();
        for(yy=0; yy<h; yy++) {
   d47e0:	e7a8      	b.n	d4734 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fc>
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();
   d47e2:	6823      	ldr	r3, [r4, #0]
   d47e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47e6:	4620      	mov	r0, r4

    } // End classic vs custom font
}
   d47e8:	b011      	add	sp, #68	; 0x44
   d47ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    }
                }
                bits <<= 1;
            }
        }
        endWrite();
   d47ee:	4718      	bx	r3

    } // End classic vs custom font
}
   d47f0:	b011      	add	sp, #68	; 0x44
   d47f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d47f6:	bf00      	nop
   d47f8:	000d7164 	.word	0x000d7164

000d47fc <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
   d47fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d47fe:	69c2      	ldr	r2, [r0, #28]
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
   d4800:	4604      	mov	r4, r0
   d4802:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d4804:	2a00      	cmp	r2, #0
   d4806:	d12d      	bne.n	d4864 <_ZN12Adafruit_GFX5writeEh+0x68>

        if(c == '\n') {                        // Newline?
   d4808:	290a      	cmp	r1, #10
   d480a:	d105      	bne.n	d4818 <_ZN12Adafruit_GFX5writeEh+0x1c>
            cursor_x  = 0;                     // Reset x to zero,
   d480c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize * 8;          // advance y one line
   d480e:	8a43      	ldrh	r3, [r0, #18]
   d4810:	7e02      	ldrb	r2, [r0, #24]
   d4812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d4816:	e02e      	b.n	d4876 <_ZN12Adafruit_GFX5writeEh+0x7a>
        } else if(c != '\r') {                 // Ignore carriage returns
   d4818:	290d      	cmp	r1, #13
   d481a:	d065      	beq.n	d48e8 <_ZN12Adafruit_GFX5writeEh+0xec>
            if(wrap && ((cursor_x + textsize * 6) > _width)) { // Off right?
   d481c:	7e81      	ldrb	r1, [r0, #26]
   d481e:	7e00      	ldrb	r0, [r0, #24]
   d4820:	b169      	cbz	r1, d483e <_ZN12Adafruit_GFX5writeEh+0x42>
   d4822:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
   d4826:	2106      	movs	r1, #6
   d4828:	fb11 5100 	smlabb	r1, r1, r0, r5
   d482c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   d4830:	42a9      	cmp	r1, r5
                cursor_x  = 0;                 // Reset x to zero,
   d4832:	bfc1      	itttt	gt
   d4834:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize * 8;      // advance y one line
   d4836:	8a62      	ldrhgt	r2, [r4, #18]
   d4838:	eb02 02c0 	addgt.w	r2, r2, r0, lsl #3
   d483c:	8262      	strhgt	r2, [r4, #18]
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d483e:	9002      	str	r0, [sp, #8]
   d4840:	8ae0      	ldrh	r0, [r4, #22]
   d4842:	9001      	str	r0, [sp, #4]
   d4844:	8aa0      	ldrh	r0, [r4, #20]
   d4846:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d484a:	9000      	str	r0, [sp, #0]
   d484c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4850:	4620      	mov	r0, r4
   d4852:	f7ff fe71 	bl	d4538 <_ZN12Adafruit_GFX8drawCharEsshtth>
            cursor_x += textsize * 6;          // Advance x one char
   d4856:	7e23      	ldrb	r3, [r4, #24]
   d4858:	8a22      	ldrh	r2, [r4, #16]
   d485a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d485e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d4862:	e040      	b.n	d48e6 <_ZN12Adafruit_GFX5writeEh+0xea>
        }

    } else { // Custom font

        if(c == '\n') {
   d4864:	290a      	cmp	r1, #10
   d4866:	d108      	bne.n	d487a <_ZN12Adafruit_GFX5writeEh+0x7e>
            cursor_x  = 0;
   d4868:	2300      	movs	r3, #0
   d486a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d486c:	7e01      	ldrb	r1, [r0, #24]
   d486e:	7a92      	ldrb	r2, [r2, #10]
   d4870:	8a43      	ldrh	r3, [r0, #18]
   d4872:	fb01 3302 	mla	r3, r1, r2, r3
   d4876:	8263      	strh	r3, [r4, #18]
   d4878:	e036      	b.n	d48e8 <_ZN12Adafruit_GFX5writeEh+0xec>
        } else if(c != '\r') {
   d487a:	290d      	cmp	r1, #13
   d487c:	d034      	beq.n	d48e8 <_ZN12Adafruit_GFX5writeEh+0xec>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d487e:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4880:	42a9      	cmp	r1, r5
   d4882:	d331      	bcc.n	d48e8 <_ZN12Adafruit_GFX5writeEh+0xec>
   d4884:	7a51      	ldrb	r1, [r2, #9]
   d4886:	4299      	cmp	r1, r3
   d4888:	d32e      	bcc.n	d48e8 <_ZN12Adafruit_GFX5writeEh+0xec>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
   d488a:	6851      	ldr	r1, [r2, #4]
   d488c:	1b5d      	subs	r5, r3, r5
   d488e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4892:	78a9      	ldrb	r1, [r5, #2]
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4894:	b311      	cbz	r1, d48dc <_ZN12Adafruit_GFX5writeEh+0xe0>
   d4896:	78e8      	ldrb	r0, [r5, #3]
   d4898:	b300      	cbz	r0, d48dc <_ZN12Adafruit_GFX5writeEh+0xe0>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
   d489a:	7ea6      	ldrb	r6, [r4, #26]
   d489c:	7e20      	ldrb	r0, [r4, #24]
   d489e:	b18e      	cbz	r6, d48c4 <_ZN12Adafruit_GFX5writeEh+0xc8>
   d48a0:	f995 6005 	ldrsb.w	r6, [r5, #5]
   d48a4:	4431      	add	r1, r6
   d48a6:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d48aa:	fb00 6101 	mla	r1, r0, r1, r6
   d48ae:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d48b2:	42b1      	cmp	r1, r6
   d48b4:	dd06      	ble.n	d48c4 <_ZN12Adafruit_GFX5writeEh+0xc8>
                        cursor_x  = 0;
   d48b6:	2100      	movs	r1, #0
   d48b8:	8221      	strh	r1, [r4, #16]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d48ba:	7a92      	ldrb	r2, [r2, #10]
   d48bc:	8a61      	ldrh	r1, [r4, #18]
   d48be:	fb02 1200 	mla	r2, r2, r0, r1
   d48c2:	8262      	strh	r2, [r4, #18]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d48c4:	9002      	str	r0, [sp, #8]
   d48c6:	8ae0      	ldrh	r0, [r4, #22]
   d48c8:	9001      	str	r0, [sp, #4]
   d48ca:	8aa0      	ldrh	r0, [r4, #20]
   d48cc:	9000      	str	r0, [sp, #0]
   d48ce:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d48d2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d48d6:	4620      	mov	r0, r4
   d48d8:	f7ff fe2e 	bl	d4538 <_ZN12Adafruit_GFX8drawCharEsshtth>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
   d48dc:	7929      	ldrb	r1, [r5, #4]
   d48de:	7e22      	ldrb	r2, [r4, #24]
   d48e0:	8a23      	ldrh	r3, [r4, #16]
   d48e2:	fb01 3302 	mla	r3, r1, r2, r3
   d48e6:	8223      	strh	r3, [r4, #16]
            }
        }

    }
    return 1;
}
   d48e8:	2001      	movs	r0, #1
   d48ea:	b004      	add	sp, #16
   d48ec:	bd70      	pop	{r4, r5, r6, pc}

000d48ee <_ZN12Adafruit_GFX9setCursorEss>:
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
*/
/**************************************************************************/
void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   d48ee:	8201      	strh	r1, [r0, #16]
    cursor_y = y;
   d48f0:	8242      	strh	r2, [r0, #18]
   d48f2:	4770      	bx	lr

000d48f4 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    textsize = (s > 0) ? s : 1;
   d48f4:	2900      	cmp	r1, #0
   d48f6:	bf08      	it	eq
   d48f8:	2101      	moveq	r1, #1
   d48fa:	7601      	strb	r1, [r0, #24]
   d48fc:	4770      	bx	lr

000d48fe <_ZN12Adafruit_GFX12setTextColorEt>:
*/
/**************************************************************************/
void Adafruit_GFX::setTextColor(uint16_t c) {
    // For 'transparent' background, we'll set the bg
    // to the same as fg instead of using a flag
    textcolor = textbgcolor = c;
   d48fe:	82c1      	strh	r1, [r0, #22]
   d4900:	8281      	strh	r1, [r0, #20]
   d4902:	4770      	bx	lr

000d4904 <_ZNK12Adafruit_GFX11getRotationEv>:
    @returns    0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
uint8_t Adafruit_GFX::getRotation(void) const {
    return rotation;
}
   d4904:	7e40      	ldrb	r0, [r0, #25]
   d4906:	4770      	bx	lr

000d4908 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4908:	f000 bc8c 	b.w	d5224 <HAL_Pin_Map>

000d490c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
#endif
    }
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d490c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) {
   d490e:	7e44      	ldrb	r4, [r0, #25]
#endif
    }
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4910:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  boolean bSwap = false;
  switch(rotation) {
   d4914:	2c02      	cmp	r4, #2
   d4916:	d009      	beq.n	d492c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x20>
   d4918:	2c03      	cmp	r4, #3
   d491a:	d010      	beq.n	d493e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x32>
   d491c:	2c01      	cmp	r4, #1
   d491e:	f040 809d 	bne.w	d4a5c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x150>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d4922:	8904      	ldrh	r4, [r0, #8]
   d4924:	3c01      	subs	r4, #1
   d4926:	1aa2      	subs	r2, r4, r2
   d4928:	b212      	sxth	r2, r2
      break;
   d492a:	e00c      	b.n	d4946 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for _height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d492c:	8944      	ldrh	r4, [r0, #10]
   d492e:	3c01      	subs	r4, #1
   d4930:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4932:	8904      	ldrh	r4, [r0, #8]
   d4934:	1ae4      	subs	r4, r4, r3
   d4936:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for _height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4938:	b212      	sxth	r2, r2
      x -= (w-1);
   d493a:	b209      	sxth	r1, r1
      break;
   d493c:	e08e      	b.n	d4a5c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x150>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d493e:	8944      	ldrh	r4, [r0, #10]
   d4940:	1ae4      	subs	r4, r4, r3
   d4942:	1a61      	subs	r1, r4, r1
   d4944:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4946:	2a00      	cmp	r2, #0
   d4948:	f2c0 8087 	blt.w	d4a5a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d494c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4950:	4294      	cmp	r4, r2
   d4952:	f340 80cd 	ble.w	d4af0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>

  // make sure we don't try to draw below 0
  if(__y < 0) {
   d4956:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4958:	bfbe      	ittt	lt
   d495a:	185b      	addlt	r3, r3, r1
   d495c:	b21b      	sxthlt	r3, r3
    __y = 0;
   d495e:	2100      	movlt	r1, #0

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
   d4960:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4964:	18cd      	adds	r5, r1, r3
   d4966:	42a5      	cmp	r5, r4
    __h = (HEIGHT - __y);
   d4968:	bfc4      	itt	gt
   d496a:	1a63      	subgt	r3, r4, r1
   d496c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt
  if(__h <= 0) {
   d496e:	2b00      	cmp	r3, #0
   d4970:	f340 80be 	ble.w	d4af0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4974:	b2c9      	uxtb	r1, r1
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d4976:	6a05      	ldr	r5, [r0, #32]
  register uint8_t y = __y;
  register uint8_t h = __h;


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
   d4978:	6b07      	ldr	r7, [r0, #48]	; 0x30
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d497a:	08cc      	lsrs	r4, r1, #3
   d497c:	fb05 2204 	mla	r2, r5, r4, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4980:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4984:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d4986:	eb07 0502 	add.w	r5, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d498a:	d02f      	beq.n	d49ec <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
    // mask off the high n bits we want to set
    mod = 8-mod;
   d498c:	f1c1 0408 	rsb	r4, r1, #8
   d4990:	b2e4      	uxtb	r4, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4992:	4958      	ldr	r1, [pc, #352]	; (d4af4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e8>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
   d4994:	42a3      	cmp	r3, r4
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4996:	5d09      	ldrb	r1, [r1, r4]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
   d4998:	d20d      	bcs.n	d49b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      mask &= (0XFF >> (mod-h));
   d499a:	ebc3 0c04 	rsb	ip, r3, r4
   d499e:	f04f 0eff 	mov.w	lr, #255	; 0xff
   d49a2:	fa4e fe0c 	asr.w	lr, lr, ip
    }

  switch (color)
   d49a6:	2e01      	cmp	r6, #1
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
   d49a8:	ea0e 0101 	and.w	r1, lr, r1
    }

  switch (color)
   d49ac:	d005      	beq.n	d49ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xae>
   d49ae:	d30a      	bcc.n	d49c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xba>
   d49b0:	2e02      	cmp	r6, #2
   d49b2:	d00f      	beq.n	d49d4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc8>
   d49b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d49b6:	2e01      	cmp	r6, #1
   d49b8:	d104      	bne.n	d49c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xb8>
    {
    case WHITE:   *pBuf |=  mask;  break;
   d49ba:	f817 e002 	ldrb.w	lr, [r7, r2]
   d49be:	ea41 010e 	orr.w	r1, r1, lr
   d49c2:	e00b      	b.n	d49dc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd0>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

  switch (color)
   d49c4:	d204      	bcs.n	d49d0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xc4>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
   d49c6:	f817 e002 	ldrb.w	lr, [r7, r2]
   d49ca:	ea2e 0101 	bic.w	r1, lr, r1
   d49ce:	e005      	b.n	d49dc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd0>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

  switch (color)
   d49d0:	2e02      	cmp	r6, #2
   d49d2:	d107      	bne.n	d49e4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd8>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
   d49d4:	f817 e002 	ldrb.w	lr, [r7, r2]
   d49d8:	ea81 010e 	eor.w	r1, r1, lr
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d49dc:	42a3      	cmp	r3, r4

  switch (color)
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
   d49de:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d49e0:	f0c0 8086 	bcc.w	d4af0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>

    h -= mod;

    pBuf += _width;
   d49e4:	6a02      	ldr	r2, [r0, #32]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }

    h -= mod;
   d49e6:	1b1b      	subs	r3, r3, r4
   d49e8:	b2db      	uxtb	r3, r3

    pBuf += _width;
   d49ea:	4415      	add	r5, r2
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
   d49ec:	2b07      	cmp	r3, #7
   d49ee:	d91a      	bls.n	d4a26 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x11a>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
   d49f0:	2e02      	cmp	r6, #2
   d49f2:	d10a      	bne.n	d4a0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xfe>
   d49f4:	461a      	mov	r2, r3
      do  {
      *pBuf=~(*pBuf);
   d49f6:	7829      	ldrb	r1, [r5, #0]
   d49f8:	43c9      	mvns	r1, r1
   d49fa:	7029      	strb	r1, [r5, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d49fc:	3a08      	subs	r2, #8
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do  {
      *pBuf=~(*pBuf);

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d49fe:	6a01      	ldr	r1, [r0, #32]

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d4a00:	b2d2      	uxtb	r2, r2
      } while(h >= 8);
   d4a02:	2a07      	cmp	r2, #7
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do  {
      *pBuf=~(*pBuf);

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d4a04:	440d      	add	r5, r1

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
      } while(h >= 8);
   d4a06:	d8f6      	bhi.n	d49f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xea>
   d4a08:	e01f      	b.n	d4a4a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13e>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
   d4a0a:	2e01      	cmp	r6, #1
   d4a0c:	bf0c      	ite	eq
   d4a0e:	24ff      	moveq	r4, #255	; 0xff
   d4a10:	2400      	movne	r4, #0
   d4a12:	461a      	mov	r2, r3

      do  {
        // write our value in
      *pBuf = val;
   d4a14:	702c      	strb	r4, [r5, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d4a16:	3a08      	subs	r2, #8
      do  {
        // write our value in
      *pBuf = val;

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d4a18:	6a01      	ldr	r1, [r0, #32]

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d4a1a:	b2d2      	uxtb	r2, r2
      } while(h >= 8);
   d4a1c:	2a07      	cmp	r2, #7
      do  {
        // write our value in
      *pBuf = val;

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d4a1e:	440d      	add	r5, r1

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
      } while(h >= 8);
   d4a20:	d8f8      	bhi.n	d4a14 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x108>
   d4a22:	f003 0307 	and.w	r3, r3, #7
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
   d4a26:	2b00      	cmp	r3, #0
   d4a28:	d062      	beq.n	d4af0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4a2a:	4a33      	ldr	r2, [pc, #204]	; (d4af8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ec>)
    switch (color)
   d4a2c:	2e01      	cmp	r6, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4a2e:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
   d4a30:	d003      	beq.n	d4a3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x12e>
   d4a32:	d305      	bcc.n	d4a40 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
   d4a34:	2e02      	cmp	r6, #2
   d4a36:	d15b      	bne.n	d4af0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
   d4a38:	e00c      	b.n	d4a54 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x148>
    {
      case WHITE:   *pBuf |=  mask;  break;
   d4a3a:	782a      	ldrb	r2, [r5, #0]
   d4a3c:	4313      	orrs	r3, r2
   d4a3e:	e002      	b.n	d4a46 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
      case BLACK:   *pBuf &= ~mask;  break;
   d4a40:	782a      	ldrb	r2, [r5, #0]
   d4a42:	ea22 0303 	bic.w	r3, r2, r3
   d4a46:	702b      	strb	r3, [r5, #0]
   d4a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
      } while(h >= 8);
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
   d4a4a:	f013 0307 	ands.w	r3, r3, #7
   d4a4e:	d04f      	beq.n	d4af0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4a50:	4a29      	ldr	r2, [pc, #164]	; (d4af8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ec>)
   d4a52:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
   d4a54:	782a      	ldrb	r2, [r5, #0]
   d4a56:	4053      	eors	r3, r2
   d4a58:	e7f5      	b.n	d4a46 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
   d4a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4a5c:	2a00      	cmp	r2, #0
   d4a5e:	db46      	blt.n	d4aee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
   d4a60:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4a64:	4294      	cmp	r4, r2
   d4a66:	dd43      	ble.n	d4af0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>

  // make sure we don't try to draw below 0
  if(x < 0) {
   d4a68:	2900      	cmp	r1, #0
    w += x;
   d4a6a:	bfbc      	itt	lt
   d4a6c:	18c9      	addlt	r1, r1, r3
   d4a6e:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
   d4a70:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) {
    w += x;
    x = 0;
   d4a74:	bfb8      	it	lt
   d4a76:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
   d4a78:	18cd      	adds	r5, r1, r3
   d4a7a:	42a5      	cmp	r5, r4
    w = (WIDTH - x);
   d4a7c:	bfc4      	itt	gt
   d4a7e:	1a63      	subgt	r3, r4, r1
   d4a80:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4a82:	2b00      	cmp	r3, #0
   d4a84:	dd34      	ble.n	d4af0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
   d4a86:	6b05      	ldr	r5, [r0, #48]	; 0x30
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d4a88:	6a00      	ldr	r0, [r0, #32]
   d4a8a:	2408      	movs	r4, #8
   d4a8c:	fb92 f4f4 	sdiv	r4, r2, r4
   d4a90:	fb00 1104 	mla	r1, r0, r4, r1
   d4a94:	1868      	adds	r0, r5, r1

  register uint8_t mask = 1 << (y&7);
   d4a96:	f002 0207 	and.w	r2, r2, #7
   d4a9a:	2101      	movs	r1, #1
   d4a9c:	fa01 f202 	lsl.w	r2, r1, r2

  switch (color)
   d4aa0:	428e      	cmp	r6, r1
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4aa2:	b2d2      	uxtb	r2, r2

  switch (color)
   d4aa4:	d003      	beq.n	d4aae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1a2>
   d4aa6:	d30c      	bcc.n	d4ac2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1b6>
   d4aa8:	2e02      	cmp	r6, #2
   d4aaa:	d016      	beq.n	d4ada <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ce>
   d4aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4aae:	3b01      	subs	r3, #1
   d4ab0:	b21b      	sxth	r3, r3
  {
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
   d4ab2:	1c5d      	adds	r5, r3, #1
   d4ab4:	d01c      	beq.n	d4af0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
   d4ab6:	f810 1b01 	ldrb.w	r1, [r0], #1
   d4aba:	4311      	orrs	r1, r2
   d4abc:	f800 1c01 	strb.w	r1, [r0, #-1]
   d4ac0:	e7f5      	b.n	d4aae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1a2>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
   d4ac2:	43d2      	mvns	r2, r2
   d4ac4:	b2d2      	uxtb	r2, r2
   d4ac6:	3b01      	subs	r3, #1
   d4ac8:	b21b      	sxth	r3, r3
   d4aca:	1c5c      	adds	r4, r3, #1
   d4acc:	d010      	beq.n	d4af0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
   d4ace:	f810 1b01 	ldrb.w	r1, [r0], #1
   d4ad2:	4011      	ands	r1, r2
   d4ad4:	f800 1c01 	strb.w	r1, [r0, #-1]
   d4ad8:	e7f5      	b.n	d4ac6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ba>
   d4ada:	3b01      	subs	r3, #1
   d4adc:	b21b      	sxth	r3, r3
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
   d4ade:	1c59      	adds	r1, r3, #1
   d4ae0:	d006      	beq.n	d4af0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e4>
   d4ae2:	f810 1b01 	ldrb.w	r1, [r0], #1
   d4ae6:	4051      	eors	r1, r2
   d4ae8:	f800 1c01 	strb.w	r1, [r0, #-1]
   d4aec:	e7f5      	b.n	d4ada <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ce>
   d4aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4af2:	bf00      	nop
   d4af4:	2003e31c 	.word	0x2003e31c
   d4af8:	2003e314 	.word	0x2003e314

000d4afc <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4afc:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) {
   d4afe:	7e44      	ldrb	r4, [r0, #25]
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4b00:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) {
   d4b04:	2c02      	cmp	r4, #2
   d4b06:	d008      	beq.n	d4b1a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4b08:	2c03      	cmp	r4, #3
   d4b0a:	d00f      	beq.n	d4b2c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4b0c:	2c01      	cmp	r4, #1
   d4b0e:	d160      	bne.n	d4bd2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4b10:	8904      	ldrh	r4, [r0, #8]
   d4b12:	1ae4      	subs	r4, r4, r3
   d4b14:	1aa2      	subs	r2, r4, r2
   d4b16:	b212      	sxth	r2, r2
      break;
   d4b18:	e00c      	b.n	d4b34 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4b1a:	8904      	ldrh	r4, [r0, #8]
   d4b1c:	3c01      	subs	r4, #1
   d4b1e:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4b20:	8944      	ldrh	r4, [r0, #10]
   d4b22:	1ae4      	subs	r4, r4, r3
   d4b24:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4b26:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4b28:	b212      	sxth	r2, r2
      break;
   d4b2a:	e052      	b.n	d4bd2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y
      bSwap = true;
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
   d4b2c:	8944      	ldrh	r4, [r0, #10]
   d4b2e:	3c01      	subs	r4, #1
   d4b30:	1a61      	subs	r1, r4, r1
   d4b32:	b209      	sxth	r1, r1
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4b34:	2900      	cmp	r1, #0
   d4b36:	db4b      	blt.n	d4bd0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd4>
   d4b38:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4b3c:	428c      	cmp	r4, r1
   d4b3e:	f340 80cf 	ble.w	d4ce0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>

  // make sure we don't try to draw below 0
  if(x < 0) {
   d4b42:	2a00      	cmp	r2, #0
    w += x;
   d4b44:	bfbc      	itt	lt
   d4b46:	18d2      	addlt	r2, r2, r3
   d4b48:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
   d4b4a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) {
    w += x;
    x = 0;
   d4b4e:	bfb8      	it	lt
   d4b50:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) {
   d4b52:	18d6      	adds	r6, r2, r3
   d4b54:	42a6      	cmp	r6, r4
    w = (WIDTH - x);
   d4b56:	bfc4      	itt	gt
   d4b58:	1aa3      	subgt	r3, r4, r2
   d4b5a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4b5c:	2b00      	cmp	r3, #0
   d4b5e:	f340 80bf 	ble.w	d4ce0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
   d4b62:	6b06      	ldr	r6, [r0, #48]	; 0x30
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d4b64:	6a00      	ldr	r0, [r0, #32]
   d4b66:	2408      	movs	r4, #8
   d4b68:	fb91 f4f4 	sdiv	r4, r1, r4
   d4b6c:	fb00 2204 	mla	r2, r0, r4, r2
   d4b70:	18b0      	adds	r0, r6, r2

  register uint8_t mask = 1 << (y&7);
   d4b72:	f001 0107 	and.w	r1, r1, #7
   d4b76:	2201      	movs	r2, #1
   d4b78:	fa02 f101 	lsl.w	r1, r2, r1

  switch (color)
   d4b7c:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4b7e:	b2c9      	uxtb	r1, r1

  switch (color)
   d4b80:	d003      	beq.n	d4b8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x8e>
   d4b82:	d30d      	bcc.n	d4ba0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xa4>
   d4b84:	2d02      	cmp	r5, #2
   d4b86:	d018      	beq.n	d4bba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xbe>
   d4b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b8a:	3b01      	subs	r3, #1
   d4b8c:	b21b      	sxth	r3, r3
  {
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
   d4b8e:	1c5d      	adds	r5, r3, #1
   d4b90:	f000 80a6 	beq.w	d4ce0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
   d4b94:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4b98:	430a      	orrs	r2, r1
   d4b9a:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4b9e:	e7f4      	b.n	d4b8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x8e>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
   d4ba0:	43c9      	mvns	r1, r1
   d4ba2:	b2c9      	uxtb	r1, r1
   d4ba4:	3b01      	subs	r3, #1
   d4ba6:	b21b      	sxth	r3, r3
   d4ba8:	1c5c      	adds	r4, r3, #1
   d4baa:	f000 8099 	beq.w	d4ce0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
   d4bae:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4bb2:	400a      	ands	r2, r1
   d4bb4:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4bb8:	e7f4      	b.n	d4ba4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xa8>
   d4bba:	3b01      	subs	r3, #1
   d4bbc:	b21b      	sxth	r3, r3
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
   d4bbe:	1c5a      	adds	r2, r3, #1
   d4bc0:	f000 808e 	beq.w	d4ce0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
   d4bc4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4bc8:	404a      	eors	r2, r1
   d4bca:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4bce:	e7f4      	b.n	d4bba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xbe>
   d4bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4bd2:	2900      	cmp	r1, #0
   d4bd4:	f2c0 8083 	blt.w	d4cde <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e2>
   d4bd8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4bdc:	428c      	cmp	r4, r1
   d4bde:	dd7f      	ble.n	d4ce0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>

  // make sure we don't try to draw below 0
  if(__y < 0) {
   d4be0:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4be2:	bfbe      	ittt	lt
   d4be4:	189b      	addlt	r3, r3, r2
   d4be6:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4be8:	2200      	movlt	r2, #0

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) {
   d4bea:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4bee:	18d6      	adds	r6, r2, r3
   d4bf0:	42a6      	cmp	r6, r4
    __h = (HEIGHT - __y);
   d4bf2:	bfc4      	itt	gt
   d4bf4:	1aa3      	subgt	r3, r4, r2
   d4bf6:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt
  if(__h <= 0) {
   d4bf8:	2b00      	cmp	r3, #0
   d4bfa:	dd71      	ble.n	d4ce0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4bfc:	b2d2      	uxtb	r2, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d4bfe:	6a06      	ldr	r6, [r0, #32]
  register uint8_t y = __y;
  register uint8_t h = __h;


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
   d4c00:	6b07      	ldr	r7, [r0, #48]	; 0x30
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d4c02:	08d4      	lsrs	r4, r2, #3
   d4c04:	fb06 1104 	mla	r1, r6, r4, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4c08:	f012 0207 	ands.w	r2, r2, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4c0c:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * _width);
  // and offset x columns in
  pBuf += x;
   d4c0e:	eb07 0601 	add.w	r6, r7, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4c12:	d02e      	beq.n	d4c72 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x176>
    // mask off the high n bits we want to set
    mod = 8-mod;
   d4c14:	f1c2 0408 	rsb	r4, r2, #8
   d4c18:	b2e4      	uxtb	r4, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4c1a:	4a32      	ldr	r2, [pc, #200]	; (d4ce4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e8>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
   d4c1c:	42a3      	cmp	r3, r4
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4c1e:	5d12      	ldrb	r2, [r2, r4]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
   d4c20:	d20d      	bcs.n	d4c3e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x142>
      mask &= (0XFF >> (mod-h));
   d4c22:	ebc3 0c04 	rsb	ip, r3, r4
   d4c26:	f04f 0eff 	mov.w	lr, #255	; 0xff
   d4c2a:	fa4e fe0c 	asr.w	lr, lr, ip
    }

  switch (color)
   d4c2e:	2d01      	cmp	r5, #1
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
   d4c30:	ea0e 0202 	and.w	r2, lr, r2
    }

  switch (color)
   d4c34:	d005      	beq.n	d4c42 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   d4c36:	d30a      	bcc.n	d4c4e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4c38:	2d02      	cmp	r5, #2
   d4c3a:	d00f      	beq.n	d4c5c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x160>
   d4c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c3e:	2d01      	cmp	r5, #1
   d4c40:	d104      	bne.n	d4c4c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x150>
    {
    case WHITE:   *pBuf |=  mask;  break;
   d4c42:	f817 e001 	ldrb.w	lr, [r7, r1]
   d4c46:	ea42 020e 	orr.w	r2, r2, lr
   d4c4a:	e00b      	b.n	d4c64 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

  switch (color)
   d4c4c:	d204      	bcs.n	d4c58 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x15c>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
   d4c4e:	f817 e001 	ldrb.w	lr, [r7, r1]
   d4c52:	ea2e 0202 	bic.w	r2, lr, r2
   d4c56:	e005      	b.n	d4c64 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) {
      mask &= (0XFF >> (mod-h));
    }

  switch (color)
   d4c58:	2d02      	cmp	r5, #2
   d4c5a:	d106      	bne.n	d4c6a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16e>
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
   d4c5c:	f817 e001 	ldrb.w	lr, [r7, r1]
   d4c60:	ea82 020e 	eor.w	r2, r2, lr
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4c64:	42a3      	cmp	r3, r4

  switch (color)
    {
    case WHITE:   *pBuf |=  mask;  break;
    case BLACK:   *pBuf &= ~mask;  break;
    case INVERSE: *pBuf ^=  mask;  break;
   d4c66:	547a      	strb	r2, [r7, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4c68:	d33a      	bcc.n	d4ce0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>

    h -= mod;

    pBuf += _width;
   d4c6a:	6a02      	ldr	r2, [r0, #32]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }

    h -= mod;
   d4c6c:	1b1b      	subs	r3, r3, r4
   d4c6e:	b2db      	uxtb	r3, r3

    pBuf += _width;
   d4c70:	4416      	add	r6, r2
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) {
   d4c72:	2b07      	cmp	r3, #7
   d4c74:	d91a      	bls.n	d4cac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1b0>
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
   d4c76:	2d02      	cmp	r5, #2
   d4c78:	d10a      	bne.n	d4c90 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x194>
   d4c7a:	461a      	mov	r2, r3
      do  {
      *pBuf=~(*pBuf);
   d4c7c:	7831      	ldrb	r1, [r6, #0]
   d4c7e:	43c9      	mvns	r1, r1
   d4c80:	7031      	strb	r1, [r6, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d4c82:	3a08      	subs	r2, #8
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do  {
      *pBuf=~(*pBuf);

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d4c84:	6a01      	ldr	r1, [r0, #32]

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d4c86:	b2d2      	uxtb	r2, r2
      } while(h >= 8);
   d4c88:	2a07      	cmp	r2, #7
    if (color == INVERSE)  {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do  {
      *pBuf=~(*pBuf);

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d4c8a:	440e      	add	r6, r1

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
      } while(h >= 8);
   d4c8c:	d8f6      	bhi.n	d4c7c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x180>
   d4c8e:	e01d      	b.n	d4ccc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1d0>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
   d4c90:	2d01      	cmp	r5, #1
   d4c92:	bf0c      	ite	eq
   d4c94:	24ff      	moveq	r4, #255	; 0xff
   d4c96:	2400      	movne	r4, #0
   d4c98:	461a      	mov	r2, r3

      do  {
        // write our value in
      *pBuf = val;
   d4c9a:	7034      	strb	r4, [r6, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d4c9c:	3a08      	subs	r2, #8
      do  {
        // write our value in
      *pBuf = val;

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d4c9e:	6a01      	ldr	r1, [r0, #32]

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
   d4ca0:	b2d2      	uxtb	r2, r2
      } while(h >= 8);
   d4ca2:	2a07      	cmp	r2, #7
      do  {
        // write our value in
      *pBuf = val;

        // adjust the buffer forward 8 rows worth of data
        pBuf += _width;
   d4ca4:	440e      	add	r6, r1

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
      } while(h >= 8);
   d4ca6:	d8f8      	bhi.n	d4c9a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x19e>
   d4ca8:	f003 0307 	and.w	r3, r3, #7
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
   d4cac:	b1c3      	cbz	r3, d4ce0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4cae:	4a0e      	ldr	r2, [pc, #56]	; (d4ce8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ec>)
    switch (color)
   d4cb0:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4cb2:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
   d4cb4:	d003      	beq.n	d4cbe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1c2>
   d4cb6:	d305      	bcc.n	d4cc4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1c8>
   d4cb8:	2d02      	cmp	r5, #2
   d4cba:	d111      	bne.n	d4ce0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
   d4cbc:	e00b      	b.n	d4cd6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1da>
    {
      case WHITE:   *pBuf |=  mask;  break;
   d4cbe:	7832      	ldrb	r2, [r6, #0]
   d4cc0:	4313      	orrs	r3, r2
   d4cc2:	e00a      	b.n	d4cda <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1de>
      case BLACK:   *pBuf &= ~mask;  break;
   d4cc4:	7832      	ldrb	r2, [r6, #0]
   d4cc6:	ea22 0303 	bic.w	r3, r2, r3
   d4cca:	e006      	b.n	d4cda <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1de>
      } while(h >= 8);
      }
    }

  // now do the final partial byte, if necessary
  if(h) {
   d4ccc:	f013 0307 	ands.w	r3, r3, #7
   d4cd0:	d006      	beq.n	d4ce0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e4>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4cd2:	4a05      	ldr	r2, [pc, #20]	; (d4ce8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ec>)
   d4cd4:	5cd3      	ldrb	r3, [r2, r3]
    switch (color)
    {
      case WHITE:   *pBuf |=  mask;  break;
      case BLACK:   *pBuf &= ~mask;  break;
      case INVERSE: *pBuf ^=  mask;  break;
   d4cd6:	7832      	ldrb	r2, [r6, #0]
   d4cd8:	4053      	eors	r3, r2
   d4cda:	7033      	strb	r3, [r6, #0]
  if(bSwap) {
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d4cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ce2:	bf00      	nop
   d4ce4:	2003e31c 	.word	0x2003e31c
   d4ce8:	2003e314 	.word	0x2003e314

000d4cec <_ZN16Adafruit_SSD13069drawPixelEsst>:


#define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }

// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
   d4cee:	1e0e      	subs	r6, r1, #0


#define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }

// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4cf0:	4605      	mov	r5, r0
   d4cf2:	4614      	mov	r4, r2
   d4cf4:	461f      	mov	r7, r3
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
   d4cf6:	db57      	blt.n	d4da8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xbc>
   d4cf8:	6a03      	ldr	r3, [r0, #32]
   d4cfa:	429e      	cmp	r6, r3
   d4cfc:	d254      	bcs.n	d4da8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xbc>
   d4cfe:	2a00      	cmp	r2, #0
   d4d00:	db52      	blt.n	d4da8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xbc>
   d4d02:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d4d04:	429a      	cmp	r2, r3
   d4d06:	d24f      	bcs.n	d4da8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xbc>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4d08:	f7ff fdfc 	bl	d4904 <_ZNK12Adafruit_GFX11getRotationEv>
   d4d0c:	2802      	cmp	r0, #2
   d4d0e:	d009      	beq.n	d4d24 <_ZN16Adafruit_SSD13069drawPixelEsst+0x38>
   d4d10:	2803      	cmp	r0, #3
   d4d12:	d010      	beq.n	d4d36 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4a>
   d4d14:	2801      	cmp	r0, #1
   d4d16:	d113      	bne.n	d4d40 <_ZN16Adafruit_SSD13069drawPixelEsst+0x54>
  case 1:
    ssd1306_swap(x, y);
    x = _width - x - 1;
   d4d18:	6a2b      	ldr	r3, [r5, #32]
   d4d1a:	3b01      	subs	r3, #1
   d4d1c:	1b1b      	subs	r3, r3, r4
   d4d1e:	4634      	mov	r4, r6
   d4d20:	b21e      	sxth	r6, r3
   d4d22:	e00d      	b.n	d4d40 <_ZN16Adafruit_SSD13069drawPixelEsst+0x54>
    break;
  case 2:
    x = _width - x - 1;
   d4d24:	6a29      	ldr	r1, [r5, #32]
    y = _height - y - 1;
   d4d26:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  case 1:
    ssd1306_swap(x, y);
    x = _width - x - 1;
    break;
  case 2:
    x = _width - x - 1;
   d4d28:	3901      	subs	r1, #1
    y = _height - y - 1;
   d4d2a:	3a01      	subs	r2, #1
  case 1:
    ssd1306_swap(x, y);
    x = _width - x - 1;
    break;
  case 2:
    x = _width - x - 1;
   d4d2c:	1b8e      	subs	r6, r1, r6
    y = _height - y - 1;
   d4d2e:	1b14      	subs	r4, r2, r4
  case 1:
    ssd1306_swap(x, y);
    x = _width - x - 1;
    break;
  case 2:
    x = _width - x - 1;
   d4d30:	b236      	sxth	r6, r6
    y = _height - y - 1;
   d4d32:	b224      	sxth	r4, r4
   d4d34:	e004      	b.n	d4d40 <_ZN16Adafruit_SSD13069drawPixelEsst+0x54>
    break;
  case 3:
    ssd1306_swap(x, y);
    y = _height - y - 1;
   d4d36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d4d38:	3b01      	subs	r3, #1
   d4d3a:	1b9b      	subs	r3, r3, r6
   d4d3c:	4626      	mov	r6, r4
   d4d3e:	b21c      	sxth	r4, r3
    break;
  }

  // x is which column
    switch (color)
   d4d40:	2f01      	cmp	r7, #1
   d4d42:	d003      	beq.n	d4d4c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d4d44:	d310      	bcc.n	d4d68 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   d4d46:	2f02      	cmp	r7, #2
   d4d48:	d01f      	beq.n	d4d8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d4d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
      case WHITE:   buffer[x+ (y/8)*_width] |=  (1 << (y&7)); break;
   d4d4c:	6a2b      	ldr	r3, [r5, #32]
   d4d4e:	2108      	movs	r1, #8
   d4d50:	fb94 f1f1 	sdiv	r1, r4, r1
   d4d54:	fb03 6601 	mla	r6, r3, r1, r6
   d4d58:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d4d5a:	f004 0407 	and.w	r4, r4, #7
   d4d5e:	5d8b      	ldrb	r3, [r1, r6]
   d4d60:	40a7      	lsls	r7, r4
   d4d62:	431f      	orrs	r7, r3
   d4d64:	558f      	strb	r7, [r1, r6]
   d4d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      case BLACK:   buffer[x+ (y/8)*_width] &= ~(1 << (y&7)); break;
   d4d68:	6a29      	ldr	r1, [r5, #32]
   d4d6a:	6b28      	ldr	r0, [r5, #48]	; 0x30
   d4d6c:	2308      	movs	r3, #8
   d4d6e:	fb94 f3f3 	sdiv	r3, r4, r3
   d4d72:	fb01 6603 	mla	r6, r1, r3, r6
   d4d76:	f004 0407 	and.w	r4, r4, #7
   d4d7a:	5d83      	ldrb	r3, [r0, r6]
   d4d7c:	2101      	movs	r1, #1
   d4d7e:	fa01 f404 	lsl.w	r4, r1, r4
   d4d82:	ea23 0404 	bic.w	r4, r3, r4
   d4d86:	5584      	strb	r4, [r0, r6]
   d4d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      case INVERSE: buffer[x+ (y/8)*_width] ^=  (1 << (y&7)); break;
   d4d8a:	6a29      	ldr	r1, [r5, #32]
   d4d8c:	2308      	movs	r3, #8
   d4d8e:	fb94 f3f3 	sdiv	r3, r4, r3
   d4d92:	fb01 6603 	mla	r6, r1, r3, r6
   d4d96:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d4d98:	f004 0407 	and.w	r4, r4, #7
   d4d9c:	5d8b      	ldrb	r3, [r1, r6]
   d4d9e:	2201      	movs	r2, #1
   d4da0:	fa02 f404 	lsl.w	r4, r2, r4
   d4da4:	405c      	eors	r4, r3
   d4da6:	558c      	strb	r4, [r1, r6]
   d4da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4dac <_ZN16Adafruit_SSD1306C1Ejja>:
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(size_t width, size_t height, int8_t reset) : Adafruit_GFX(width, height), _width(width), _height(height) {
   d4dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4db0:	4604      	mov	r4, r0
   d4db2:	460f      	mov	r7, r1
   d4db4:	4615      	mov	r5, r2
   d4db6:	b209      	sxth	r1, r1
   d4db8:	b212      	sxth	r2, r2
   d4dba:	2600      	movs	r6, #0
   d4dbc:	4698      	mov	r8, r3
   d4dbe:	f7ff fba3 	bl	d4508 <_ZN12Adafruit_GFXC1Ess>
   d4dc2:	22ff      	movs	r2, #255	; 0xff
   d4dc4:	4b11      	ldr	r3, [pc, #68]	; (d4e0c <_ZN16Adafruit_SSD1306C1Ejja+0x60>)
   d4dc6:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
  rst = reset;

  buffer = new uint8_t[_width * _height / 8];
   d4dc8:	fb05 f007 	mul.w	r0, r5, r7
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(size_t width, size_t height, int8_t reset) : Adafruit_GFX(width, height), _width(width), _height(height) {
   d4dcc:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  sclk = dc = cs = sid = -1;
   d4dd0:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
   d4dd4:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
   d4dd8:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(size_t width, size_t height, int8_t reset) : Adafruit_GFX(width, height), _width(width), _height(height) {
   d4ddc:	6227      	str	r7, [r4, #32]
   d4dde:	6265      	str	r5, [r4, #36]	; 0x24
   d4de0:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
   d4de4:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
   d4de8:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
  sclk = dc = cs = sid = -1;
  rst = reset;
   d4dec:	f884 802d 	strb.w	r8, [r4, #45]	; 0x2d

  buffer = new uint8_t[_width * _height / 8];
   d4df0:	08c0      	lsrs	r0, r0, #3
   d4df2:	f7ff f950 	bl	d4096 <_Znaj>
  memset(buffer, 0, _width * _height / 8);
   d4df6:	6a22      	ldr	r2, [r4, #32]
   d4df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(size_t width, size_t height, int8_t reset) : Adafruit_GFX(width, height), _width(width), _height(height) {
  sclk = dc = cs = sid = -1;
  rst = reset;

  buffer = new uint8_t[_width * _height / 8];
   d4dfa:	6320      	str	r0, [r4, #48]	; 0x30
  memset(buffer, 0, _width * _height / 8);
   d4dfc:	435a      	muls	r2, r3
   d4dfe:	08d2      	lsrs	r2, r2, #3
   d4e00:	4631      	mov	r1, r6
   d4e02:	f002 f940 	bl	d7086 <memset>
}
   d4e06:	4620      	mov	r0, r4
   d4e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4e0c:	000d766c 	.word	0x000d766c

000d4e10 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (_width*_height/8));
   d4e10:	6a02      	ldr	r2, [r0, #32]
   d4e12:	6a43      	ldr	r3, [r0, #36]	; 0x24
   d4e14:	6b00      	ldr	r0, [r0, #48]	; 0x30
   d4e16:	435a      	muls	r2, r3
   d4e18:	08d2      	lsrs	r2, r2, #3
   d4e1a:	2100      	movs	r1, #0
   d4e1c:	f002 b933 	b.w	d7086 <memset>

000d4e20 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d4e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  if(hwSPI) {
   d4e22:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (_width*_height/8));
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d4e26:	4605      	mov	r5, r0
   d4e28:	460f      	mov	r7, r1

  if(hwSPI) {
   d4e2a:	b123      	cbz	r3, d4e36 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x16>
    (void)SPI.transfer(d);
   d4e2c:	4810      	ldr	r0, [pc, #64]	; (d4e70 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x50>)
      else        digitalWrite(sid, LOW);
      digitalWrite(sclk, HIGH);
#endif
    }
  }
}
   d4e2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {

  if(hwSPI) {
    (void)SPI.transfer(d);
   d4e32:	f000 bcb5 	b.w	d57a0 <_ZN8SPIClass8transferEh>
   d4e36:	2608      	movs	r6, #8
   d4e38:	2480      	movs	r4, #128	; 0x80
      *clkport &= ~clkpinmask;
      if(d & bit) *mosiport |=  mosipinmask;
      else        *mosiport &= ~mosipinmask;
      *clkport |=  clkpinmask;
#else
      digitalWrite(sclk, LOW);
   d4e3a:	f995 002b 	ldrsb.w	r0, [r5, #43]	; 0x2b
   d4e3e:	2100      	movs	r1, #0
   d4e40:	b280      	uxth	r0, r0
   d4e42:	f001 fa44 	bl	d62ce <digitalWrite>
   d4e46:	f995 002a 	ldrsb.w	r0, [r5, #42]	; 0x2a
      if(d & bit) digitalWrite(sid, HIGH);
   d4e4a:	ea17 0104 	ands.w	r1, r7, r4
   d4e4e:	bf18      	it	ne
   d4e50:	2101      	movne	r1, #1
      else        digitalWrite(sid, LOW);
   d4e52:	b280      	uxth	r0, r0
   d4e54:	f001 fa3b 	bl	d62ce <digitalWrite>
      digitalWrite(sclk, HIGH);
   d4e58:	f995 002b 	ldrsb.w	r0, [r5, #43]	; 0x2b
   d4e5c:	2101      	movs	r1, #1
   d4e5e:	b280      	uxth	r0, r0
   d4e60:	f001 fa35 	bl	d62ce <digitalWrite>
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {

  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d4e64:	3e01      	subs	r6, #1
   d4e66:	ea4f 0454 	mov.w	r4, r4, lsr #1
   d4e6a:	d1e6      	bne.n	d4e3a <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
      else        digitalWrite(sid, LOW);
      digitalWrite(sclk, HIGH);
#endif
    }
  }
}
   d4e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4e6e:	bf00      	nop
   d4e70:	2003e714 	.word	0x2003e714

000d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
   d4e74:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4e76:	f990 302a 	ldrsb.w	r3, [r0, #42]	; 0x2a
   d4e7a:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
   d4e7c:	4604      	mov	r4, r0
   d4e7e:	460d      	mov	r5, r1
  if (sid != -1)
   d4e80:	d01d      	beq.n	d4ebe <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
    *dcport &= ~dcpinmask;
    *csport &= ~cspinmask;
#else
    digitalWrite(cs, HIGH);
   d4e82:	f990 002e 	ldrsb.w	r0, [r0, #46]	; 0x2e
   d4e86:	2101      	movs	r1, #1
   d4e88:	b280      	uxth	r0, r0
   d4e8a:	f001 fa20 	bl	d62ce <digitalWrite>
    digitalWrite(dc, LOW);
   d4e8e:	f994 002c 	ldrsb.w	r0, [r4, #44]	; 0x2c
   d4e92:	2100      	movs	r1, #0
   d4e94:	b280      	uxth	r0, r0
   d4e96:	f001 fa1a 	bl	d62ce <digitalWrite>
    digitalWrite(cs, LOW);
   d4e9a:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d4e9e:	2100      	movs	r1, #0
   d4ea0:	b280      	uxth	r0, r0
   d4ea2:	f001 fa14 	bl	d62ce <digitalWrite>
#endif
    fastSPIwrite(c);
   d4ea6:	4629      	mov	r1, r5
   d4ea8:	4620      	mov	r0, r4
   d4eaa:	f7ff ffb9 	bl	d4e20 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
#else
    digitalWrite(cs, HIGH);
   d4eae:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d4eb2:	2101      	movs	r1, #1
   d4eb4:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    fastSPIwrite(c);
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
#else
    digitalWrite(cs, HIGH);
   d4eba:	f001 ba08 	b.w	d62ce <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d4ebe:	f001 fa59 	bl	d6374 <_Z19__fetch_global_Wirev>
   d4ec2:	f994 1028 	ldrsb.w	r1, [r4, #40]	; 0x28
   d4ec6:	f001 f82d 	bl	d5f24 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4eca:	f001 fa53 	bl	d6374 <_Z19__fetch_global_Wirev>
   d4ece:	6803      	ldr	r3, [r0, #0]
   d4ed0:	2100      	movs	r1, #0
   d4ed2:	689b      	ldr	r3, [r3, #8]
   d4ed4:	4798      	blx	r3
    Wire.write(c);
   d4ed6:	f001 fa4d 	bl	d6374 <_Z19__fetch_global_Wirev>
   d4eda:	6803      	ldr	r3, [r0, #0]
   d4edc:	4629      	mov	r1, r5
   d4ede:	689b      	ldr	r3, [r3, #8]
   d4ee0:	4798      	blx	r3
    Wire.endTransmission();
   d4ee2:	f001 fa47 	bl	d6374 <_Z19__fetch_global_Wirev>
  }
}
   d4ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d4eea:	f001 b822 	b.w	d5f32 <_ZN7TwoWire15endTransmissionEv>
	...

000d4ef0 <_ZN16Adafruit_SSD13065beginEhhb>:
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}


void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
   d4ef0:	b570      	push	{r4, r5, r6, lr}
   d4ef2:	4604      	mov	r4, r0
   d4ef4:	461e      	mov	r6, r3
  _vccstate = vccstate;
   d4ef6:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4efa:	f990 302a 	ldrsb.w	r3, [r0, #42]	; 0x2a
}


void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d4efe:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28

  // set pin directions
  if (sid != -1){
   d4f02:	3301      	adds	r3, #1
  buffer = new uint8_t[_width * _height / 8];
  memset(buffer, 0, _width * _height / 8);
}


void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset) {
   d4f04:	460d      	mov	r5, r1
  _vccstate = vccstate;
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4f06:	d025      	beq.n	d4f54 <_ZN16Adafruit_SSD13065beginEhhb+0x64>
    pinMode(dc, OUTPUT);
   d4f08:	f990 002c 	ldrsb.w	r0, [r0, #44]	; 0x2c
   d4f0c:	2101      	movs	r1, #1
   d4f0e:	b280      	uxth	r0, r0
   d4f10:	f001 f9cc 	bl	d62ac <pinMode>
    pinMode(cs, OUTPUT);
   d4f14:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d4f18:	2101      	movs	r1, #1
   d4f1a:	b280      	uxth	r0, r0
   d4f1c:	f001 f9c6 	bl	d62ac <pinMode>
    csport      = portOutputRegister(digitalPinToPort(cs));
    cspinmask   = digitalPinToBitMask(cs);
    dcport      = portOutputRegister(digitalPinToPort(dc));
    dcpinmask   = digitalPinToBitMask(dc);
#endif
    if (!hwSPI){
   d4f20:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   d4f24:	b95b      	cbnz	r3, d4f3e <_ZN16Adafruit_SSD13065beginEhhb+0x4e>
      // set pins for software-SPI
      pinMode(sid, OUTPUT);
   d4f26:	f994 002a 	ldrsb.w	r0, [r4, #42]	; 0x2a
   d4f2a:	2101      	movs	r1, #1
   d4f2c:	b280      	uxth	r0, r0
   d4f2e:	f001 f9bd 	bl	d62ac <pinMode>
      pinMode(sclk, OUTPUT);
   d4f32:	f994 002b 	ldrsb.w	r0, [r4, #43]	; 0x2b
   d4f36:	2101      	movs	r1, #1
   d4f38:	b280      	uxth	r0, r0
   d4f3a:	f001 f9b7 	bl	d62ac <pinMode>
      clkpinmask  = digitalPinToBitMask(sclk);
      mosiport    = portOutputRegister(digitalPinToPort(sid));
      mosipinmask = digitalPinToBitMask(sid);
#endif
      }
    if (hwSPI){
   d4f3e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   d4f42:	b15b      	cbz	r3, d4f5c <_ZN16Adafruit_SSD13065beginEhhb+0x6c>
      SPI.begin();
   d4f44:	486b      	ldr	r0, [pc, #428]	; (d50f4 <_ZN16Adafruit_SSD13065beginEhhb+0x204>)
   d4f46:	f000 fbcb 	bl	d56e0 <_ZN8SPIClass5beginEv>
#ifdef SPI_HAS_TRANSACTION
      SPI.beginTransaction(SPISettings(8000000, MSBFIRST, SPI_MODE0));
#else
      SPI.setClockDivider (4);
   d4f4a:	2104      	movs	r1, #4
   d4f4c:	4869      	ldr	r0, [pc, #420]	; (d50f4 <_ZN16Adafruit_SSD13065beginEhhb+0x204>)
   d4f4e:	f000 fc13 	bl	d5778 <_ZN8SPIClass15setClockDividerEh>
   d4f52:	e003      	b.n	d4f5c <_ZN16Adafruit_SSD13065beginEhhb+0x6c>
    }
  }
  else
  {
    // I2C Init
    Wire.begin();
   d4f54:	f001 fa0e 	bl	d6374 <_Z19__fetch_global_Wirev>
   d4f58:	f000 ffda 	bl	d5f10 <_ZN7TwoWire5beginEv>
    // Force 400 KHz I2C, rawr! (Uses pins 20, 21 for SDA, SCL)
    TWI1->TWI_CWGR = 0;
    TWI1->TWI_CWGR = ((VARIANT_MCK / (2 * 400000)) - 4) * 0x101;
#endif
  }
  if ((reset) && (rst >= 0)) {
   d4f5c:	b1fe      	cbz	r6, d4f9e <_ZN16Adafruit_SSD13065beginEhhb+0xae>
   d4f5e:	f994 002d 	ldrsb.w	r0, [r4, #45]	; 0x2d
   d4f62:	2800      	cmp	r0, #0
   d4f64:	db1b      	blt.n	d4f9e <_ZN16Adafruit_SSD13065beginEhhb+0xae>
    // Setup reset pin direction (used by both SPI and I2C)
    pinMode(rst, OUTPUT);
   d4f66:	2101      	movs	r1, #1
   d4f68:	b280      	uxth	r0, r0
   d4f6a:	f001 f99f 	bl	d62ac <pinMode>
    digitalWrite(rst, HIGH);
   d4f6e:	f994 002d 	ldrsb.w	r0, [r4, #45]	; 0x2d
   d4f72:	2101      	movs	r1, #1
   d4f74:	b280      	uxth	r0, r0
   d4f76:	f001 f9aa 	bl	d62ce <digitalWrite>
    // VDD (3.3V) goes high at start, lets just chill for a ms
    delay(1);
   d4f7a:	2001      	movs	r0, #1
   d4f7c:	f000 fd84 	bl	d5a88 <delay>
    // bring reset low
    digitalWrite(rst, LOW);
   d4f80:	f994 002d 	ldrsb.w	r0, [r4, #45]	; 0x2d
   d4f84:	2100      	movs	r1, #0
   d4f86:	b280      	uxth	r0, r0
   d4f88:	f001 f9a1 	bl	d62ce <digitalWrite>
    // wait 10ms
    delay(10);
   d4f8c:	200a      	movs	r0, #10
   d4f8e:	f000 fd7b 	bl	d5a88 <delay>
    // bring out of reset
    digitalWrite(rst, HIGH);
   d4f92:	f994 002d 	ldrsb.w	r0, [r4, #45]	; 0x2d
   d4f96:	2101      	movs	r1, #1
   d4f98:	b280      	uxth	r0, r0
   d4f9a:	f001 f998 	bl	d62ce <digitalWrite>
    // turn on VCC (9V?)
  }

  // Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4f9e:	21ae      	movs	r1, #174	; 0xae
   d4fa0:	4620      	mov	r0, r4
   d4fa2:	f7ff ff67 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4fa6:	21d5      	movs	r1, #213	; 0xd5
   d4fa8:	4620      	mov	r0, r4
   d4faa:	f7ff ff63 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4fae:	2180      	movs	r1, #128	; 0x80
   d4fb0:	4620      	mov	r0, r4
   d4fb2:	f7ff ff5f 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4fb6:	21a8      	movs	r1, #168	; 0xa8
   d4fb8:	4620      	mov	r0, r4
   d4fba:	f7ff ff5b 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(_height - 1);
   d4fbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
   d4fc0:	3901      	subs	r1, #1
   d4fc2:	b2c9      	uxtb	r1, r1
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	f7ff ff55 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4fca:	21d3      	movs	r1, #211	; 0xd3
   d4fcc:	4620      	mov	r0, r4
   d4fce:	f7ff ff51 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x0);                                   // no offset
   d4fd2:	2100      	movs	r1, #0
   d4fd4:	4620      	mov	r0, r4
   d4fd6:	f7ff ff4d 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4fda:	2140      	movs	r1, #64	; 0x40
   d4fdc:	4620      	mov	r0, r4
   d4fde:	f7ff ff49 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4fe2:	218d      	movs	r1, #141	; 0x8d
   d4fe4:	4620      	mov	r0, r4
   d4fe6:	f7ff ff45 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (vccstate == SSD1306_EXTERNALVCC)
   d4fea:	2d01      	cmp	r5, #1
    { ssd1306_command(0x10); }
   d4fec:	bf0c      	ite	eq
   d4fee:	2110      	moveq	r1, #16
  else
    { ssd1306_command(0x14); }
   d4ff0:	2114      	movne	r1, #20
   d4ff2:	4620      	mov	r0, r4
   d4ff4:	f7ff ff3e 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4ff8:	2120      	movs	r1, #32
   d4ffa:	4620      	mov	r0, r4
   d4ffc:	f7ff ff3a 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d5000:	2100      	movs	r1, #0
   d5002:	4620      	mov	r0, r4
   d5004:	f7ff ff36 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d5008:	21a1      	movs	r1, #161	; 0xa1
   d500a:	4620      	mov	r0, r4
   d500c:	f7ff ff32 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_COMSCANDEC);
   d5010:	21c8      	movs	r1, #200	; 0xc8
   d5012:	4620      	mov	r0, r4
   d5014:	f7ff ff2e 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (_width == 128 && _height == 32) {
   d5018:	6a23      	ldr	r3, [r4, #32]
   d501a:	2b80      	cmp	r3, #128	; 0x80
   d501c:	d112      	bne.n	d5044 <_ZN16Adafruit_SSD13065beginEhhb+0x154>
   d501e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5020:	2b20      	cmp	r3, #32
   d5022:	d10f      	bne.n	d5044 <_ZN16Adafruit_SSD13065beginEhhb+0x154>
	  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5024:	21da      	movs	r1, #218	; 0xda
   d5026:	4620      	mov	r0, r4
   d5028:	f7ff ff24 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(0x02);
   d502c:	2102      	movs	r1, #2
   d502e:	4620      	mov	r0, r4
   d5030:	f7ff ff20 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5034:	2181      	movs	r1, #129	; 0x81
   d5036:	4620      	mov	r0, r4
   d5038:	f7ff ff1c 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(0x8F);
   d503c:	218f      	movs	r1, #143	; 0x8f
   d503e:	4620      	mov	r0, r4
   d5040:	f7ff ff18 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }

  if (_width == 128 && _height == 64) {
   d5044:	6a23      	ldr	r3, [r4, #32]
   d5046:	2b80      	cmp	r3, #128	; 0x80
   d5048:	d115      	bne.n	d5076 <_ZN16Adafruit_SSD13065beginEhhb+0x186>
   d504a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d504c:	2b40      	cmp	r3, #64	; 0x40
   d504e:	d112      	bne.n	d5076 <_ZN16Adafruit_SSD13065beginEhhb+0x186>
	  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5050:	21da      	movs	r1, #218	; 0xda
   d5052:	4620      	mov	r0, r4
   d5054:	f7ff ff0e 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(0x12);
   d5058:	2112      	movs	r1, #18
   d505a:	4620      	mov	r0, r4
   d505c:	f7ff ff0a 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5060:	2181      	movs	r1, #129	; 0x81
   d5062:	4620      	mov	r0, r4
   d5064:	f7ff ff06 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  if (vccstate == SSD1306_EXTERNALVCC)
   d5068:	2d01      	cmp	r5, #1
		{ ssd1306_command(0x9F); }
   d506a:	bf0c      	ite	eq
   d506c:	219f      	moveq	r1, #159	; 0x9f
	  else
		{ ssd1306_command(0xCF); }
   d506e:	21cf      	movne	r1, #207	; 0xcf
   d5070:	4620      	mov	r0, r4
   d5072:	f7ff feff 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }

  if (_width == 96 && _height == 16) {
   d5076:	6a23      	ldr	r3, [r4, #32]
   d5078:	2b60      	cmp	r3, #96	; 0x60
   d507a:	d115      	bne.n	d50a8 <_ZN16Adafruit_SSD13065beginEhhb+0x1b8>
   d507c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d507e:	2e10      	cmp	r6, #16
   d5080:	d112      	bne.n	d50a8 <_ZN16Adafruit_SSD13065beginEhhb+0x1b8>
	  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5082:	21da      	movs	r1, #218	; 0xda
   d5084:	4620      	mov	r0, r4
   d5086:	f7ff fef5 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(0x2);   //ada x12
   d508a:	2102      	movs	r1, #2
   d508c:	4620      	mov	r0, r4
   d508e:	f7ff fef1 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5092:	2181      	movs	r1, #129	; 0x81
   d5094:	4620      	mov	r0, r4
   d5096:	f7ff feed 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	  if (vccstate == SSD1306_EXTERNALVCC)
   d509a:	2d01      	cmp	r5, #1
		{ ssd1306_command(0x10); }
   d509c:	bf0c      	ite	eq
   d509e:	4631      	moveq	r1, r6
	  else
		{ ssd1306_command(0xAF); }
   d50a0:	21af      	movne	r1, #175	; 0xaf
   d50a2:	4620      	mov	r0, r4
   d50a4:	f7ff fee6 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d50a8:	21d9      	movs	r1, #217	; 0xd9
   d50aa:	4620      	mov	r0, r4
   d50ac:	f7ff fee2 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (vccstate == SSD1306_EXTERNALVCC)
   d50b0:	2d01      	cmp	r5, #1
    { ssd1306_command(0x22); }
   d50b2:	bf0c      	ite	eq
   d50b4:	2122      	moveq	r1, #34	; 0x22
  else
    { ssd1306_command(0xF1); }
   d50b6:	21f1      	movne	r1, #241	; 0xf1
   d50b8:	4620      	mov	r0, r4
   d50ba:	f7ff fedb 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d50be:	4620      	mov	r0, r4
   d50c0:	21db      	movs	r1, #219	; 0xdb
   d50c2:	f7ff fed7 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x40);
   d50c6:	4620      	mov	r0, r4
   d50c8:	2140      	movs	r1, #64	; 0x40
   d50ca:	f7ff fed3 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d50ce:	4620      	mov	r0, r4
   d50d0:	21a4      	movs	r1, #164	; 0xa4
   d50d2:	f7ff fecf 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d50d6:	4620      	mov	r0, r4
   d50d8:	21a6      	movs	r1, #166	; 0xa6
   d50da:	f7ff fecb 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
   d50de:	4620      	mov	r0, r4
   d50e0:	212e      	movs	r1, #46	; 0x2e
   d50e2:	f7ff fec7 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d50e6:	4620      	mov	r0, r4
   d50e8:	21af      	movs	r1, #175	; 0xaf
}
   d50ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d50ee:	f7ff bec1 	b.w	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
   d50f2:	bf00      	nop
   d50f4:	2003e714 	.word	0x2003e714

000d50f8 <_ZN16Adafruit_SSD13067displayEv>:
  // it is useful to dim the display
  ssd1306_command(SSD1306_SETCONTRAST);
  ssd1306_command(contrast);
}

void Adafruit_SSD1306::display(void) {
   d50f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d50fa:	2121      	movs	r1, #33	; 0x21
  // it is useful to dim the display
  ssd1306_command(SSD1306_SETCONTRAST);
  ssd1306_command(contrast);
}

void Adafruit_SSD1306::display(void) {
   d50fc:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d50fe:	f7ff feb9 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d5102:	2100      	movs	r1, #0
   d5104:	4620      	mov	r0, r4
   d5106:	f7ff feb5 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(_width-1); // Column end address (127 = reset)
   d510a:	6a21      	ldr	r1, [r4, #32]
   d510c:	3901      	subs	r1, #1
   d510e:	b2c9      	uxtb	r1, r1
   d5110:	4620      	mov	r0, r4
   d5112:	f7ff feaf 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d5116:	2122      	movs	r1, #34	; 0x22
   d5118:	4620      	mov	r0, r4
   d511a:	f7ff feab 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d511e:	2100      	movs	r1, #0
   d5120:	4620      	mov	r0, r4
   d5122:	f7ff fea7 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (_height == 64) {
   d5126:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5128:	2b40      	cmp	r3, #64	; 0x40
   d512a:	d103      	bne.n	d5134 <_ZN16Adafruit_SSD13067displayEv+0x3c>
    ssd1306_command(7); // Page end address
   d512c:	2107      	movs	r1, #7
   d512e:	4620      	mov	r0, r4
   d5130:	f7ff fea0 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }
  if (_height == 32) {
   d5134:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5136:	2b20      	cmp	r3, #32
   d5138:	d103      	bne.n	d5142 <_ZN16Adafruit_SSD13067displayEv+0x4a>
    ssd1306_command(3); // Page end address
   d513a:	2103      	movs	r1, #3
   d513c:	4620      	mov	r0, r4
   d513e:	f7ff fe99 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }
  if (_height == 16) {
   d5142:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5144:	2b10      	cmp	r3, #16
   d5146:	d103      	bne.n	d5150 <_ZN16Adafruit_SSD13067displayEv+0x58>
    ssd1306_command(1); // Page end address
   d5148:	2101      	movs	r1, #1
   d514a:	4620      	mov	r0, r4
   d514c:	f7ff fe92 	bl	d4e74 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  }

  if (sid != -1)
   d5150:	f994 302a 	ldrsb.w	r3, [r4, #42]	; 0x2a
   d5154:	3301      	adds	r3, #1
   d5156:	d101      	bne.n	d515c <_ZN16Adafruit_SSD13067displayEv+0x64>
   d5158:	2500      	movs	r5, #0
   d515a:	e03b      	b.n	d51d4 <_ZN16Adafruit_SSD13067displayEv+0xdc>
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
    *dcport |= dcpinmask;
    *csport &= ~cspinmask;
#else
    digitalWrite(cs, HIGH);
   d515c:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5160:	2101      	movs	r1, #1
   d5162:	b280      	uxth	r0, r0
   d5164:	f001 f8b3 	bl	d62ce <digitalWrite>
    digitalWrite(dc, HIGH);
   d5168:	f994 002c 	ldrsb.w	r0, [r4, #44]	; 0x2c
   d516c:	2101      	movs	r1, #1
   d516e:	b280      	uxth	r0, r0
   d5170:	f001 f8ad 	bl	d62ce <digitalWrite>
    digitalWrite(cs, LOW);
   d5174:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d5178:	2100      	movs	r1, #0
   d517a:	b280      	uxth	r0, r0
   d517c:	f001 f8a7 	bl	d62ce <digitalWrite>
   d5180:	2500      	movs	r5, #0
#endif

    for (uint16_t i=0; i<(_width*_height/8); i++) {
   d5182:	6a21      	ldr	r1, [r4, #32]
   d5184:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5186:	b2aa      	uxth	r2, r5
   d5188:	434b      	muls	r3, r1
   d518a:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   d518e:	f105 0501 	add.w	r5, r5, #1
   d5192:	d205      	bcs.n	d51a0 <_ZN16Adafruit_SSD13067displayEv+0xa8>
      fastSPIwrite(buffer[i]);
   d5194:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d5196:	4620      	mov	r0, r4
   d5198:	5c99      	ldrb	r1, [r3, r2]
   d519a:	f7ff fe41 	bl	d4e20 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
#endif

    for (uint16_t i=0; i<(_width*_height/8); i++) {
   d519e:	e7f0      	b.n	d5182 <_ZN16Adafruit_SSD13067displayEv+0x8a>
      fastSPIwrite(buffer[i]);
    }
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
#else
    digitalWrite(cs, HIGH);
   d51a0:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
   d51a4:	2101      	movs	r1, #1
   d51a6:	b280      	uxth	r0, r0
    }
#ifdef TWBR
    TWBR = twbrbackup;
#endif
  }
}
   d51a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      fastSPIwrite(buffer[i]);
    }
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
#else
    digitalWrite(cs, HIGH);
   d51ac:	f001 b88f 	b.w	d62ce <digitalWrite>
    for (uint16_t i=0; i<(_width*_height/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      WIRE_WRITE(0x40);
      for (uint8_t x=0; x<16; x++) {
        WIRE_WRITE(buffer[i]);
   d51b0:	f001 f8e0 	bl	d6374 <_Z19__fetch_global_Wirev>
   d51b4:	19af      	adds	r7, r5, r6
   d51b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
   d51b8:	6803      	ldr	r3, [r0, #0]
   d51ba:	b2bf      	uxth	r7, r7
   d51bc:	689b      	ldr	r3, [r3, #8]
   d51be:	5dd1      	ldrb	r1, [r2, r7]
   d51c0:	3601      	adds	r6, #1
   d51c2:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(_width*_height/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      WIRE_WRITE(0x40);
      for (uint8_t x=0; x<16; x++) {
   d51c4:	2e10      	cmp	r6, #16
   d51c6:	d1f3      	bne.n	d51b0 <_ZN16Adafruit_SSD13067displayEv+0xb8>
   d51c8:	3510      	adds	r5, #16
   d51ca:	b2ad      	uxth	r5, r5
        WIRE_WRITE(buffer[i]);
        i++;
      }
      i--;
      Wire.endTransmission();
   d51cc:	f001 f8d2 	bl	d6374 <_Z19__fetch_global_Wirev>
   d51d0:	f000 feaf 	bl	d5f32 <_ZN7TwoWire15endTransmissionEv>

    //Serial.println(TWBR, DEC);
    //Serial.println(TWSR & 0x3, DEC);

    // I2C
    for (uint16_t i=0; i<(_width*_height/8); i++) {
   d51d4:	6a22      	ldr	r2, [r4, #32]
   d51d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d51d8:	4353      	muls	r3, r2
   d51da:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
   d51de:	d20d      	bcs.n	d51fc <_ZN16Adafruit_SSD13067displayEv+0x104>
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d51e0:	f001 f8c8 	bl	d6374 <_Z19__fetch_global_Wirev>
   d51e4:	f994 1028 	ldrsb.w	r1, [r4, #40]	; 0x28
   d51e8:	f000 fe9c 	bl	d5f24 <_ZN7TwoWire17beginTransmissionEi>
      WIRE_WRITE(0x40);
   d51ec:	f001 f8c2 	bl	d6374 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d51f0:	6803      	ldr	r3, [r0, #0]
   d51f2:	2140      	movs	r1, #64	; 0x40
   d51f4:	689b      	ldr	r3, [r3, #8]
   d51f6:	4798      	blx	r3
   d51f8:	2600      	movs	r6, #0
   d51fa:	e7d9      	b.n	d51b0 <_ZN16Adafruit_SSD13067displayEv+0xb8>
   d51fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d51fe <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d51fe:	f000 b811 	b.w	d5224 <HAL_Pin_Map>
	...

000d5204 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5204:	b508      	push	{r3, lr}
   d5206:	4b02      	ldr	r3, [pc, #8]	; (d5210 <netdb_freeaddrinfo+0xc>)
   d5208:	681b      	ldr	r3, [r3, #0]
   d520a:	689b      	ldr	r3, [r3, #8]
   d520c:	9301      	str	r3, [sp, #4]
   d520e:	bd08      	pop	{r3, pc}
   d5210:	00030268 	.word	0x00030268

000d5214 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5214:	b508      	push	{r3, lr}
   d5216:	4b02      	ldr	r3, [pc, #8]	; (d5220 <netdb_getaddrinfo+0xc>)
   d5218:	681b      	ldr	r3, [r3, #0]
   d521a:	68db      	ldr	r3, [r3, #12]
   d521c:	9301      	str	r3, [sp, #4]
   d521e:	bd08      	pop	{r3, pc}
   d5220:	00030268 	.word	0x00030268

000d5224 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d5224:	b508      	push	{r3, lr}
   d5226:	4b02      	ldr	r3, [pc, #8]	; (d5230 <HAL_Pin_Map+0xc>)
   d5228:	681b      	ldr	r3, [r3, #0]
   d522a:	681b      	ldr	r3, [r3, #0]
   d522c:	9301      	str	r3, [sp, #4]
   d522e:	bd08      	pop	{r3, pc}
   d5230:	0003022c 	.word	0x0003022c

000d5234 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5234:	b508      	push	{r3, lr}
   d5236:	4b02      	ldr	r3, [pc, #8]	; (d5240 <HAL_Validate_Pin_Function+0xc>)
   d5238:	681b      	ldr	r3, [r3, #0]
   d523a:	685b      	ldr	r3, [r3, #4]
   d523c:	9301      	str	r3, [sp, #4]
   d523e:	bd08      	pop	{r3, pc}
   d5240:	0003022c 	.word	0x0003022c

000d5244 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5244:	b508      	push	{r3, lr}
   d5246:	4b02      	ldr	r3, [pc, #8]	; (d5250 <HAL_Pin_Mode+0xc>)
   d5248:	681b      	ldr	r3, [r3, #0]
   d524a:	689b      	ldr	r3, [r3, #8]
   d524c:	9301      	str	r3, [sp, #4]
   d524e:	bd08      	pop	{r3, pc}
   d5250:	0003022c 	.word	0x0003022c

000d5254 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5254:	b508      	push	{r3, lr}
   d5256:	4b02      	ldr	r3, [pc, #8]	; (d5260 <HAL_Get_Pin_Mode+0xc>)
   d5258:	681b      	ldr	r3, [r3, #0]
   d525a:	68db      	ldr	r3, [r3, #12]
   d525c:	9301      	str	r3, [sp, #4]
   d525e:	bd08      	pop	{r3, pc}
   d5260:	0003022c 	.word	0x0003022c

000d5264 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5264:	b508      	push	{r3, lr}
   d5266:	4b02      	ldr	r3, [pc, #8]	; (d5270 <HAL_GPIO_Write+0xc>)
   d5268:	681b      	ldr	r3, [r3, #0]
   d526a:	691b      	ldr	r3, [r3, #16]
   d526c:	9301      	str	r3, [sp, #4]
   d526e:	bd08      	pop	{r3, pc}
   d5270:	0003022c 	.word	0x0003022c

000d5274 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5274:	b508      	push	{r3, lr}
   d5276:	4b02      	ldr	r3, [pc, #8]	; (d5280 <HAL_ADC_Read+0xc>)
   d5278:	681b      	ldr	r3, [r3, #0]
   d527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d527c:	9301      	str	r3, [sp, #4]
   d527e:	bd08      	pop	{r3, pc}
   d5280:	0003022c 	.word	0x0003022c

000d5284 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5284:	b508      	push	{r3, lr}
   d5286:	4b02      	ldr	r3, [pc, #8]	; (d5290 <HAL_SPI_Begin+0xc>)
   d5288:	681b      	ldr	r3, [r3, #0]
   d528a:	681b      	ldr	r3, [r3, #0]
   d528c:	9301      	str	r3, [sp, #4]
   d528e:	bd08      	pop	{r3, pc}
   d5290:	00030230 	.word	0x00030230

000d5294 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5294:	b508      	push	{r3, lr}
   d5296:	4b02      	ldr	r3, [pc, #8]	; (d52a0 <HAL_SPI_Set_Clock_Divider+0xc>)
   d5298:	681b      	ldr	r3, [r3, #0]
   d529a:	691b      	ldr	r3, [r3, #16]
   d529c:	9301      	str	r3, [sp, #4]
   d529e:	bd08      	pop	{r3, pc}
   d52a0:	00030230 	.word	0x00030230

000d52a4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d52a4:	b508      	push	{r3, lr}
   d52a6:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <HAL_SPI_Send_Receive_Data+0xc>)
   d52a8:	681b      	ldr	r3, [r3, #0]
   d52aa:	695b      	ldr	r3, [r3, #20]
   d52ac:	9301      	str	r3, [sp, #4]
   d52ae:	bd08      	pop	{r3, pc}
   d52b0:	00030230 	.word	0x00030230

000d52b4 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d52b4:	b508      	push	{r3, lr}
   d52b6:	4b02      	ldr	r3, [pc, #8]	; (d52c0 <HAL_SPI_Init+0xc>)
   d52b8:	681b      	ldr	r3, [r3, #0]
   d52ba:	69db      	ldr	r3, [r3, #28]
   d52bc:	9301      	str	r3, [sp, #4]
   d52be:	bd08      	pop	{r3, pc}
   d52c0:	00030230 	.word	0x00030230

000d52c4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d52c4:	b508      	push	{r3, lr}
   d52c6:	4b02      	ldr	r3, [pc, #8]	; (d52d0 <HAL_SPI_Is_Enabled+0xc>)
   d52c8:	681b      	ldr	r3, [r3, #0]
   d52ca:	6a1b      	ldr	r3, [r3, #32]
   d52cc:	9301      	str	r3, [sp, #4]
   d52ce:	bd08      	pop	{r3, pc}
   d52d0:	00030230 	.word	0x00030230

000d52d4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d52d4:	b508      	push	{r3, lr}
   d52d6:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <HAL_SPI_Info+0xc>)
   d52d8:	681b      	ldr	r3, [r3, #0]
   d52da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52dc:	9301      	str	r3, [sp, #4]
   d52de:	bd08      	pop	{r3, pc}
   d52e0:	00030230 	.word	0x00030230

000d52e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d52e4:	b508      	push	{r3, lr}
   d52e6:	4b02      	ldr	r3, [pc, #8]	; (d52f0 <HAL_RNG_GetRandomNumber+0xc>)
   d52e8:	681b      	ldr	r3, [r3, #0]
   d52ea:	685b      	ldr	r3, [r3, #4]
   d52ec:	9301      	str	r3, [sp, #4]
   d52ee:	bd08      	pop	{r3, pc}
   d52f0:	00030218 	.word	0x00030218

000d52f4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d52f4:	b508      	push	{r3, lr}
   d52f6:	4b02      	ldr	r3, [pc, #8]	; (d5300 <HAL_Delay_Microseconds+0xc>)
   d52f8:	681b      	ldr	r3, [r3, #0]
   d52fa:	68db      	ldr	r3, [r3, #12]
   d52fc:	9301      	str	r3, [sp, #4]
   d52fe:	bd08      	pop	{r3, pc}
   d5300:	00030218 	.word	0x00030218

000d5304 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5304:	b508      	push	{r3, lr}
   d5306:	4b02      	ldr	r3, [pc, #8]	; (d5310 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	695b      	ldr	r3, [r3, #20]
   d530c:	9301      	str	r3, [sp, #4]
   d530e:	bd08      	pop	{r3, pc}
   d5310:	00030218 	.word	0x00030218

000d5314 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5314:	b508      	push	{r3, lr}
   d5316:	4b02      	ldr	r3, [pc, #8]	; (d5320 <os_thread_is_current+0xc>)
   d5318:	681b      	ldr	r3, [r3, #0]
   d531a:	689b      	ldr	r3, [r3, #8]
   d531c:	9301      	str	r3, [sp, #4]
   d531e:	bd08      	pop	{r3, pc}
   d5320:	00030248 	.word	0x00030248

000d5324 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5324:	b508      	push	{r3, lr}
   d5326:	4b02      	ldr	r3, [pc, #8]	; (d5330 <os_thread_join+0xc>)
   d5328:	681b      	ldr	r3, [r3, #0]
   d532a:	691b      	ldr	r3, [r3, #16]
   d532c:	9301      	str	r3, [sp, #4]
   d532e:	bd08      	pop	{r3, pc}
   d5330:	00030248 	.word	0x00030248

000d5334 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5334:	b508      	push	{r3, lr}
   d5336:	4b02      	ldr	r3, [pc, #8]	; (d5340 <os_thread_cleanup+0xc>)
   d5338:	681b      	ldr	r3, [r3, #0]
   d533a:	695b      	ldr	r3, [r3, #20]
   d533c:	9301      	str	r3, [sp, #4]
   d533e:	bd08      	pop	{r3, pc}
   d5340:	00030248 	.word	0x00030248

000d5344 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5344:	b508      	push	{r3, lr}
   d5346:	4b02      	ldr	r3, [pc, #8]	; (d5350 <os_mutex_create+0xc>)
   d5348:	681b      	ldr	r3, [r3, #0]
   d534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d534c:	9301      	str	r3, [sp, #4]
   d534e:	bd08      	pop	{r3, pc}
   d5350:	00030248 	.word	0x00030248

000d5354 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5354:	b508      	push	{r3, lr}
   d5356:	4b02      	ldr	r3, [pc, #8]	; (d5360 <os_mutex_recursive_create+0xc>)
   d5358:	681b      	ldr	r3, [r3, #0]
   d535a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d535c:	9301      	str	r3, [sp, #4]
   d535e:	bd08      	pop	{r3, pc}
   d5360:	00030248 	.word	0x00030248

000d5364 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b02      	ldr	r3, [pc, #8]	; (d5370 <inet_inet_ntop+0xc>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	695b      	ldr	r3, [r3, #20]
   d536c:	9301      	str	r3, [sp, #4]
   d536e:	bd08      	pop	{r3, pc}
   d5370:	00030264 	.word	0x00030264

000d5374 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5374:	b508      	push	{r3, lr}
   d5376:	4b02      	ldr	r3, [pc, #8]	; (d5380 <HAL_USART_Init+0xc>)
   d5378:	681b      	ldr	r3, [r3, #0]
   d537a:	681b      	ldr	r3, [r3, #0]
   d537c:	9301      	str	r3, [sp, #4]
   d537e:	bd08      	pop	{r3, pc}
   d5380:	0003023c 	.word	0x0003023c

000d5384 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5384:	b508      	push	{r3, lr}
   d5386:	4b02      	ldr	r3, [pc, #8]	; (d5390 <HAL_USART_Write_Data+0xc>)
   d5388:	681b      	ldr	r3, [r3, #0]
   d538a:	68db      	ldr	r3, [r3, #12]
   d538c:	9301      	str	r3, [sp, #4]
   d538e:	bd08      	pop	{r3, pc}
   d5390:	0003023c 	.word	0x0003023c

000d5394 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5394:	b508      	push	{r3, lr}
   d5396:	4b02      	ldr	r3, [pc, #8]	; (d53a0 <HAL_USART_Available_Data+0xc>)
   d5398:	681b      	ldr	r3, [r3, #0]
   d539a:	691b      	ldr	r3, [r3, #16]
   d539c:	9301      	str	r3, [sp, #4]
   d539e:	bd08      	pop	{r3, pc}
   d53a0:	0003023c 	.word	0x0003023c

000d53a4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d53a4:	b508      	push	{r3, lr}
   d53a6:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <HAL_USART_Read_Data+0xc>)
   d53a8:	681b      	ldr	r3, [r3, #0]
   d53aa:	695b      	ldr	r3, [r3, #20]
   d53ac:	9301      	str	r3, [sp, #4]
   d53ae:	bd08      	pop	{r3, pc}
   d53b0:	0003023c 	.word	0x0003023c

000d53b4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <HAL_USART_Peek_Data+0xc>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	699b      	ldr	r3, [r3, #24]
   d53bc:	9301      	str	r3, [sp, #4]
   d53be:	bd08      	pop	{r3, pc}
   d53c0:	0003023c 	.word	0x0003023c

000d53c4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <HAL_USART_Flush_Data+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	69db      	ldr	r3, [r3, #28]
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	0003023c 	.word	0x0003023c

000d53d4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b02      	ldr	r3, [pc, #8]	; (d53e0 <HAL_USART_Is_Enabled+0xc>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	6a1b      	ldr	r3, [r3, #32]
   d53dc:	9301      	str	r3, [sp, #4]
   d53de:	bd08      	pop	{r3, pc}
   d53e0:	0003023c 	.word	0x0003023c

000d53e4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d53e4:	b508      	push	{r3, lr}
   d53e6:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <HAL_USART_Available_Data_For_Write+0xc>)
   d53e8:	681b      	ldr	r3, [r3, #0]
   d53ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d53ec:	9301      	str	r3, [sp, #4]
   d53ee:	bd08      	pop	{r3, pc}
   d53f0:	0003023c 	.word	0x0003023c

000d53f4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <HAL_I2C_Begin+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	68db      	ldr	r3, [r3, #12]
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	00030228 	.word	0x00030228

000d5404 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <HAL_I2C_Begin_Transmission+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	699b      	ldr	r3, [r3, #24]
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	00030228 	.word	0x00030228

000d5414 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <HAL_I2C_End_Transmission+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	69db      	ldr	r3, [r3, #28]
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	00030228 	.word	0x00030228

000d5424 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <HAL_I2C_Write_Data+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	6a1b      	ldr	r3, [r3, #32]
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	00030228 	.word	0x00030228

000d5434 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <HAL_I2C_Available_Data+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030228 	.word	0x00030228

000d5444 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <HAL_I2C_Read_Data+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	00030228 	.word	0x00030228

000d5454 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <HAL_I2C_Peek_Data+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	00030228 	.word	0x00030228

000d5464 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <HAL_I2C_Flush_Data+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	00030228 	.word	0x00030228

000d5474 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <HAL_I2C_Is_Enabled+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	00030228 	.word	0x00030228

000d5484 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <HAL_I2C_Init+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	00030228 	.word	0x00030228

000d5494 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <HAL_USB_USART_Init+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	681b      	ldr	r3, [r3, #0]
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	0003024c 	.word	0x0003024c

000d54a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <HAL_USB_USART_Begin+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	685b      	ldr	r3, [r3, #4]
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	0003024c 	.word	0x0003024c

000d54b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <HAL_USB_USART_Available_Data+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	691b      	ldr	r3, [r3, #16]
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	0003024c 	.word	0x0003024c

000d54c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	695b      	ldr	r3, [r3, #20]
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	0003024c 	.word	0x0003024c

000d54d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <HAL_USB_USART_Receive_Data+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	699b      	ldr	r3, [r3, #24]
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	0003024c 	.word	0x0003024c

000d54e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <HAL_USB_USART_Send_Data+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	69db      	ldr	r3, [r3, #28]
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	0003024c 	.word	0x0003024c

000d54f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <HAL_USB_USART_Flush_Data+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	6a1b      	ldr	r3, [r3, #32]
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	0003024c 	.word	0x0003024c

000d5504 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <panic_+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	00030260 	.word	0x00030260

000d5514 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <set_system_mode+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	685b      	ldr	r3, [r3, #4]
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	00030220 	.word	0x00030220

000d5524 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <system_delay_ms+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	695b      	ldr	r3, [r3, #20]
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	00030220 	.word	0x00030220

000d5534 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b03      	ldr	r3, [pc, #12]	; (d5544 <system_ctrl_set_app_request_handler+0x10>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d553e:	9301      	str	r3, [sp, #4]
   d5540:	bd08      	pop	{r3, pc}
   d5542:	0000      	.short	0x0000
   d5544:	00030220 	.word	0x00030220

000d5548 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b03      	ldr	r3, [pc, #12]	; (d5558 <system_ctrl_set_result+0x10>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5552:	9301      	str	r3, [sp, #4]
   d5554:	bd08      	pop	{r3, pc}
   d5556:	0000      	.short	0x0000
   d5558:	00030220 	.word	0x00030220

000d555c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <network_connect+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	685b      	ldr	r3, [r3, #4]
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	00030240 	.word	0x00030240

000d556c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <network_connecting+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	689b      	ldr	r3, [r3, #8]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	00030240 	.word	0x00030240

000d557c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <network_disconnect+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	68db      	ldr	r3, [r3, #12]
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	00030240 	.word	0x00030240

000d558c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <network_ready+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	691b      	ldr	r3, [r3, #16]
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	00030240 	.word	0x00030240

000d559c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <network_on+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	695b      	ldr	r3, [r3, #20]
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	00030240 	.word	0x00030240

000d55ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <network_off+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	699b      	ldr	r3, [r3, #24]
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	00030240 	.word	0x00030240

000d55bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <network_listen+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	69db      	ldr	r3, [r3, #28]
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	00030240 	.word	0x00030240

000d55cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b02      	ldr	r3, [pc, #8]	; (d55d8 <network_listening+0xc>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	6a1b      	ldr	r3, [r3, #32]
   d55d4:	9301      	str	r3, [sp, #4]
   d55d6:	bd08      	pop	{r3, pc}
   d55d8:	00030240 	.word	0x00030240

000d55dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d55dc:	b508      	push	{r3, lr}
   d55de:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <network_set_listen_timeout+0xc>)
   d55e0:	681b      	ldr	r3, [r3, #0]
   d55e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55e4:	9301      	str	r3, [sp, #4]
   d55e6:	bd08      	pop	{r3, pc}
   d55e8:	00030240 	.word	0x00030240

000d55ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d55ec:	b508      	push	{r3, lr}
   d55ee:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <network_get_listen_timeout+0xc>)
   d55f0:	681b      	ldr	r3, [r3, #0]
   d55f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	bd08      	pop	{r3, pc}
   d55f8:	00030240 	.word	0x00030240

000d55fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b02      	ldr	r3, [pc, #8]	; (d5608 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5604:	9301      	str	r3, [sp, #4]
   d5606:	bd08      	pop	{r3, pc}
   d5608:	00030244 	.word	0x00030244

000d560c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d560c:	b508      	push	{r3, lr}
   d560e:	4b02      	ldr	r3, [pc, #8]	; (d5618 <malloc+0xc>)
   d5610:	681b      	ldr	r3, [r3, #0]
   d5612:	681b      	ldr	r3, [r3, #0]
   d5614:	9301      	str	r3, [sp, #4]
   d5616:	bd08      	pop	{r3, pc}
   d5618:	0003021c 	.word	0x0003021c

000d561c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d561c:	b508      	push	{r3, lr}
   d561e:	4b02      	ldr	r3, [pc, #8]	; (d5628 <free+0xc>)
   d5620:	681b      	ldr	r3, [r3, #0]
   d5622:	685b      	ldr	r3, [r3, #4]
   d5624:	9301      	str	r3, [sp, #4]
   d5626:	bd08      	pop	{r3, pc}
   d5628:	0003021c 	.word	0x0003021c

000d562c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d562c:	2200      	movs	r2, #0
   d562e:	4611      	mov	r1, r2
   d5630:	6840      	ldr	r0, [r0, #4]
   d5632:	f7ff bfcb 	b.w	d55cc <network_listening>

000d5636 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5636:	2200      	movs	r2, #0
   d5638:	4611      	mov	r1, r2
   d563a:	6840      	ldr	r0, [r0, #4]
   d563c:	f7ff bfd6 	b.w	d55ec <network_get_listen_timeout>

000d5640 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5640:	2200      	movs	r2, #0
   d5642:	6840      	ldr	r0, [r0, #4]
   d5644:	f7ff bfca 	b.w	d55dc <network_set_listen_timeout>

000d5648 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5648:	2200      	movs	r2, #0
   d564a:	f081 0101 	eor.w	r1, r1, #1
   d564e:	6840      	ldr	r0, [r0, #4]
   d5650:	f7ff bfb4 	b.w	d55bc <network_listen>

000d5654 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5654:	2300      	movs	r3, #0
   d5656:	461a      	mov	r2, r3
   d5658:	4619      	mov	r1, r3
   d565a:	6840      	ldr	r0, [r0, #4]
   d565c:	f7ff bfa6 	b.w	d55ac <network_off>

000d5660 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5660:	2300      	movs	r3, #0
   d5662:	461a      	mov	r2, r3
   d5664:	4619      	mov	r1, r3
   d5666:	6840      	ldr	r0, [r0, #4]
   d5668:	f7ff bf98 	b.w	d559c <network_on>

000d566c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d566c:	2200      	movs	r2, #0
   d566e:	4611      	mov	r1, r2
   d5670:	6840      	ldr	r0, [r0, #4]
   d5672:	f7ff bf8b 	b.w	d558c <network_ready>

000d5676 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5676:	2200      	movs	r2, #0
   d5678:	4611      	mov	r1, r2
   d567a:	6840      	ldr	r0, [r0, #4]
   d567c:	f7ff bf76 	b.w	d556c <network_connecting>

000d5680 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5680:	2200      	movs	r2, #0
   d5682:	2102      	movs	r1, #2
   d5684:	6840      	ldr	r0, [r0, #4]
   d5686:	f7ff bf79 	b.w	d557c <network_disconnect>

000d568a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d568a:	2300      	movs	r3, #0
   d568c:	461a      	mov	r2, r3
   d568e:	6840      	ldr	r0, [r0, #4]
   d5690:	f7ff bf64 	b.w	d555c <network_connect>

000d5694 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5694:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5696:	2203      	movs	r2, #3
   d5698:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d569a:	4a02      	ldr	r2, [pc, #8]	; (d56a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d569c:	601a      	str	r2, [r3, #0]
   d569e:	4770      	bx	lr
   d56a0:	2003e3cc 	.word	0x2003e3cc
   d56a4:	000d76c4 	.word	0x000d76c4

000d56a8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d56a8:	4770      	bx	lr

000d56aa <_ZN8SPIClassD0Ev>:
   d56aa:	b510      	push	{r4, lr}
   d56ac:	2110      	movs	r1, #16
   d56ae:	4604      	mov	r4, r0
   d56b0:	f000 fe85 	bl	d63be <_ZdlPvj>
   d56b4:	4620      	mov	r0, r4
   d56b6:	bd10      	pop	{r4, pc}

000d56b8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d56b8:	b570      	push	{r4, r5, r6, lr}
   d56ba:	4b08      	ldr	r3, [pc, #32]	; (d56dc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d56bc:	6003      	str	r3, [r0, #0]
   d56be:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d56c0:	2500      	movs	r5, #0
   d56c2:	460e      	mov	r6, r1
   d56c4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d56c8:	f7ff fe3c 	bl	d5344 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d56cc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d56ce:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d56d0:	f7ff fdf0 	bl	d52b4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d56d4:	60a5      	str	r5, [r4, #8]
}
   d56d6:	4620      	mov	r0, r4
   d56d8:	bd70      	pop	{r4, r5, r6, pc}
   d56da:	bf00      	nop
   d56dc:	000d76f8 	.word	0x000d76f8

000d56e0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d56e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d56e4:	7900      	ldrb	r0, [r0, #4]
   d56e6:	f7ff bdcd 	b.w	d5284 <HAL_SPI_Begin>
	...

000d56ec <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d56ec:	4a05      	ldr	r2, [pc, #20]	; (d5704 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
   d56ee:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d56f0:	5c99      	ldrb	r1, [r3, r2]
   d56f2:	4281      	cmp	r1, r0
   d56f4:	d002      	beq.n	d56fc <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
   d56f6:	3301      	adds	r3, #1
   d56f8:	2b08      	cmp	r3, #8
   d56fa:	d1f9      	bne.n	d56f0 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
   d56fc:	1c58      	adds	r0, r3, #1
}
   d56fe:	b2c0      	uxtb	r0, r0
   d5700:	4770      	bx	lr
   d5702:	bf00      	nop
   d5704:	000d7700 	.word	0x000d7700

000d5708 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d5708:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d570a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d570c:	6018      	str	r0, [r3, #0]
   d570e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d5710:	6818      	ldr	r0, [r3, #0]
   d5712:	4288      	cmp	r0, r1
   d5714:	b2e5      	uxtb	r5, r4
   d5716:	d906      	bls.n	d5726 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5718:	3401      	adds	r4, #1
   d571a:	2c08      	cmp	r4, #8
   d571c:	d002      	beq.n	d5724 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d571e:	0840      	lsrs	r0, r0, #1
   d5720:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d5722:	e7f5      	b.n	d5710 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5724:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5728:	5d5b      	ldrb	r3, [r3, r5]
   d572a:	7013      	strb	r3, [r2, #0]
   d572c:	bd30      	pop	{r4, r5, pc}
   d572e:	bf00      	nop
   d5730:	000d7700 	.word	0x000d7700

000d5734 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5734:	b570      	push	{r4, r5, r6, lr}
   d5736:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   d5738:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   d573a:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d573e:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d5740:	2214      	movs	r2, #20
   d5742:	2100      	movs	r1, #0
   d5744:	a803      	add	r0, sp, #12
   d5746:	f001 fc9e 	bl	d7086 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d574a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d574c:	a903      	add	r1, sp, #12
   d574e:	4630      	mov	r0, r6
   d5750:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d5752:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   d5756:	f7ff fdbd 	bl	d52d4 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   d575a:	ab02      	add	r3, sp, #8
   d575c:	f10d 0207 	add.w	r2, sp, #7
   d5760:	4629      	mov	r1, r5
   d5762:	9804      	ldr	r0, [sp, #16]
   d5764:	f7ff ffd0 	bl	d5708 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5768:	7920      	ldrb	r0, [r4, #4]
   d576a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d576e:	f7ff fd91 	bl	d5294 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   d5772:	9802      	ldr	r0, [sp, #8]
   d5774:	b008      	add	sp, #32
   d5776:	bd70      	pop	{r4, r5, r6, pc}

000d5778 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5778:	b538      	push	{r3, r4, r5, lr}
   d577a:	4604      	mov	r4, r0
   d577c:	4608      	mov	r0, r1
    if (dividerReference)
   d577e:	68a5      	ldr	r5, [r4, #8]
   d5780:	b14d      	cbz	r5, d5796 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
   d5782:	f7ff ffb3 	bl	d56ec <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d5786:	2201      	movs	r2, #1
   d5788:	fa25 f100 	lsr.w	r1, r5, r0
   d578c:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
   d578e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d5792:	f7ff bfcf 	b.w	d5734 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5796:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d579c:	f7ff bd7a 	b.w	d5294 <HAL_SPI_Set_Clock_Divider>

000d57a0 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d57a0:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d57a2:	7900      	ldrb	r0, [r0, #4]
   d57a4:	f7ff fd7e 	bl	d52a4 <HAL_SPI_Send_Receive_Data>
}
   d57a8:	b2c0      	uxtb	r0, r0
   d57aa:	bd08      	pop	{r3, pc}

000d57ac <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d57ac:	7900      	ldrb	r0, [r0, #4]
   d57ae:	f7ff bd89 	b.w	d52c4 <HAL_SPI_Is_Enabled>
	...

000d57b4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d57b4:	4b04      	ldr	r3, [pc, #16]	; (d57c8 <_GLOBAL__sub_I_System+0x14>)
   d57b6:	2000      	movs	r0, #0
   d57b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d57bc:	7018      	strb	r0, [r3, #0]
   d57be:	8058      	strh	r0, [r3, #2]
   d57c0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d57c2:	f7ff bea7 	b.w	d5514 <set_system_mode>
   d57c6:	bf00      	nop
   d57c8:	2003e3d4 	.word	0x2003e3d4

000d57cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d57cc:	4802      	ldr	r0, [pc, #8]	; (d57d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d57ce:	2300      	movs	r3, #0
   d57d0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d57d2:	f7ff bdbf 	b.w	d5354 <os_mutex_recursive_create>
   d57d6:	bf00      	nop
   d57d8:	2003e3dc 	.word	0x2003e3dc

000d57dc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d57dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57de:	4606      	mov	r6, r0
   d57e0:	460d      	mov	r5, r1
   d57e2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d57e4:	2400      	movs	r4, #0
  while (size--) {
   d57e6:	42bd      	cmp	r5, r7
   d57e8:	d00c      	beq.n	d5804 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d57ea:	6833      	ldr	r3, [r6, #0]
   d57ec:	f815 1b01 	ldrb.w	r1, [r5], #1
   d57f0:	689b      	ldr	r3, [r3, #8]
   d57f2:	4630      	mov	r0, r6
   d57f4:	4798      	blx	r3
     if (chunk>=0)
   d57f6:	2800      	cmp	r0, #0
   d57f8:	db01      	blt.n	d57fe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d57fa:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d57fc:	e7f3      	b.n	d57e6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d57fe:	2c00      	cmp	r4, #0
   d5800:	bf08      	it	eq
   d5802:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5804:	4620      	mov	r0, r4
   d5806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5808 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5808:	b570      	push	{r4, r5, r6, lr}
   d580a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d580c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d580e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5810:	b149      	cbz	r1, d5826 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5812:	f001 fc69 	bl	d70e8 <strlen>
   d5816:	682b      	ldr	r3, [r5, #0]
   d5818:	4602      	mov	r2, r0
   d581a:	4621      	mov	r1, r4
   d581c:	4628      	mov	r0, r5
   d581e:	68db      	ldr	r3, [r3, #12]
    }
   d5820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5824:	4718      	bx	r3
    }
   d5826:	bd70      	pop	{r4, r5, r6, pc}

000d5828 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5828:	6803      	ldr	r3, [r0, #0]
   d582a:	689b      	ldr	r3, [r3, #8]
   d582c:	4718      	bx	r3

000d582e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d582e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5830:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5832:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5834:	f7ff fff8 	bl	d5828 <_ZN5Print5printEc>
  n += print('\n');
   d5838:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d583a:	4604      	mov	r4, r0
  n += print('\n');
   d583c:	4628      	mov	r0, r5
   d583e:	f7ff fff3 	bl	d5828 <_ZN5Print5printEc>
  return n;
}
   d5842:	4420      	add	r0, r4
   d5844:	bd38      	pop	{r3, r4, r5, pc}

000d5846 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5846:	b530      	push	{r4, r5, lr}
   d5848:	b08b      	sub	sp, #44	; 0x2c
   d584a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d584c:	2100      	movs	r1, #0
   d584e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5852:	2a01      	cmp	r2, #1
   d5854:	bf98      	it	ls
   d5856:	220a      	movls	r2, #10
   d5858:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d585c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5860:	fb05 3312 	mls	r3, r5, r2, r3
   d5864:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5868:	2b09      	cmp	r3, #9
   d586a:	bf94      	ite	ls
   d586c:	3330      	addls	r3, #48	; 0x30
   d586e:	3337      	addhi	r3, #55	; 0x37
   d5870:	b2db      	uxtb	r3, r3
   d5872:	4621      	mov	r1, r4
   d5874:	f804 3901 	strb.w	r3, [r4], #-1
   d5878:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d587a:	2d00      	cmp	r5, #0
   d587c:	d1ee      	bne.n	d585c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d587e:	f7ff ffc3 	bl	d5808 <_ZN5Print5writeEPKc>
}
   d5882:	b00b      	add	sp, #44	; 0x2c
   d5884:	bd30      	pop	{r4, r5, pc}

000d5886 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5886:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5888:	b92a      	cbnz	r2, d5896 <_ZN5Print5printEmi+0x10>
   d588a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d588c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5890:	689b      	ldr	r3, [r3, #8]
   d5892:	b2c9      	uxtb	r1, r1
   d5894:	4718      	bx	r3
  else return printNumber(n, base);
   d5896:	b2d2      	uxtb	r2, r2
}
   d5898:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d589c:	f7ff bfd3 	b.w	d5846 <_ZN5Print11printNumberEmh>

000d58a0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d58a0:	f7ff bff1 	b.w	d5886 <_ZN5Print5printEmi>

000d58a4 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d58a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d58a8:	4607      	mov	r7, r0
   d58aa:	460e      	mov	r6, r1
  if (base == 0) {
   d58ac:	4615      	mov	r5, r2
   d58ae:	b92a      	cbnz	r2, d58bc <_ZN5Print5printEli+0x18>
    return write(n);
   d58b0:	6803      	ldr	r3, [r0, #0]
   d58b2:	b2c9      	uxtb	r1, r1
   d58b4:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d58b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d58ba:	4718      	bx	r3
  } else if (base == 10) {
   d58bc:	2a0a      	cmp	r2, #10
   d58be:	d102      	bne.n	d58c6 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d58c0:	2900      	cmp	r1, #0
   d58c2:	da01      	bge.n	d58c8 <_ZN5Print5printEli+0x24>
   d58c4:	e004      	b.n	d58d0 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d58c6:	b2d2      	uxtb	r2, r2
  }
}
   d58c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d58cc:	f7ff bfbb 	b.w	d5846 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d58d0:	212d      	movs	r1, #45	; 0x2d
   d58d2:	f7ff ffa9 	bl	d5828 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d58d6:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d58d8:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d58da:	4271      	negs	r1, r6
   d58dc:	4638      	mov	r0, r7
   d58de:	f7ff ffb2 	bl	d5846 <_ZN5Print11printNumberEmh>
   d58e2:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d58e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d58e8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d58e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d58ec:	ec57 6b10 	vmov	r6, r7, d0
   d58f0:	4682      	mov	sl, r0
   d58f2:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d58f4:	ee10 2a10 	vmov	r2, s0
   d58f8:	463b      	mov	r3, r7
   d58fa:	ee10 0a10 	vmov	r0, s0
   d58fe:	4639      	mov	r1, r7
   d5900:	f001 fafa 	bl	d6ef8 <__aeabi_dcmpun>
   d5904:	b108      	cbz	r0, d590a <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5906:	4948      	ldr	r1, [pc, #288]	; (d5a28 <_ZN5Print10printFloatEdh+0x140>)
   d5908:	e012      	b.n	d5930 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d590a:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d590e:	f04f 32ff 	mov.w	r2, #4294967295
   d5912:	4b46      	ldr	r3, [pc, #280]	; (d5a2c <_ZN5Print10printFloatEdh+0x144>)
   d5914:	4630      	mov	r0, r6
   d5916:	4649      	mov	r1, r9
   d5918:	f001 faee 	bl	d6ef8 <__aeabi_dcmpun>
   d591c:	b968      	cbnz	r0, d593a <_ZN5Print10printFloatEdh+0x52>
   d591e:	f04f 32ff 	mov.w	r2, #4294967295
   d5922:	4b42      	ldr	r3, [pc, #264]	; (d5a2c <_ZN5Print10printFloatEdh+0x144>)
   d5924:	4630      	mov	r0, r6
   d5926:	4649      	mov	r1, r9
   d5928:	f001 fac8 	bl	d6ebc <__aeabi_dcmple>
   d592c:	b928      	cbnz	r0, d593a <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d592e:	4940      	ldr	r1, [pc, #256]	; (d5a30 <_ZN5Print10printFloatEdh+0x148>)
   d5930:	4650      	mov	r0, sl
   d5932:	f7ff ff69 	bl	d5808 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d5936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d593a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d593e:	4b3d      	ldr	r3, [pc, #244]	; (d5a34 <_ZN5Print10printFloatEdh+0x14c>)
   d5940:	4630      	mov	r0, r6
   d5942:	4639      	mov	r1, r7
   d5944:	f001 face 	bl	d6ee4 <__aeabi_dcmpgt>
   d5948:	b108      	cbz	r0, d594e <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d594a:	493b      	ldr	r1, [pc, #236]	; (d5a38 <_ZN5Print10printFloatEdh+0x150>)
   d594c:	e7f0      	b.n	d5930 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d594e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5952:	4b3a      	ldr	r3, [pc, #232]	; (d5a3c <_ZN5Print10printFloatEdh+0x154>)
   d5954:	4630      	mov	r0, r6
   d5956:	4639      	mov	r1, r7
   d5958:	f001 faa6 	bl	d6ea8 <__aeabi_dcmplt>
   d595c:	2800      	cmp	r0, #0
   d595e:	d1f4      	bne.n	d594a <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5960:	2200      	movs	r2, #0
   d5962:	2300      	movs	r3, #0
   d5964:	4630      	mov	r0, r6
   d5966:	4639      	mov	r1, r7
   d5968:	f001 fa9e 	bl	d6ea8 <__aeabi_dcmplt>
   d596c:	b140      	cbz	r0, d5980 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d596e:	212d      	movs	r1, #45	; 0x2d
   d5970:	4650      	mov	r0, sl
   d5972:	f7ff ff59 	bl	d5828 <_ZN5Print5printEc>
     number = -number;
   d5976:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d597a:	4604      	mov	r4, r0
     number = -number;
   d597c:	461f      	mov	r7, r3
   d597e:	e000      	b.n	d5982 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5980:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5982:	492f      	ldr	r1, [pc, #188]	; (d5a40 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5984:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5988:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d598a:	fa5f f388 	uxtb.w	r3, r8
   d598e:	429d      	cmp	r5, r3
   d5990:	d906      	bls.n	d59a0 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5992:	2200      	movs	r2, #0
   d5994:	4b2b      	ldr	r3, [pc, #172]	; (d5a44 <_ZN5Print10printFloatEdh+0x15c>)
   d5996:	f001 f93f 	bl	d6c18 <__aeabi_ddiv>
   d599a:	f108 0801 	add.w	r8, r8, #1
   d599e:	e7f4      	b.n	d598a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d59a0:	4632      	mov	r2, r6
   d59a2:	463b      	mov	r3, r7
   d59a4:	f000 fe5c 	bl	d6660 <__adddf3>
   d59a8:	460f      	mov	r7, r1
   d59aa:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d59ac:	f001 fae2 	bl	d6f74 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d59b0:	220a      	movs	r2, #10
   d59b2:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d59b4:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d59b6:	4650      	mov	r0, sl
   d59b8:	f7ff ff45 	bl	d5846 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d59bc:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d59be:	b37d      	cbz	r5, d5a20 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d59c0:	4640      	mov	r0, r8
   d59c2:	f000 ff89 	bl	d68d8 <__aeabi_ui2d>
   d59c6:	4602      	mov	r2, r0
   d59c8:	460b      	mov	r3, r1
   d59ca:	4630      	mov	r0, r6
   d59cc:	4639      	mov	r1, r7
   d59ce:	f000 fe45 	bl	d665c <__aeabi_dsub>
   d59d2:	4606      	mov	r6, r0
   d59d4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d59d6:	4650      	mov	r0, sl
   d59d8:	491b      	ldr	r1, [pc, #108]	; (d5a48 <_ZN5Print10printFloatEdh+0x160>)
   d59da:	f7ff ff15 	bl	d5808 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d59de:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d59e0:	4b18      	ldr	r3, [pc, #96]	; (d5a44 <_ZN5Print10printFloatEdh+0x15c>)
   d59e2:	2200      	movs	r2, #0
   d59e4:	4630      	mov	r0, r6
   d59e6:	4639      	mov	r1, r7
   d59e8:	f000 ffec 	bl	d69c4 <__aeabi_dmul>
   d59ec:	460f      	mov	r7, r1
   d59ee:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d59f0:	f001 fa98 	bl	d6f24 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d59f4:	220a      	movs	r2, #10
   d59f6:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d59f8:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d59fa:	4650      	mov	r0, sl
   d59fc:	f7ff ff52 	bl	d58a4 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d5a00:	4404      	add	r4, r0
    remainder -= toPrint;
   d5a02:	4640      	mov	r0, r8
   d5a04:	f000 ff78 	bl	d68f8 <__aeabi_i2d>
   d5a08:	4602      	mov	r2, r0
   d5a0a:	460b      	mov	r3, r1
   d5a0c:	4630      	mov	r0, r6
   d5a0e:	4639      	mov	r1, r7
   d5a10:	f000 fe24 	bl	d665c <__aeabi_dsub>
   d5a14:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5a16:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d5a1a:	4606      	mov	r6, r0
   d5a1c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d5a1e:	d1df      	bne.n	d59e0 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5a20:	4620      	mov	r0, r4
   d5a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5a26:	bf00      	nop
   d5a28:	000d7708 	.word	0x000d7708
   d5a2c:	7fefffff 	.word	0x7fefffff
   d5a30:	000d7712 	.word	0x000d7712
   d5a34:	41efffff 	.word	0x41efffff
   d5a38:	000d770c 	.word	0x000d770c
   d5a3c:	c1efffff 	.word	0xc1efffff
   d5a40:	3fe00000 	.word	0x3fe00000
   d5a44:	40240000 	.word	0x40240000
   d5a48:	000d7710 	.word	0x000d7710

000d5a4c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d5a4c:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5a4e:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d5a50:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5a52:	f7ff ff49 	bl	d58e8 <_ZN5Print10printFloatEdh>
   d5a56:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d5a58:	4628      	mov	r0, r5
   d5a5a:	f7ff fee8 	bl	d582e <_ZN5Print7printlnEv>
  return n;
}
   d5a5e:	4420      	add	r0, r4
   d5a60:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5a64 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5a64:	4b01      	ldr	r3, [pc, #4]	; (d5a6c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5a66:	4a02      	ldr	r2, [pc, #8]	; (d5a70 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5a68:	601a      	str	r2, [r3, #0]
   d5a6a:	4770      	bx	lr
   d5a6c:	2003e3e0 	.word	0x2003e3e0
   d5a70:	000d77cc 	.word	0x000d77cc

000d5a74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5a74:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5a76:	681a      	ldr	r2, [r3, #0]
   d5a78:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a7a:	601a      	str	r2, [r3, #0]
   d5a7c:	4770      	bx	lr
   d5a7e:	bf00      	nop
   d5a80:	2003e324 	.word	0x2003e324
   d5a84:	2003e3e4 	.word	0x2003e3e4

000d5a88 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5a88:	2100      	movs	r1, #0
   d5a8a:	f7ff bd4b 	b.w	d5524 <system_delay_ms>

000d5a8e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a8e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5a90:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5a92:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5a94:	b113      	cbz	r3, d5a9c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a96:	2203      	movs	r2, #3
   d5a98:	4601      	mov	r1, r0
   d5a9a:	4798      	blx	r3
    }
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	bd10      	pop	{r4, pc}

000d5aa0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5aa0:	b510      	push	{r4, lr}
   d5aa2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5aa4:	f7ff fff3 	bl	d5a8e <_ZNSt14_Function_baseD1Ev>
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	bd10      	pop	{r4, pc}

000d5aac <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5aac:	4803      	ldr	r0, [pc, #12]	; (d5abc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5aae:	4a04      	ldr	r2, [pc, #16]	; (d5ac0 <_GLOBAL__sub_I_RGB+0x14>)
   d5ab0:	4904      	ldr	r1, [pc, #16]	; (d5ac4 <_GLOBAL__sub_I_RGB+0x18>)
   d5ab2:	2300      	movs	r3, #0
   d5ab4:	6083      	str	r3, [r0, #8]
   d5ab6:	f000 bc7d 	b.w	d63b4 <__aeabi_atexit>
   d5aba:	bf00      	nop
   d5abc:	2003e3e8 	.word	0x2003e3e8
   d5ac0:	2003e38c 	.word	0x2003e38c
   d5ac4:	000d5aa1 	.word	0x000d5aa1

000d5ac8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5ac8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5aca:	4b0c      	ldr	r3, [pc, #48]	; (d5afc <serialEventRun+0x34>)
   d5acc:	b133      	cbz	r3, d5adc <serialEventRun+0x14>
   d5ace:	f000 f939 	bl	d5d44 <_Z16_fetch_usbserialv>
   d5ad2:	6803      	ldr	r3, [r0, #0]
   d5ad4:	691b      	ldr	r3, [r3, #16]
   d5ad6:	4798      	blx	r3
   d5ad8:	2800      	cmp	r0, #0
   d5ada:	dc09      	bgt.n	d5af0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5adc:	4b08      	ldr	r3, [pc, #32]	; (d5b00 <serialEventRun+0x38>)
   d5ade:	b163      	cbz	r3, d5afa <serialEventRun+0x32>
   d5ae0:	f000 f9b2 	bl	d5e48 <_Z22__fetch_global_Serial1v>
   d5ae4:	6803      	ldr	r3, [r0, #0]
   d5ae6:	691b      	ldr	r3, [r3, #16]
   d5ae8:	4798      	blx	r3
   d5aea:	2800      	cmp	r0, #0
   d5aec:	dc03      	bgt.n	d5af6 <serialEventRun+0x2e>
   d5aee:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5af0:	f3af 8000 	nop.w
   d5af4:	e7f2      	b.n	d5adc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5af6:	f3af 8000 	nop.w
   d5afa:	bd08      	pop	{r3, pc}
	...

000d5b04 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5b04:	b508      	push	{r3, lr}
	serialEventRun();
   d5b06:	f7ff ffdf 	bl	d5ac8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5b0a:	f7ff fbfb 	bl	d5304 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5b0e:	4b01      	ldr	r3, [pc, #4]	; (d5b14 <_post_loop+0x10>)
   d5b10:	6018      	str	r0, [r3, #0]
   d5b12:	bd08      	pop	{r3, pc}
   d5b14:	2003e734 	.word	0x2003e734

000d5b18 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5b18:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b1a:	2300      	movs	r3, #0
   d5b1c:	9300      	str	r3, [sp, #0]
   d5b1e:	461a      	mov	r2, r3
   d5b20:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b24:	f7ff fd10 	bl	d5548 <system_ctrl_set_result>
}
   d5b28:	b003      	add	sp, #12
   d5b2a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5b30 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5b30:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5b32:	8843      	ldrh	r3, [r0, #2]
   d5b34:	2b0a      	cmp	r3, #10
   d5b36:	d008      	beq.n	d5b4a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5b38:	2b50      	cmp	r3, #80	; 0x50
   d5b3a:	d109      	bne.n	d5b50 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5b3c:	4b09      	ldr	r3, [pc, #36]	; (d5b64 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5b3e:	681b      	ldr	r3, [r3, #0]
   d5b40:	b13b      	cbz	r3, d5b52 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5b42:	b003      	add	sp, #12
   d5b44:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5b48:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5b4a:	f7ff ffe5 	bl	d5b18 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5b4e:	e006      	b.n	d5b5e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5b50:	2300      	movs	r3, #0
   d5b52:	9300      	str	r3, [sp, #0]
   d5b54:	461a      	mov	r2, r3
   d5b56:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5b5a:	f7ff fcf5 	bl	d5548 <system_ctrl_set_result>
        break;
    }
}
   d5b5e:	b003      	add	sp, #12
   d5b60:	f85d fb04 	ldr.w	pc, [sp], #4
   d5b64:	2003e3f8 	.word	0x2003e3f8

000d5b68 <module_user_init_hook>:

void module_user_init_hook()
{
   d5b68:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5b6a:	f7ff fbbb 	bl	d52e4 <HAL_RNG_GetRandomNumber>
   d5b6e:	4604      	mov	r4, r0
    srand(seed);
   d5b70:	f001 fa92 	bl	d7098 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5b74:	4b07      	ldr	r3, [pc, #28]	; (d5b94 <module_user_init_hook+0x2c>)
   d5b76:	b113      	cbz	r3, d5b7e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5b78:	4620      	mov	r0, r4
   d5b7a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5b7e:	2100      	movs	r1, #0
   d5b80:	4804      	ldr	r0, [pc, #16]	; (d5b94 <module_user_init_hook+0x2c>)
   d5b82:	f7ff fd3b 	bl	d55fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5b86:	2100      	movs	r1, #0
   d5b88:	4803      	ldr	r0, [pc, #12]	; (d5b98 <module_user_init_hook+0x30>)
}
   d5b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5b8e:	f7ff bcd1 	b.w	d5534 <system_ctrl_set_app_request_handler>
   d5b92:	bf00      	nop
   d5b94:	00000000 	.word	0x00000000
   d5b98:	000d5b31 	.word	0x000d5b31

000d5b9c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5b9c:	4770      	bx	lr

000d5b9e <_ZN9IPAddressD0Ev>:
   d5b9e:	b510      	push	{r4, lr}
   d5ba0:	2118      	movs	r1, #24
   d5ba2:	4604      	mov	r4, r0
   d5ba4:	f000 fc0b 	bl	d63be <_ZdlPvj>
   d5ba8:	4620      	mov	r0, r4
   d5baa:	bd10      	pop	{r4, pc}

000d5bac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5bac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5bae:	7d03      	ldrb	r3, [r0, #20]
   d5bb0:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5bb2:	b08d      	sub	sp, #52	; 0x34
   d5bb4:	460e      	mov	r6, r1
   d5bb6:	f100 0704 	add.w	r7, r0, #4
   d5bba:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5bbe:	d002      	beq.n	d5bc6 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5bc0:	f100 0508 	add.w	r5, r0, #8
   d5bc4:	e018      	b.n	d5bf8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5bc6:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5bc8:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5bca:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5bce:	232f      	movs	r3, #47	; 0x2f
   d5bd0:	462a      	mov	r2, r5
   d5bd2:	200a      	movs	r0, #10
   d5bd4:	f7ff fbc6 	bl	d5364 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5bd8:	4628      	mov	r0, r5
   d5bda:	f001 fa85 	bl	d70e8 <strlen>
   d5bde:	6833      	ldr	r3, [r6, #0]
   d5be0:	4602      	mov	r2, r0
   d5be2:	68db      	ldr	r3, [r3, #12]
   d5be4:	4629      	mov	r1, r5
   d5be6:	4630      	mov	r0, r6
   d5be8:	4798      	blx	r3
   d5bea:	e00f      	b.n	d5c0c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5bec:	b124      	cbz	r4, d5bf8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5bee:	212e      	movs	r1, #46	; 0x2e
   d5bf0:	4630      	mov	r0, r6
   d5bf2:	f7ff fe19 	bl	d5828 <_ZN5Print5printEc>
   d5bf6:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5bf8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5bfc:	220a      	movs	r2, #10
   d5bfe:	4630      	mov	r0, r6
   d5c00:	f7ff fe4e 	bl	d58a0 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c04:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c06:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c08:	d1f0      	bne.n	d5bec <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c0a:	4620      	mov	r0, r4
    }
    return n;
}
   d5c0c:	b00d      	add	sp, #52	; 0x34
   d5c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c10 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5c10:	b510      	push	{r4, lr}
   d5c12:	4b05      	ldr	r3, [pc, #20]	; (d5c28 <_ZN9IPAddressC1Ev+0x18>)
   d5c14:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5c16:	2211      	movs	r2, #17
   d5c18:	f840 3b04 	str.w	r3, [r0], #4
   d5c1c:	2100      	movs	r1, #0
   d5c1e:	f001 fa32 	bl	d7086 <memset>
{
    clear();
}
   d5c22:	4620      	mov	r0, r4
   d5c24:	bd10      	pop	{r4, pc}
   d5c26:	bf00      	nop
   d5c28:	000d7828 	.word	0x000d7828

000d5c2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5c2c:	4603      	mov	r3, r0
   d5c2e:	4a07      	ldr	r2, [pc, #28]	; (d5c4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5c30:	b510      	push	{r4, lr}
   d5c32:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5c36:	f101 0210 	add.w	r2, r1, #16
   d5c3a:	f851 4b04 	ldr.w	r4, [r1], #4
   d5c3e:	f843 4b04 	str.w	r4, [r3], #4
   d5c42:	4291      	cmp	r1, r2
   d5c44:	d1f9      	bne.n	d5c3a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5c46:	780a      	ldrb	r2, [r1, #0]
   d5c48:	701a      	strb	r2, [r3, #0]
}
   d5c4a:	bd10      	pop	{r4, pc}
   d5c4c:	000d7828 	.word	0x000d7828

000d5c50 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5c50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5c52:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5c56:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5c5a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5c5e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5c62:	2304      	movs	r3, #4
   d5c64:	6041      	str	r1, [r0, #4]
   d5c66:	7503      	strb	r3, [r0, #20]
   d5c68:	bd10      	pop	{r4, pc}

000d5c6a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5c6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5c6c:	780d      	ldrb	r5, [r1, #0]
   d5c6e:	788b      	ldrb	r3, [r1, #2]
   d5c70:	784a      	ldrb	r2, [r1, #1]
   d5c72:	78c9      	ldrb	r1, [r1, #3]
   d5c74:	9100      	str	r1, [sp, #0]
   d5c76:	4629      	mov	r1, r5
   d5c78:	f7ff ffea 	bl	d5c50 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5c7c:	b003      	add	sp, #12
   d5c7e:	bd30      	pop	{r4, r5, pc}

000d5c80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5c80:	7441      	strb	r1, [r0, #17]
   d5c82:	4770      	bx	lr

000d5c84 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5c84:	4770      	bx	lr

000d5c86 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5c86:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5c88:	2100      	movs	r1, #0
   d5c8a:	7c00      	ldrb	r0, [r0, #16]
   d5c8c:	f7ff fc22 	bl	d54d4 <HAL_USB_USART_Receive_Data>
}
   d5c90:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5c94:	bf28      	it	cs
   d5c96:	f04f 30ff 	movcs.w	r0, #4294967295
   d5c9a:	bd08      	pop	{r3, pc}

000d5c9c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5c9c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5c9e:	2101      	movs	r1, #1
   d5ca0:	7c00      	ldrb	r0, [r0, #16]
   d5ca2:	f7ff fc17 	bl	d54d4 <HAL_USB_USART_Receive_Data>
}
   d5ca6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5caa:	bf28      	it	cs
   d5cac:	f04f 30ff 	movcs.w	r0, #4294967295
   d5cb0:	bd08      	pop	{r3, pc}

000d5cb2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5cb2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5cb4:	7c00      	ldrb	r0, [r0, #16]
   d5cb6:	f7ff fc05 	bl	d54c4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5cba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5cbe:	bd08      	pop	{r3, pc}

000d5cc0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5cc0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5cc2:	7c00      	ldrb	r0, [r0, #16]
   d5cc4:	f7ff fbf6 	bl	d54b4 <HAL_USB_USART_Available_Data>
}
   d5cc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5ccc:	bd08      	pop	{r3, pc}

000d5cce <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5cce:	7c00      	ldrb	r0, [r0, #16]
   d5cd0:	f7ff bc10 	b.w	d54f4 <HAL_USB_USART_Flush_Data>

000d5cd4 <_ZN9USBSerialD0Ev>:
   d5cd4:	b510      	push	{r4, lr}
   d5cd6:	2114      	movs	r1, #20
   d5cd8:	4604      	mov	r4, r0
   d5cda:	f000 fb70 	bl	d63be <_ZdlPvj>
   d5cde:	4620      	mov	r0, r4
   d5ce0:	bd10      	pop	{r4, pc}

000d5ce2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5ce2:	b538      	push	{r3, r4, r5, lr}
   d5ce4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5ce6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5ce8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5cea:	f7ff fbeb 	bl	d54c4 <HAL_USB_USART_Available_Data_For_Write>
   d5cee:	2800      	cmp	r0, #0
   d5cf0:	dc01      	bgt.n	d5cf6 <_ZN9USBSerial5writeEh+0x14>
   d5cf2:	7c60      	ldrb	r0, [r4, #17]
   d5cf4:	b128      	cbz	r0, d5d02 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5cf6:	4629      	mov	r1, r5
   d5cf8:	7c20      	ldrb	r0, [r4, #16]
   d5cfa:	f7ff fbf3 	bl	d54e4 <HAL_USB_USART_Send_Data>
   d5cfe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5d02:	bd38      	pop	{r3, r4, r5, pc}

000d5d04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d04:	b510      	push	{r4, lr}
   d5d06:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5d08:	2300      	movs	r3, #0
   d5d0a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d10:	60a3      	str	r3, [r4, #8]
   d5d12:	4b05      	ldr	r3, [pc, #20]	; (d5d28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5d14:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5d16:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5d18:	4608      	mov	r0, r1
{
  _serial = serial;
   d5d1a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5d1c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5d1e:	4611      	mov	r1, r2
   d5d20:	f7ff fbb8 	bl	d5494 <HAL_USB_USART_Init>
}
   d5d24:	4620      	mov	r0, r4
   d5d26:	bd10      	pop	{r4, pc}
   d5d28:	000d783c 	.word	0x000d783c

000d5d2c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5d2c:	2200      	movs	r2, #0
   d5d2e:	7c00      	ldrb	r0, [r0, #16]
   d5d30:	f7ff bbb8 	b.w	d54a4 <HAL_USB_USART_Begin>

000d5d34 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5d34:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5d36:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5d38:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5d3a:	2100      	movs	r1, #0
   d5d3c:	f001 f9a3 	bl	d7086 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5d40:	4620      	mov	r0, r4
   d5d42:	bd10      	pop	{r4, pc}

000d5d44 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5d44:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d46:	4d0e      	ldr	r5, [pc, #56]	; (d5d80 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5d48:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5d4a:	a801      	add	r0, sp, #4
   d5d4c:	f7ff fff2 	bl	d5d34 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5d50:	6829      	ldr	r1, [r5, #0]
   d5d52:	f011 0401 	ands.w	r4, r1, #1
   d5d56:	d110      	bne.n	d5d7a <_Z16_fetch_usbserialv+0x36>
   d5d58:	4628      	mov	r0, r5
   d5d5a:	f7fe f9ad 	bl	d40b8 <__cxa_guard_acquire>
   d5d5e:	b160      	cbz	r0, d5d7a <_Z16_fetch_usbserialv+0x36>
   d5d60:	aa01      	add	r2, sp, #4
   d5d62:	4621      	mov	r1, r4
   d5d64:	4807      	ldr	r0, [pc, #28]	; (d5d84 <_Z16_fetch_usbserialv+0x40>)
   d5d66:	f7ff ffcd 	bl	d5d04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5d6a:	4628      	mov	r0, r5
   d5d6c:	f7fe f9a9 	bl	d40c2 <__cxa_guard_release>
   d5d70:	4a05      	ldr	r2, [pc, #20]	; (d5d88 <_Z16_fetch_usbserialv+0x44>)
   d5d72:	4906      	ldr	r1, [pc, #24]	; (d5d8c <_Z16_fetch_usbserialv+0x48>)
   d5d74:	4803      	ldr	r0, [pc, #12]	; (d5d84 <_Z16_fetch_usbserialv+0x40>)
   d5d76:	f000 fb1d 	bl	d63b4 <__aeabi_atexit>
	return _usbserial;
}
   d5d7a:	4802      	ldr	r0, [pc, #8]	; (d5d84 <_Z16_fetch_usbserialv+0x40>)
   d5d7c:	b007      	add	sp, #28
   d5d7e:	bd30      	pop	{r4, r5, pc}
   d5d80:	2003e3fc 	.word	0x2003e3fc
   d5d84:	2003e400 	.word	0x2003e400
   d5d88:	2003e38c 	.word	0x2003e38c
   d5d8c:	000d5c85 	.word	0x000d5c85

000d5d90 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5d90:	4770      	bx	lr

000d5d92 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5d92:	7441      	strb	r1, [r0, #17]
   d5d94:	4770      	bx	lr

000d5d96 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5d96:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5d98:	7c00      	ldrb	r0, [r0, #16]
   d5d9a:	f7ff fb23 	bl	d53e4 <HAL_USART_Available_Data_For_Write>
}
   d5d9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5da2:	bd08      	pop	{r3, pc}

000d5da4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5da4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5da6:	7c00      	ldrb	r0, [r0, #16]
   d5da8:	f7ff faf4 	bl	d5394 <HAL_USART_Available_Data>
}
   d5dac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5db0:	bd08      	pop	{r3, pc}

000d5db2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5db2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5db4:	7c00      	ldrb	r0, [r0, #16]
   d5db6:	f7ff fafd 	bl	d53b4 <HAL_USART_Peek_Data>
}
   d5dba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5dbe:	bf28      	it	cs
   d5dc0:	f04f 30ff 	movcs.w	r0, #4294967295
   d5dc4:	bd08      	pop	{r3, pc}

000d5dc6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5dc6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5dc8:	7c00      	ldrb	r0, [r0, #16]
   d5dca:	f7ff faeb 	bl	d53a4 <HAL_USART_Read_Data>
}
   d5dce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5dd2:	bf28      	it	cs
   d5dd4:	f04f 30ff 	movcs.w	r0, #4294967295
   d5dd8:	bd08      	pop	{r3, pc}

000d5dda <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5dda:	7c00      	ldrb	r0, [r0, #16]
   d5ddc:	f7ff baf2 	b.w	d53c4 <HAL_USART_Flush_Data>

000d5de0 <_ZN11USARTSerialD0Ev>:
   d5de0:	b510      	push	{r4, lr}
   d5de2:	2114      	movs	r1, #20
   d5de4:	4604      	mov	r4, r0
   d5de6:	f000 faea 	bl	d63be <_ZdlPvj>
   d5dea:	4620      	mov	r0, r4
   d5dec:	bd10      	pop	{r4, pc}

000d5dee <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5dee:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5df0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5df2:	4604      	mov	r4, r0
   d5df4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5df6:	b925      	cbnz	r5, d5e02 <_ZN11USARTSerial5writeEh+0x14>
   d5df8:	7c00      	ldrb	r0, [r0, #16]
   d5dfa:	f7ff faf3 	bl	d53e4 <HAL_USART_Available_Data_For_Write>
   d5dfe:	2800      	cmp	r0, #0
   d5e00:	dd05      	ble.n	d5e0e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5e02:	4631      	mov	r1, r6
   d5e04:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5e0a:	f7ff babb 	b.w	d5384 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5e0e:	4628      	mov	r0, r5
   d5e10:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5e14 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5e14:	b510      	push	{r4, lr}
   d5e16:	4604      	mov	r4, r0
   d5e18:	4608      	mov	r0, r1
   d5e1a:	4611      	mov	r1, r2
   d5e1c:	2200      	movs	r2, #0
   d5e1e:	6062      	str	r2, [r4, #4]
   d5e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5e24:	60a2      	str	r2, [r4, #8]
   d5e26:	4a05      	ldr	r2, [pc, #20]	; (d5e3c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5e28:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5e2a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5e2c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5e2e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5e30:	461a      	mov	r2, r3
   d5e32:	f7ff fa9f 	bl	d5374 <HAL_USART_Init>
}
   d5e36:	4620      	mov	r0, r4
   d5e38:	bd10      	pop	{r4, pc}
   d5e3a:	bf00      	nop
   d5e3c:	000d786c 	.word	0x000d786c

000d5e40 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5e40:	7c00      	ldrb	r0, [r0, #16]
   d5e42:	f7ff bac7 	b.w	d53d4 <HAL_USART_Is_Enabled>
	...

000d5e48 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5e48:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5e4a:	4d0c      	ldr	r5, [pc, #48]	; (d5e7c <_Z22__fetch_global_Serial1v+0x34>)
   d5e4c:	6829      	ldr	r1, [r5, #0]
   d5e4e:	f011 0401 	ands.w	r4, r1, #1
   d5e52:	d111      	bne.n	d5e78 <_Z22__fetch_global_Serial1v+0x30>
   d5e54:	4628      	mov	r0, r5
   d5e56:	f7fe f92f 	bl	d40b8 <__cxa_guard_acquire>
   d5e5a:	b168      	cbz	r0, d5e78 <_Z22__fetch_global_Serial1v+0x30>
   d5e5c:	4a08      	ldr	r2, [pc, #32]	; (d5e80 <_Z22__fetch_global_Serial1v+0x38>)
   d5e5e:	4b09      	ldr	r3, [pc, #36]	; (d5e84 <_Z22__fetch_global_Serial1v+0x3c>)
   d5e60:	4809      	ldr	r0, [pc, #36]	; (d5e88 <_Z22__fetch_global_Serial1v+0x40>)
   d5e62:	4621      	mov	r1, r4
   d5e64:	f7ff ffd6 	bl	d5e14 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5e68:	4628      	mov	r0, r5
   d5e6a:	f7fe f92a 	bl	d40c2 <__cxa_guard_release>
   d5e6e:	4a07      	ldr	r2, [pc, #28]	; (d5e8c <_Z22__fetch_global_Serial1v+0x44>)
   d5e70:	4907      	ldr	r1, [pc, #28]	; (d5e90 <_Z22__fetch_global_Serial1v+0x48>)
   d5e72:	4805      	ldr	r0, [pc, #20]	; (d5e88 <_Z22__fetch_global_Serial1v+0x40>)
   d5e74:	f000 fa9e 	bl	d63b4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5e78:	4803      	ldr	r0, [pc, #12]	; (d5e88 <_Z22__fetch_global_Serial1v+0x40>)
   d5e7a:	bd38      	pop	{r3, r4, r5, pc}
   d5e7c:	2003e4ac 	.word	0x2003e4ac
   d5e80:	2003e4b0 	.word	0x2003e4b0
   d5e84:	2003e428 	.word	0x2003e428
   d5e88:	2003e414 	.word	0x2003e414
   d5e8c:	2003e38c 	.word	0x2003e38c
   d5e90:	000d5d91 	.word	0x000d5d91

000d5e94 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5e94:	4770      	bx	lr

000d5e96 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e98:	4606      	mov	r6, r0
   d5e9a:	4615      	mov	r5, r2
   d5e9c:	460c      	mov	r4, r1
   d5e9e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5ea0:	42bc      	cmp	r4, r7
   d5ea2:	d006      	beq.n	d5eb2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5ea4:	6833      	ldr	r3, [r6, #0]
   d5ea6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5eaa:	689b      	ldr	r3, [r3, #8]
   d5eac:	4630      	mov	r0, r6
   d5eae:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5eb0:	e7f6      	b.n	d5ea0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5eb2:	4628      	mov	r0, r5
   d5eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5eb6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5eb6:	2200      	movs	r2, #0
   d5eb8:	7c00      	ldrb	r0, [r0, #16]
   d5eba:	f7ff bab3 	b.w	d5424 <HAL_I2C_Write_Data>

000d5ebe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5ebe:	2100      	movs	r1, #0
   d5ec0:	7c00      	ldrb	r0, [r0, #16]
   d5ec2:	f7ff bab7 	b.w	d5434 <HAL_I2C_Available_Data>

000d5ec6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5ec6:	2100      	movs	r1, #0
   d5ec8:	7c00      	ldrb	r0, [r0, #16]
   d5eca:	f7ff babb 	b.w	d5444 <HAL_I2C_Read_Data>

000d5ece <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5ece:	2100      	movs	r1, #0
   d5ed0:	7c00      	ldrb	r0, [r0, #16]
   d5ed2:	f7ff babf 	b.w	d5454 <HAL_I2C_Peek_Data>

000d5ed6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5ed6:	2100      	movs	r1, #0
   d5ed8:	7c00      	ldrb	r0, [r0, #16]
   d5eda:	f7ff bac3 	b.w	d5464 <HAL_I2C_Flush_Data>

000d5ede <_ZN7TwoWireD0Ev>:
   d5ede:	b510      	push	{r4, lr}
   d5ee0:	2114      	movs	r1, #20
   d5ee2:	4604      	mov	r4, r0
   d5ee4:	f000 fa6b 	bl	d63be <_ZdlPvj>
   d5ee8:	4620      	mov	r0, r4
   d5eea:	bd10      	pop	{r4, pc}

000d5eec <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5eec:	b510      	push	{r4, lr}
   d5eee:	4604      	mov	r4, r0
   d5ef0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ef4:	4608      	mov	r0, r1
   d5ef6:	60a3      	str	r3, [r4, #8]
   d5ef8:	2100      	movs	r1, #0
   d5efa:	4b04      	ldr	r3, [pc, #16]	; (d5f0c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5efc:	7420      	strb	r0, [r4, #16]
   d5efe:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5f00:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5f02:	f7ff fabf 	bl	d5484 <HAL_I2C_Init>

}
   d5f06:	4620      	mov	r0, r4
   d5f08:	bd10      	pop	{r4, pc}
   d5f0a:	bf00      	nop
   d5f0c:	000d789c 	.word	0x000d789c

000d5f10 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5f10:	2300      	movs	r3, #0
   d5f12:	461a      	mov	r2, r3
   d5f14:	4619      	mov	r1, r3
   d5f16:	7c00      	ldrb	r0, [r0, #16]
   d5f18:	f7ff ba6c 	b.w	d53f4 <HAL_I2C_Begin>

000d5f1c <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5f1c:	2200      	movs	r2, #0
   d5f1e:	7c00      	ldrb	r0, [r0, #16]
   d5f20:	f7ff ba70 	b.w	d5404 <HAL_I2C_Begin_Transmission>

000d5f24 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5f24:	b2c9      	uxtb	r1, r1
   d5f26:	f7ff bff9 	b.w	d5f1c <_ZN7TwoWire17beginTransmissionEh>

000d5f2a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5f2a:	2200      	movs	r2, #0
   d5f2c:	7c00      	ldrb	r0, [r0, #16]
   d5f2e:	f7ff ba71 	b.w	d5414 <HAL_I2C_End_Transmission>

000d5f32 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5f32:	2101      	movs	r1, #1
   d5f34:	f7ff bff9 	b.w	d5f2a <_ZN7TwoWire15endTransmissionEh>

000d5f38 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5f38:	2100      	movs	r1, #0
   d5f3a:	7c00      	ldrb	r0, [r0, #16]
   d5f3c:	f7ff ba9a 	b.w	d5474 <HAL_I2C_Is_Enabled>

000d5f40 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f40:	2200      	movs	r2, #0
   d5f42:	4611      	mov	r1, r2
   d5f44:	6840      	ldr	r0, [r0, #4]
   d5f46:	f7ff bb41 	b.w	d55cc <network_listening>

000d5f4a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5f4a:	2200      	movs	r2, #0
   d5f4c:	4611      	mov	r1, r2
   d5f4e:	6840      	ldr	r0, [r0, #4]
   d5f50:	f7ff bb4c 	b.w	d55ec <network_get_listen_timeout>

000d5f54 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5f54:	2200      	movs	r2, #0
   d5f56:	6840      	ldr	r0, [r0, #4]
   d5f58:	f7ff bb40 	b.w	d55dc <network_set_listen_timeout>

000d5f5c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f5c:	2200      	movs	r2, #0
   d5f5e:	f081 0101 	eor.w	r1, r1, #1
   d5f62:	6840      	ldr	r0, [r0, #4]
   d5f64:	f7ff bb2a 	b.w	d55bc <network_listen>

000d5f68 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5f68:	2300      	movs	r3, #0
   d5f6a:	461a      	mov	r2, r3
   d5f6c:	4619      	mov	r1, r3
   d5f6e:	6840      	ldr	r0, [r0, #4]
   d5f70:	f7ff bb1c 	b.w	d55ac <network_off>

000d5f74 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5f74:	2300      	movs	r3, #0
   d5f76:	461a      	mov	r2, r3
   d5f78:	4619      	mov	r1, r3
   d5f7a:	6840      	ldr	r0, [r0, #4]
   d5f7c:	f7ff bb0e 	b.w	d559c <network_on>

000d5f80 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5f80:	2200      	movs	r2, #0
   d5f82:	4611      	mov	r1, r2
   d5f84:	6840      	ldr	r0, [r0, #4]
   d5f86:	f7ff bb01 	b.w	d558c <network_ready>

000d5f8a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f8a:	2200      	movs	r2, #0
   d5f8c:	4611      	mov	r1, r2
   d5f8e:	6840      	ldr	r0, [r0, #4]
   d5f90:	f7ff baec 	b.w	d556c <network_connecting>

000d5f94 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f94:	2200      	movs	r2, #0
   d5f96:	2102      	movs	r1, #2
   d5f98:	6840      	ldr	r0, [r0, #4]
   d5f9a:	f7ff baef 	b.w	d557c <network_disconnect>

000d5f9e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f9e:	2300      	movs	r3, #0
   d5fa0:	461a      	mov	r2, r3
   d5fa2:	6840      	ldr	r0, [r0, #4]
   d5fa4:	f7ff bada 	b.w	d555c <network_connect>

000d5fa8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5fa8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5faa:	4605      	mov	r5, r0
   d5fac:	b188      	cbz	r0, d5fd2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5fae:	6804      	ldr	r4, [r0, #0]
   d5fb0:	b14c      	cbz	r4, d5fc6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d5fb2:	68a3      	ldr	r3, [r4, #8]
   d5fb4:	b11b      	cbz	r3, d5fbe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5fb6:	2203      	movs	r2, #3
   d5fb8:	4621      	mov	r1, r4
   d5fba:	4620      	mov	r0, r4
   d5fbc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5fbe:	2110      	movs	r1, #16
   d5fc0:	4620      	mov	r0, r4
   d5fc2:	f000 f9fc 	bl	d63be <_ZdlPvj>
   d5fc6:	4628      	mov	r0, r5
   d5fc8:	2114      	movs	r1, #20
      }
   d5fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5fce:	f000 b9f6 	b.w	d63be <_ZdlPvj>
   d5fd2:	bd38      	pop	{r3, r4, r5, pc}

000d5fd4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5fd4:	b110      	cbz	r0, d5fdc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5fd6:	6803      	ldr	r3, [r0, #0]
   d5fd8:	685b      	ldr	r3, [r3, #4]
   d5fda:	4718      	bx	r3
   d5fdc:	4770      	bx	lr

000d5fde <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5fde:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5fe0:	6803      	ldr	r3, [r0, #0]
   d5fe2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5fe4:	b1bb      	cbz	r3, d6016 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5fe6:	6858      	ldr	r0, [r3, #4]
   d5fe8:	f7ff f994 	bl	d5314 <os_thread_is_current>
   d5fec:	b978      	cbnz	r0, d600e <_ZN6ThreadD1Ev+0x30>
   d5fee:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5ff0:	7c5a      	ldrb	r2, [r3, #17]
   d5ff2:	b912      	cbnz	r2, d5ffa <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5ff4:	6858      	ldr	r0, [r3, #4]
   d5ff6:	f7ff f995 	bl	d5324 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5ffa:	6823      	ldr	r3, [r4, #0]
   d5ffc:	6858      	ldr	r0, [r3, #4]
   d5ffe:	f7ff f999 	bl	d5334 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6002:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6004:	2300      	movs	r3, #0
   d6006:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6008:	b128      	cbz	r0, d6016 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d600a:	f7ff ffcd 	bl	d5fa8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d600e:	6820      	ldr	r0, [r4, #0]
   d6010:	b108      	cbz	r0, d6016 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6012:	f7ff ffc9 	bl	d5fa8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d6016:	4620      	mov	r0, r4
   d6018:	bd10      	pop	{r4, pc}
	...

000d601c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d601c:	b538      	push	{r3, r4, r5, lr}
   d601e:	4b0c      	ldr	r3, [pc, #48]	; (d6050 <_ZN5spark9MeshClassD1Ev+0x34>)
   d6020:	6003      	str	r3, [r0, #0]
   d6022:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6024:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6028:	b108      	cbz	r0, d602e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d602a:	f7fe f838 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d602e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6032:	b135      	cbz	r5, d6042 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6034:	4628      	mov	r0, r5
   d6036:	f7ff ffd2 	bl	d5fde <_ZN6ThreadD1Ev>
   d603a:	2104      	movs	r1, #4
   d603c:	4628      	mov	r0, r5
   d603e:	f000 f9be 	bl	d63be <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6042:	68a0      	ldr	r0, [r4, #8]
   d6044:	b108      	cbz	r0, d604a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d6046:	f7ff ffc5 	bl	d5fd4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d604a:	4620      	mov	r0, r4
   d604c:	bd38      	pop	{r3, r4, r5, pc}
   d604e:	bf00      	nop
   d6050:	000d78c4 	.word	0x000d78c4

000d6054 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6054:	b538      	push	{r3, r4, r5, lr}
   d6056:	4c0d      	ldr	r4, [pc, #52]	; (d608c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d6058:	4b0d      	ldr	r3, [pc, #52]	; (d6090 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d605a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d605c:	2500      	movs	r5, #0
   d605e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6060:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6064:	6063      	str	r3, [r4, #4]
   d6066:	60a5      	str	r5, [r4, #8]
   d6068:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d606c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6070:	f7ff f970 	bl	d5354 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6074:	4b07      	ldr	r3, [pc, #28]	; (d6094 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d6076:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d607a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d607c:	4620      	mov	r0, r4
   d607e:	4a06      	ldr	r2, [pc, #24]	; (d6098 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d6080:	4906      	ldr	r1, [pc, #24]	; (d609c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d6082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6086:	f000 b995 	b.w	d63b4 <__aeabi_atexit>
   d608a:	bf00      	nop
   d608c:	2003e534 	.word	0x2003e534
   d6090:	000d792c 	.word	0x000d792c
   d6094:	000d78c4 	.word	0x000d78c4
   d6098:	2003e38c 	.word	0x2003e38c
   d609c:	000d601d 	.word	0x000d601d

000d60a0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d60a0:	2200      	movs	r2, #0
   d60a2:	4611      	mov	r1, r2
   d60a4:	6840      	ldr	r0, [r0, #4]
   d60a6:	f7ff ba71 	b.w	d558c <network_ready>

000d60aa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d60aa:	2200      	movs	r2, #0
   d60ac:	4611      	mov	r1, r2
   d60ae:	6840      	ldr	r0, [r0, #4]
   d60b0:	f7ff ba8c 	b.w	d55cc <network_listening>

000d60b4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d60b4:	2200      	movs	r2, #0
   d60b6:	4611      	mov	r1, r2
   d60b8:	6840      	ldr	r0, [r0, #4]
   d60ba:	f7ff ba97 	b.w	d55ec <network_get_listen_timeout>

000d60be <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d60be:	2200      	movs	r2, #0
   d60c0:	6840      	ldr	r0, [r0, #4]
   d60c2:	f7ff ba8b 	b.w	d55dc <network_set_listen_timeout>

000d60c6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d60c6:	2200      	movs	r2, #0
   d60c8:	f081 0101 	eor.w	r1, r1, #1
   d60cc:	6840      	ldr	r0, [r0, #4]
   d60ce:	f7ff ba75 	b.w	d55bc <network_listen>

000d60d2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d60d2:	2300      	movs	r3, #0
   d60d4:	461a      	mov	r2, r3
   d60d6:	4619      	mov	r1, r3
   d60d8:	6840      	ldr	r0, [r0, #4]
   d60da:	f7ff ba67 	b.w	d55ac <network_off>

000d60de <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d60de:	2300      	movs	r3, #0
   d60e0:	461a      	mov	r2, r3
   d60e2:	4619      	mov	r1, r3
   d60e4:	6840      	ldr	r0, [r0, #4]
   d60e6:	f7ff ba59 	b.w	d559c <network_on>

000d60ea <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d60ea:	2200      	movs	r2, #0
   d60ec:	4611      	mov	r1, r2
   d60ee:	6840      	ldr	r0, [r0, #4]
   d60f0:	f7ff ba3c 	b.w	d556c <network_connecting>

000d60f4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d60f4:	2200      	movs	r2, #0
   d60f6:	2102      	movs	r1, #2
   d60f8:	6840      	ldr	r0, [r0, #4]
   d60fa:	f7ff ba3f 	b.w	d557c <network_disconnect>

000d60fe <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d60fe:	2300      	movs	r3, #0
   d6100:	461a      	mov	r2, r3
   d6102:	6840      	ldr	r0, [r0, #4]
   d6104:	f7ff ba2a 	b.w	d555c <network_connect>

000d6108 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6108:	4b02      	ldr	r3, [pc, #8]	; (d6114 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d610a:	2204      	movs	r2, #4
   d610c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d610e:	4a02      	ldr	r2, [pc, #8]	; (d6118 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6110:	601a      	str	r2, [r3, #0]
   d6112:	4770      	bx	lr
   d6114:	2003e704 	.word	0x2003e704
   d6118:	000d78f8 	.word	0x000d78f8

000d611c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d611c:	2300      	movs	r3, #0
   d611e:	461a      	mov	r2, r3
   d6120:	6840      	ldr	r0, [r0, #4]
   d6122:	f7ff ba1b 	b.w	d555c <network_connect>

000d6126 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6126:	2200      	movs	r2, #0
   d6128:	2102      	movs	r1, #2
   d612a:	6840      	ldr	r0, [r0, #4]
   d612c:	f7ff ba26 	b.w	d557c <network_disconnect>

000d6130 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6130:	2200      	movs	r2, #0
   d6132:	4611      	mov	r1, r2
   d6134:	6840      	ldr	r0, [r0, #4]
   d6136:	f7ff ba19 	b.w	d556c <network_connecting>

000d613a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d613a:	2200      	movs	r2, #0
   d613c:	4611      	mov	r1, r2
   d613e:	6840      	ldr	r0, [r0, #4]
   d6140:	f7ff ba24 	b.w	d558c <network_ready>

000d6144 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6144:	2300      	movs	r3, #0
   d6146:	461a      	mov	r2, r3
   d6148:	4619      	mov	r1, r3
   d614a:	6840      	ldr	r0, [r0, #4]
   d614c:	f7ff ba26 	b.w	d559c <network_on>

000d6150 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6150:	2300      	movs	r3, #0
   d6152:	461a      	mov	r2, r3
   d6154:	4619      	mov	r1, r3
   d6156:	6840      	ldr	r0, [r0, #4]
   d6158:	f7ff ba28 	b.w	d55ac <network_off>

000d615c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d615c:	2200      	movs	r2, #0
   d615e:	f081 0101 	eor.w	r1, r1, #1
   d6162:	6840      	ldr	r0, [r0, #4]
   d6164:	f7ff ba2a 	b.w	d55bc <network_listen>

000d6168 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6168:	2200      	movs	r2, #0
   d616a:	6840      	ldr	r0, [r0, #4]
   d616c:	f7ff ba36 	b.w	d55dc <network_set_listen_timeout>

000d6170 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6170:	2200      	movs	r2, #0
   d6172:	4611      	mov	r1, r2
   d6174:	6840      	ldr	r0, [r0, #4]
   d6176:	f7ff ba39 	b.w	d55ec <network_get_listen_timeout>

000d617a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d617a:	2200      	movs	r2, #0
   d617c:	4611      	mov	r1, r2
   d617e:	6840      	ldr	r0, [r0, #4]
   d6180:	f7ff ba24 	b.w	d55cc <network_listening>

000d6184 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6188:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d618a:	b095      	sub	sp, #84	; 0x54
   d618c:	4616      	mov	r6, r2
   d618e:	460d      	mov	r5, r1
   d6190:	4607      	mov	r7, r0
    IPAddress addr;
   d6192:	f7ff fd3d 	bl	d5c10 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6196:	4621      	mov	r1, r4
   d6198:	2220      	movs	r2, #32
   d619a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d619c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d619e:	f000 ff72 	bl	d7086 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d61a2:	2340      	movs	r3, #64	; 0x40
   d61a4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d61a6:	4621      	mov	r1, r4
   d61a8:	466b      	mov	r3, sp
   d61aa:	aa0c      	add	r2, sp, #48	; 0x30
   d61ac:	4630      	mov	r0, r6
   d61ae:	f7ff f831 	bl	d5214 <netdb_getaddrinfo>
    if (!r) {
   d61b2:	4604      	mov	r4, r0
   d61b4:	2800      	cmp	r0, #0
   d61b6:	d144      	bne.n	d6242 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d61b8:	4602      	mov	r2, r0
   d61ba:	2101      	movs	r1, #1
   d61bc:	6868      	ldr	r0, [r5, #4]
   d61be:	f7ff f9e5 	bl	d558c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61c2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d61c4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61c6:	4622      	mov	r2, r4
   d61c8:	6868      	ldr	r0, [r5, #4]
   d61ca:	f7ff f9df 	bl	d558c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d61ce:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d61d0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d61d2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d61d4:	2e00      	cmp	r6, #0
   d61d6:	d034      	beq.n	d6242 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d61d8:	2900      	cmp	r1, #0
   d61da:	d132      	bne.n	d6242 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d61dc:	6873      	ldr	r3, [r6, #4]
   d61de:	2b02      	cmp	r3, #2
   d61e0:	d002      	beq.n	d61e8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d61e2:	2b0a      	cmp	r3, #10
   d61e4:	d009      	beq.n	d61fa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d61e6:	e02a      	b.n	d623e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d61e8:	f1b8 0f00 	cmp.w	r8, #0
   d61ec:	d027      	beq.n	d623e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d61ee:	6971      	ldr	r1, [r6, #20]
   d61f0:	4638      	mov	r0, r7
   d61f2:	3104      	adds	r1, #4
   d61f4:	f7ff fd39 	bl	d5c6a <_ZN9IPAddressaSEPKh>
   d61f8:	e020      	b.n	d623c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d61fa:	f1b9 0f00 	cmp.w	r9, #0
   d61fe:	d01e      	beq.n	d623e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6200:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6202:	2211      	movs	r2, #17
   d6204:	a801      	add	r0, sp, #4
   d6206:	f000 ff3e 	bl	d7086 <memset>
                    a.v = 6;
   d620a:	2306      	movs	r3, #6
   d620c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6210:	ad01      	add	r5, sp, #4
   d6212:	f104 0308 	add.w	r3, r4, #8
   d6216:	3418      	adds	r4, #24
   d6218:	6818      	ldr	r0, [r3, #0]
   d621a:	6859      	ldr	r1, [r3, #4]
   d621c:	462a      	mov	r2, r5
   d621e:	c203      	stmia	r2!, {r0, r1}
   d6220:	3308      	adds	r3, #8
   d6222:	42a3      	cmp	r3, r4
   d6224:	4615      	mov	r5, r2
   d6226:	d1f7      	bne.n	d6218 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6228:	a901      	add	r1, sp, #4
   d622a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d622c:	ad07      	add	r5, sp, #28
   d622e:	f7ff fcfd 	bl	d5c2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6234:	1d3c      	adds	r4, r7, #4
   d6236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6238:	682b      	ldr	r3, [r5, #0]
   d623a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d623c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d623e:	69f6      	ldr	r6, [r6, #28]
   d6240:	e7c8      	b.n	d61d4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6242:	9800      	ldr	r0, [sp, #0]
   d6244:	f7fe ffde 	bl	d5204 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6248:	4638      	mov	r0, r7
   d624a:	b015      	add	sp, #84	; 0x54
   d624c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6250 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6250:	4b02      	ldr	r3, [pc, #8]	; (d625c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6252:	4a03      	ldr	r2, [pc, #12]	; (d6260 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6254:	601a      	str	r2, [r3, #0]
   d6256:	2200      	movs	r2, #0
   d6258:	605a      	str	r2, [r3, #4]
   d625a:	4770      	bx	lr
   d625c:	2003e70c 	.word	0x2003e70c
   d6260:	000d792c 	.word	0x000d792c

000d6264 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6264:	b510      	push	{r4, lr}
   d6266:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6268:	480f      	ldr	r0, [pc, #60]	; (d62a8 <pinAvailable+0x44>)
   d626a:	f7ff fa9f 	bl	d57ac <_ZN8SPIClass9isEnabledEv>
   d626e:	b128      	cbz	r0, d627c <pinAvailable+0x18>
   d6270:	f1a4 030b 	sub.w	r3, r4, #11
   d6274:	2b02      	cmp	r3, #2
   d6276:	d801      	bhi.n	d627c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6278:	2000      	movs	r0, #0
   d627a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d627c:	f000 f87a 	bl	d6374 <_Z19__fetch_global_Wirev>
   d6280:	f7ff fe5a 	bl	d5f38 <_ZN7TwoWire9isEnabledEv>
   d6284:	b108      	cbz	r0, d628a <pinAvailable+0x26>
   d6286:	2c01      	cmp	r4, #1
   d6288:	d9f6      	bls.n	d6278 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d628a:	f7ff fddd 	bl	d5e48 <_Z22__fetch_global_Serial1v>
   d628e:	f7ff fdd7 	bl	d5e40 <_ZN11USARTSerial9isEnabledEv>
   d6292:	b118      	cbz	r0, d629c <pinAvailable+0x38>
   d6294:	f1a4 0309 	sub.w	r3, r4, #9
   d6298:	2b01      	cmp	r3, #1
   d629a:	d9ed      	bls.n	d6278 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d629c:	2c23      	cmp	r4, #35	; 0x23
   d629e:	bf8c      	ite	hi
   d62a0:	2000      	movhi	r0, #0
   d62a2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d62a4:	bd10      	pop	{r4, pc}
   d62a6:	bf00      	nop
   d62a8:	2003e714 	.word	0x2003e714

000d62ac <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62ac:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d62ae:	b538      	push	{r3, r4, r5, lr}
   d62b0:	4604      	mov	r4, r0
   d62b2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d62b4:	d80a      	bhi.n	d62cc <pinMode+0x20>
   d62b6:	29ff      	cmp	r1, #255	; 0xff
   d62b8:	d008      	beq.n	d62cc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d62ba:	f7ff ffd3 	bl	d6264 <pinAvailable>
   d62be:	b128      	cbz	r0, d62cc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d62c0:	4629      	mov	r1, r5
   d62c2:	4620      	mov	r0, r4
}
   d62c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d62c8:	f7fe bfbc 	b.w	d5244 <HAL_Pin_Mode>
   d62cc:	bd38      	pop	{r3, r4, r5, pc}

000d62ce <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d62ce:	b538      	push	{r3, r4, r5, lr}
   d62d0:	4604      	mov	r4, r0
   d62d2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d62d4:	f7fe ffbe 	bl	d5254 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d62d8:	28ff      	cmp	r0, #255	; 0xff
   d62da:	d010      	beq.n	d62fe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d62dc:	2806      	cmp	r0, #6
   d62de:	d804      	bhi.n	d62ea <digitalWrite+0x1c>
   d62e0:	234d      	movs	r3, #77	; 0x4d
   d62e2:	fa23 f000 	lsr.w	r0, r3, r0
   d62e6:	07c3      	lsls	r3, r0, #31
   d62e8:	d409      	bmi.n	d62fe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d62ea:	4620      	mov	r0, r4
   d62ec:	f7ff ffba 	bl	d6264 <pinAvailable>
   d62f0:	b128      	cbz	r0, d62fe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d62f2:	4629      	mov	r1, r5
   d62f4:	4620      	mov	r0, r4
}
   d62f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d62fa:	f7fe bfb3 	b.w	d5264 <HAL_GPIO_Write>
   d62fe:	bd38      	pop	{r3, r4, r5, pc}

000d6300 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6300:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6302:	b510      	push	{r4, lr}
   d6304:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6306:	bf9c      	itt	ls
   d6308:	340e      	addls	r4, #14
   d630a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d630c:	4620      	mov	r0, r4
   d630e:	f7ff ffa9 	bl	d6264 <pinAvailable>
   d6312:	b150      	cbz	r0, d632a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6314:	2103      	movs	r1, #3
   d6316:	4620      	mov	r0, r4
   d6318:	f7fe ff8c 	bl	d5234 <HAL_Validate_Pin_Function>
   d631c:	2803      	cmp	r0, #3
   d631e:	d104      	bne.n	d632a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6320:	4620      	mov	r0, r4
}
   d6322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6326:	f7fe bfa5 	b.w	d5274 <HAL_ADC_Read>
}
   d632a:	2000      	movs	r0, #0
   d632c:	bd10      	pop	{r4, pc}
	...

000d6330 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6330:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6332:	4c0c      	ldr	r4, [pc, #48]	; (d6364 <_GLOBAL__sub_I_SPI+0x34>)
   d6334:	4e0c      	ldr	r6, [pc, #48]	; (d6368 <_GLOBAL__sub_I_SPI+0x38>)
   d6336:	4d0d      	ldr	r5, [pc, #52]	; (d636c <_GLOBAL__sub_I_SPI+0x3c>)
   d6338:	2100      	movs	r1, #0
   d633a:	4620      	mov	r0, r4
   d633c:	f7ff f9bc 	bl	d56b8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6340:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6342:	4c0b      	ldr	r4, [pc, #44]	; (d6370 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6344:	4632      	mov	r2, r6
   d6346:	4629      	mov	r1, r5
   d6348:	f000 f834 	bl	d63b4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d634c:	2101      	movs	r1, #1
   d634e:	4620      	mov	r0, r4
   d6350:	f7ff f9b2 	bl	d56b8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6354:	4632      	mov	r2, r6
   d6356:	4629      	mov	r1, r5
   d6358:	4620      	mov	r0, r4
   d635a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d635e:	f000 b829 	b.w	d63b4 <__aeabi_atexit>
   d6362:	bf00      	nop
   d6364:	2003e714 	.word	0x2003e714
   d6368:	2003e38c 	.word	0x2003e38c
   d636c:	000d56a9 	.word	0x000d56a9
   d6370:	2003e724 	.word	0x2003e724

000d6374 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6374:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6376:	4d0b      	ldr	r5, [pc, #44]	; (d63a4 <_Z19__fetch_global_Wirev+0x30>)
   d6378:	6829      	ldr	r1, [r5, #0]
   d637a:	f011 0401 	ands.w	r4, r1, #1
   d637e:	d10f      	bne.n	d63a0 <_Z19__fetch_global_Wirev+0x2c>
   d6380:	4628      	mov	r0, r5
   d6382:	f7fd fe99 	bl	d40b8 <__cxa_guard_acquire>
   d6386:	b158      	cbz	r0, d63a0 <_Z19__fetch_global_Wirev+0x2c>
   d6388:	4621      	mov	r1, r4
   d638a:	4807      	ldr	r0, [pc, #28]	; (d63a8 <_Z19__fetch_global_Wirev+0x34>)
   d638c:	f7ff fdae 	bl	d5eec <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6390:	4628      	mov	r0, r5
   d6392:	f7fd fe96 	bl	d40c2 <__cxa_guard_release>
   d6396:	4a05      	ldr	r2, [pc, #20]	; (d63ac <_Z19__fetch_global_Wirev+0x38>)
   d6398:	4905      	ldr	r1, [pc, #20]	; (d63b0 <_Z19__fetch_global_Wirev+0x3c>)
   d639a:	4803      	ldr	r0, [pc, #12]	; (d63a8 <_Z19__fetch_global_Wirev+0x34>)
   d639c:	f000 f80a 	bl	d63b4 <__aeabi_atexit>
	return wire;
}
   d63a0:	4801      	ldr	r0, [pc, #4]	; (d63a8 <_Z19__fetch_global_Wirev+0x34>)
   d63a2:	bd38      	pop	{r3, r4, r5, pc}
   d63a4:	2003e738 	.word	0x2003e738
   d63a8:	2003e73c 	.word	0x2003e73c
   d63ac:	2003e38c 	.word	0x2003e38c
   d63b0:	000d5e95 	.word	0x000d5e95

000d63b4 <__aeabi_atexit>:
   d63b4:	460b      	mov	r3, r1
   d63b6:	4601      	mov	r1, r0
   d63b8:	4618      	mov	r0, r3
   d63ba:	f000 be4b 	b.w	d7054 <__cxa_atexit>

000d63be <_ZdlPvj>:
   d63be:	f7fd be6c 	b.w	d409a <_ZdlPv>
	...

000d63c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d63c4:	4b18      	ldr	r3, [pc, #96]	; (d6428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d63c6:	681a      	ldr	r2, [r3, #0]
   d63c8:	07d1      	lsls	r1, r2, #31
   d63ca:	bf5c      	itt	pl
   d63cc:	2201      	movpl	r2, #1
   d63ce:	601a      	strpl	r2, [r3, #0]
   d63d0:	4b16      	ldr	r3, [pc, #88]	; (d642c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d63d2:	681a      	ldr	r2, [r3, #0]
   d63d4:	07d2      	lsls	r2, r2, #31
   d63d6:	bf5c      	itt	pl
   d63d8:	2201      	movpl	r2, #1
   d63da:	601a      	strpl	r2, [r3, #0]
   d63dc:	4b14      	ldr	r3, [pc, #80]	; (d6430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d63de:	681a      	ldr	r2, [r3, #0]
   d63e0:	07d0      	lsls	r0, r2, #31
   d63e2:	bf5c      	itt	pl
   d63e4:	2201      	movpl	r2, #1
   d63e6:	601a      	strpl	r2, [r3, #0]
   d63e8:	4b12      	ldr	r3, [pc, #72]	; (d6434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d63ea:	681a      	ldr	r2, [r3, #0]
   d63ec:	07d1      	lsls	r1, r2, #31
   d63ee:	bf5c      	itt	pl
   d63f0:	2201      	movpl	r2, #1
   d63f2:	601a      	strpl	r2, [r3, #0]
   d63f4:	4b10      	ldr	r3, [pc, #64]	; (d6438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d63f6:	681a      	ldr	r2, [r3, #0]
   d63f8:	07d2      	lsls	r2, r2, #31
   d63fa:	bf5c      	itt	pl
   d63fc:	2201      	movpl	r2, #1
   d63fe:	601a      	strpl	r2, [r3, #0]
   d6400:	4b0e      	ldr	r3, [pc, #56]	; (d643c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6402:	681a      	ldr	r2, [r3, #0]
   d6404:	07d0      	lsls	r0, r2, #31
   d6406:	bf5c      	itt	pl
   d6408:	2201      	movpl	r2, #1
   d640a:	601a      	strpl	r2, [r3, #0]
   d640c:	4b0c      	ldr	r3, [pc, #48]	; (d6440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d640e:	681a      	ldr	r2, [r3, #0]
   d6410:	07d1      	lsls	r1, r2, #31
   d6412:	bf5c      	itt	pl
   d6414:	2201      	movpl	r2, #1
   d6416:	601a      	strpl	r2, [r3, #0]
   d6418:	4b0a      	ldr	r3, [pc, #40]	; (d6444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d641a:	681a      	ldr	r2, [r3, #0]
   d641c:	07d2      	lsls	r2, r2, #31
   d641e:	bf5c      	itt	pl
   d6420:	2201      	movpl	r2, #1
   d6422:	601a      	strpl	r2, [r3, #0]
   d6424:	4770      	bx	lr
   d6426:	bf00      	nop
   d6428:	2003e76c 	.word	0x2003e76c
   d642c:	2003e768 	.word	0x2003e768
   d6430:	2003e764 	.word	0x2003e764
   d6434:	2003e760 	.word	0x2003e760
   d6438:	2003e75c 	.word	0x2003e75c
   d643c:	2003e758 	.word	0x2003e758
   d6440:	2003e754 	.word	0x2003e754
   d6444:	2003e750 	.word	0x2003e750

000d6448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6448:	4b24      	ldr	r3, [pc, #144]	; (d64dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d644a:	681a      	ldr	r2, [r3, #0]
   d644c:	07d0      	lsls	r0, r2, #31
   d644e:	bf5c      	itt	pl
   d6450:	2201      	movpl	r2, #1
   d6452:	601a      	strpl	r2, [r3, #0]
   d6454:	4b22      	ldr	r3, [pc, #136]	; (d64e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6456:	681a      	ldr	r2, [r3, #0]
   d6458:	07d1      	lsls	r1, r2, #31
   d645a:	bf5c      	itt	pl
   d645c:	2201      	movpl	r2, #1
   d645e:	601a      	strpl	r2, [r3, #0]
   d6460:	4b20      	ldr	r3, [pc, #128]	; (d64e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6462:	681a      	ldr	r2, [r3, #0]
   d6464:	07d2      	lsls	r2, r2, #31
   d6466:	bf5c      	itt	pl
   d6468:	2201      	movpl	r2, #1
   d646a:	601a      	strpl	r2, [r3, #0]
   d646c:	4b1e      	ldr	r3, [pc, #120]	; (d64e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d646e:	681a      	ldr	r2, [r3, #0]
   d6470:	07d0      	lsls	r0, r2, #31
   d6472:	bf5c      	itt	pl
   d6474:	2201      	movpl	r2, #1
   d6476:	601a      	strpl	r2, [r3, #0]
   d6478:	4b1c      	ldr	r3, [pc, #112]	; (d64ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d647a:	681a      	ldr	r2, [r3, #0]
   d647c:	07d1      	lsls	r1, r2, #31
   d647e:	bf5c      	itt	pl
   d6480:	2201      	movpl	r2, #1
   d6482:	601a      	strpl	r2, [r3, #0]
   d6484:	4b1a      	ldr	r3, [pc, #104]	; (d64f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6486:	681a      	ldr	r2, [r3, #0]
   d6488:	07d2      	lsls	r2, r2, #31
   d648a:	bf5c      	itt	pl
   d648c:	2201      	movpl	r2, #1
   d648e:	601a      	strpl	r2, [r3, #0]
   d6490:	4b18      	ldr	r3, [pc, #96]	; (d64f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6492:	681a      	ldr	r2, [r3, #0]
   d6494:	07d0      	lsls	r0, r2, #31
   d6496:	bf5c      	itt	pl
   d6498:	2201      	movpl	r2, #1
   d649a:	601a      	strpl	r2, [r3, #0]
   d649c:	4b16      	ldr	r3, [pc, #88]	; (d64f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d649e:	681a      	ldr	r2, [r3, #0]
   d64a0:	07d1      	lsls	r1, r2, #31
   d64a2:	bf5c      	itt	pl
   d64a4:	2201      	movpl	r2, #1
   d64a6:	601a      	strpl	r2, [r3, #0]
   d64a8:	4b14      	ldr	r3, [pc, #80]	; (d64fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d64aa:	681a      	ldr	r2, [r3, #0]
   d64ac:	07d2      	lsls	r2, r2, #31
   d64ae:	bf5c      	itt	pl
   d64b0:	2201      	movpl	r2, #1
   d64b2:	601a      	strpl	r2, [r3, #0]
   d64b4:	4b12      	ldr	r3, [pc, #72]	; (d6500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d64b6:	681a      	ldr	r2, [r3, #0]
   d64b8:	07d0      	lsls	r0, r2, #31
   d64ba:	bf5c      	itt	pl
   d64bc:	2201      	movpl	r2, #1
   d64be:	601a      	strpl	r2, [r3, #0]
   d64c0:	4b10      	ldr	r3, [pc, #64]	; (d6504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d64c2:	681a      	ldr	r2, [r3, #0]
   d64c4:	07d1      	lsls	r1, r2, #31
   d64c6:	bf5c      	itt	pl
   d64c8:	2201      	movpl	r2, #1
   d64ca:	601a      	strpl	r2, [r3, #0]
   d64cc:	4b0e      	ldr	r3, [pc, #56]	; (d6508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d64ce:	681a      	ldr	r2, [r3, #0]
   d64d0:	07d2      	lsls	r2, r2, #31
   d64d2:	bf5c      	itt	pl
   d64d4:	2201      	movpl	r2, #1
   d64d6:	601a      	strpl	r2, [r3, #0]
   d64d8:	4770      	bx	lr
   d64da:	bf00      	nop
   d64dc:	2003e79c 	.word	0x2003e79c
   d64e0:	2003e798 	.word	0x2003e798
   d64e4:	2003e794 	.word	0x2003e794
   d64e8:	2003e790 	.word	0x2003e790
   d64ec:	2003e78c 	.word	0x2003e78c
   d64f0:	2003e788 	.word	0x2003e788
   d64f4:	2003e784 	.word	0x2003e784
   d64f8:	2003e780 	.word	0x2003e780
   d64fc:	2003e77c 	.word	0x2003e77c
   d6500:	2003e778 	.word	0x2003e778
   d6504:	2003e774 	.word	0x2003e774
   d6508:	2003e770 	.word	0x2003e770

000d650c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d650c:	4b24      	ldr	r3, [pc, #144]	; (d65a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d650e:	681a      	ldr	r2, [r3, #0]
   d6510:	07d0      	lsls	r0, r2, #31
   d6512:	bf5c      	itt	pl
   d6514:	2201      	movpl	r2, #1
   d6516:	601a      	strpl	r2, [r3, #0]
   d6518:	4b22      	ldr	r3, [pc, #136]	; (d65a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d651a:	681a      	ldr	r2, [r3, #0]
   d651c:	07d1      	lsls	r1, r2, #31
   d651e:	bf5c      	itt	pl
   d6520:	2201      	movpl	r2, #1
   d6522:	601a      	strpl	r2, [r3, #0]
   d6524:	4b20      	ldr	r3, [pc, #128]	; (d65a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6526:	681a      	ldr	r2, [r3, #0]
   d6528:	07d2      	lsls	r2, r2, #31
   d652a:	bf5c      	itt	pl
   d652c:	2201      	movpl	r2, #1
   d652e:	601a      	strpl	r2, [r3, #0]
   d6530:	4b1e      	ldr	r3, [pc, #120]	; (d65ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6532:	681a      	ldr	r2, [r3, #0]
   d6534:	07d0      	lsls	r0, r2, #31
   d6536:	bf5c      	itt	pl
   d6538:	2201      	movpl	r2, #1
   d653a:	601a      	strpl	r2, [r3, #0]
   d653c:	4b1c      	ldr	r3, [pc, #112]	; (d65b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d653e:	681a      	ldr	r2, [r3, #0]
   d6540:	07d1      	lsls	r1, r2, #31
   d6542:	bf5c      	itt	pl
   d6544:	2201      	movpl	r2, #1
   d6546:	601a      	strpl	r2, [r3, #0]
   d6548:	4b1a      	ldr	r3, [pc, #104]	; (d65b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d654a:	681a      	ldr	r2, [r3, #0]
   d654c:	07d2      	lsls	r2, r2, #31
   d654e:	bf5c      	itt	pl
   d6550:	2201      	movpl	r2, #1
   d6552:	601a      	strpl	r2, [r3, #0]
   d6554:	4b18      	ldr	r3, [pc, #96]	; (d65b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6556:	681a      	ldr	r2, [r3, #0]
   d6558:	07d0      	lsls	r0, r2, #31
   d655a:	bf5c      	itt	pl
   d655c:	2201      	movpl	r2, #1
   d655e:	601a      	strpl	r2, [r3, #0]
   d6560:	4b16      	ldr	r3, [pc, #88]	; (d65bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6562:	681a      	ldr	r2, [r3, #0]
   d6564:	07d1      	lsls	r1, r2, #31
   d6566:	bf5c      	itt	pl
   d6568:	2201      	movpl	r2, #1
   d656a:	601a      	strpl	r2, [r3, #0]
   d656c:	4b14      	ldr	r3, [pc, #80]	; (d65c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d656e:	681a      	ldr	r2, [r3, #0]
   d6570:	07d2      	lsls	r2, r2, #31
   d6572:	bf5c      	itt	pl
   d6574:	2201      	movpl	r2, #1
   d6576:	601a      	strpl	r2, [r3, #0]
   d6578:	4b12      	ldr	r3, [pc, #72]	; (d65c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d657a:	681a      	ldr	r2, [r3, #0]
   d657c:	07d0      	lsls	r0, r2, #31
   d657e:	bf5c      	itt	pl
   d6580:	2201      	movpl	r2, #1
   d6582:	601a      	strpl	r2, [r3, #0]
   d6584:	4b10      	ldr	r3, [pc, #64]	; (d65c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6586:	681a      	ldr	r2, [r3, #0]
   d6588:	07d1      	lsls	r1, r2, #31
   d658a:	bf5c      	itt	pl
   d658c:	2201      	movpl	r2, #1
   d658e:	601a      	strpl	r2, [r3, #0]
   d6590:	4b0e      	ldr	r3, [pc, #56]	; (d65cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6592:	681a      	ldr	r2, [r3, #0]
   d6594:	07d2      	lsls	r2, r2, #31
   d6596:	bf5c      	itt	pl
   d6598:	2201      	movpl	r2, #1
   d659a:	601a      	strpl	r2, [r3, #0]
   d659c:	4770      	bx	lr
   d659e:	bf00      	nop
   d65a0:	2003e7cc 	.word	0x2003e7cc
   d65a4:	2003e7c8 	.word	0x2003e7c8
   d65a8:	2003e7c4 	.word	0x2003e7c4
   d65ac:	2003e7c0 	.word	0x2003e7c0
   d65b0:	2003e7bc 	.word	0x2003e7bc
   d65b4:	2003e7b8 	.word	0x2003e7b8
   d65b8:	2003e7b4 	.word	0x2003e7b4
   d65bc:	2003e7b0 	.word	0x2003e7b0
   d65c0:	2003e7ac 	.word	0x2003e7ac
   d65c4:	2003e7a8 	.word	0x2003e7a8
   d65c8:	2003e7a4 	.word	0x2003e7a4
   d65cc:	2003e7a0 	.word	0x2003e7a0

000d65d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d65d0:	4b18      	ldr	r3, [pc, #96]	; (d6634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d65d2:	681a      	ldr	r2, [r3, #0]
   d65d4:	07d1      	lsls	r1, r2, #31
   d65d6:	bf5c      	itt	pl
   d65d8:	2201      	movpl	r2, #1
   d65da:	601a      	strpl	r2, [r3, #0]
   d65dc:	4b16      	ldr	r3, [pc, #88]	; (d6638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d65de:	681a      	ldr	r2, [r3, #0]
   d65e0:	07d2      	lsls	r2, r2, #31
   d65e2:	bf5c      	itt	pl
   d65e4:	2201      	movpl	r2, #1
   d65e6:	601a      	strpl	r2, [r3, #0]
   d65e8:	4b14      	ldr	r3, [pc, #80]	; (d663c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d65ea:	681a      	ldr	r2, [r3, #0]
   d65ec:	07d0      	lsls	r0, r2, #31
   d65ee:	bf5c      	itt	pl
   d65f0:	2201      	movpl	r2, #1
   d65f2:	601a      	strpl	r2, [r3, #0]
   d65f4:	4b12      	ldr	r3, [pc, #72]	; (d6640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d65f6:	681a      	ldr	r2, [r3, #0]
   d65f8:	07d1      	lsls	r1, r2, #31
   d65fa:	bf5c      	itt	pl
   d65fc:	2201      	movpl	r2, #1
   d65fe:	601a      	strpl	r2, [r3, #0]
   d6600:	4b10      	ldr	r3, [pc, #64]	; (d6644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6602:	681a      	ldr	r2, [r3, #0]
   d6604:	07d2      	lsls	r2, r2, #31
   d6606:	bf5c      	itt	pl
   d6608:	2201      	movpl	r2, #1
   d660a:	601a      	strpl	r2, [r3, #0]
   d660c:	4b0e      	ldr	r3, [pc, #56]	; (d6648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d660e:	681a      	ldr	r2, [r3, #0]
   d6610:	07d0      	lsls	r0, r2, #31
   d6612:	bf5c      	itt	pl
   d6614:	2201      	movpl	r2, #1
   d6616:	601a      	strpl	r2, [r3, #0]
   d6618:	4b0c      	ldr	r3, [pc, #48]	; (d664c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d661a:	681a      	ldr	r2, [r3, #0]
   d661c:	07d1      	lsls	r1, r2, #31
   d661e:	bf5c      	itt	pl
   d6620:	2201      	movpl	r2, #1
   d6622:	601a      	strpl	r2, [r3, #0]
   d6624:	4b0a      	ldr	r3, [pc, #40]	; (d6650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6626:	681a      	ldr	r2, [r3, #0]
   d6628:	07d2      	lsls	r2, r2, #31
   d662a:	bf5c      	itt	pl
   d662c:	2201      	movpl	r2, #1
   d662e:	601a      	strpl	r2, [r3, #0]
   d6630:	4770      	bx	lr
   d6632:	bf00      	nop
   d6634:	2003e7ec 	.word	0x2003e7ec
   d6638:	2003e7e8 	.word	0x2003e7e8
   d663c:	2003e7e4 	.word	0x2003e7e4
   d6640:	2003e7e0 	.word	0x2003e7e0
   d6644:	2003e7dc 	.word	0x2003e7dc
   d6648:	2003e7d8 	.word	0x2003e7d8
   d664c:	2003e7d4 	.word	0x2003e7d4
   d6650:	2003e7d0 	.word	0x2003e7d0

000d6654 <__aeabi_drsub>:
   d6654:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6658:	e002      	b.n	d6660 <__adddf3>
   d665a:	bf00      	nop

000d665c <__aeabi_dsub>:
   d665c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6660 <__adddf3>:
   d6660:	b530      	push	{r4, r5, lr}
   d6662:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6666:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d666a:	ea94 0f05 	teq	r4, r5
   d666e:	bf08      	it	eq
   d6670:	ea90 0f02 	teqeq	r0, r2
   d6674:	bf1f      	itttt	ne
   d6676:	ea54 0c00 	orrsne.w	ip, r4, r0
   d667a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d667e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6682:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6686:	f000 80e2 	beq.w	d684e <__adddf3+0x1ee>
   d668a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d668e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6692:	bfb8      	it	lt
   d6694:	426d      	neglt	r5, r5
   d6696:	dd0c      	ble.n	d66b2 <__adddf3+0x52>
   d6698:	442c      	add	r4, r5
   d669a:	ea80 0202 	eor.w	r2, r0, r2
   d669e:	ea81 0303 	eor.w	r3, r1, r3
   d66a2:	ea82 0000 	eor.w	r0, r2, r0
   d66a6:	ea83 0101 	eor.w	r1, r3, r1
   d66aa:	ea80 0202 	eor.w	r2, r0, r2
   d66ae:	ea81 0303 	eor.w	r3, r1, r3
   d66b2:	2d36      	cmp	r5, #54	; 0x36
   d66b4:	bf88      	it	hi
   d66b6:	bd30      	pophi	{r4, r5, pc}
   d66b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d66bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d66c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d66c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d66c8:	d002      	beq.n	d66d0 <__adddf3+0x70>
   d66ca:	4240      	negs	r0, r0
   d66cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d66d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d66d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d66d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d66dc:	d002      	beq.n	d66e4 <__adddf3+0x84>
   d66de:	4252      	negs	r2, r2
   d66e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d66e4:	ea94 0f05 	teq	r4, r5
   d66e8:	f000 80a7 	beq.w	d683a <__adddf3+0x1da>
   d66ec:	f1a4 0401 	sub.w	r4, r4, #1
   d66f0:	f1d5 0e20 	rsbs	lr, r5, #32
   d66f4:	db0d      	blt.n	d6712 <__adddf3+0xb2>
   d66f6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d66fa:	fa22 f205 	lsr.w	r2, r2, r5
   d66fe:	1880      	adds	r0, r0, r2
   d6700:	f141 0100 	adc.w	r1, r1, #0
   d6704:	fa03 f20e 	lsl.w	r2, r3, lr
   d6708:	1880      	adds	r0, r0, r2
   d670a:	fa43 f305 	asr.w	r3, r3, r5
   d670e:	4159      	adcs	r1, r3
   d6710:	e00e      	b.n	d6730 <__adddf3+0xd0>
   d6712:	f1a5 0520 	sub.w	r5, r5, #32
   d6716:	f10e 0e20 	add.w	lr, lr, #32
   d671a:	2a01      	cmp	r2, #1
   d671c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6720:	bf28      	it	cs
   d6722:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6726:	fa43 f305 	asr.w	r3, r3, r5
   d672a:	18c0      	adds	r0, r0, r3
   d672c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6734:	d507      	bpl.n	d6746 <__adddf3+0xe6>
   d6736:	f04f 0e00 	mov.w	lr, #0
   d673a:	f1dc 0c00 	rsbs	ip, ip, #0
   d673e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6742:	eb6e 0101 	sbc.w	r1, lr, r1
   d6746:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d674a:	d31b      	bcc.n	d6784 <__adddf3+0x124>
   d674c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6750:	d30c      	bcc.n	d676c <__adddf3+0x10c>
   d6752:	0849      	lsrs	r1, r1, #1
   d6754:	ea5f 0030 	movs.w	r0, r0, rrx
   d6758:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d675c:	f104 0401 	add.w	r4, r4, #1
   d6760:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6764:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6768:	f080 809a 	bcs.w	d68a0 <__adddf3+0x240>
   d676c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6770:	bf08      	it	eq
   d6772:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6776:	f150 0000 	adcs.w	r0, r0, #0
   d677a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d677e:	ea41 0105 	orr.w	r1, r1, r5
   d6782:	bd30      	pop	{r4, r5, pc}
   d6784:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6788:	4140      	adcs	r0, r0
   d678a:	eb41 0101 	adc.w	r1, r1, r1
   d678e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6792:	f1a4 0401 	sub.w	r4, r4, #1
   d6796:	d1e9      	bne.n	d676c <__adddf3+0x10c>
   d6798:	f091 0f00 	teq	r1, #0
   d679c:	bf04      	itt	eq
   d679e:	4601      	moveq	r1, r0
   d67a0:	2000      	moveq	r0, #0
   d67a2:	fab1 f381 	clz	r3, r1
   d67a6:	bf08      	it	eq
   d67a8:	3320      	addeq	r3, #32
   d67aa:	f1a3 030b 	sub.w	r3, r3, #11
   d67ae:	f1b3 0220 	subs.w	r2, r3, #32
   d67b2:	da0c      	bge.n	d67ce <__adddf3+0x16e>
   d67b4:	320c      	adds	r2, #12
   d67b6:	dd08      	ble.n	d67ca <__adddf3+0x16a>
   d67b8:	f102 0c14 	add.w	ip, r2, #20
   d67bc:	f1c2 020c 	rsb	r2, r2, #12
   d67c0:	fa01 f00c 	lsl.w	r0, r1, ip
   d67c4:	fa21 f102 	lsr.w	r1, r1, r2
   d67c8:	e00c      	b.n	d67e4 <__adddf3+0x184>
   d67ca:	f102 0214 	add.w	r2, r2, #20
   d67ce:	bfd8      	it	le
   d67d0:	f1c2 0c20 	rsble	ip, r2, #32
   d67d4:	fa01 f102 	lsl.w	r1, r1, r2
   d67d8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d67dc:	bfdc      	itt	le
   d67de:	ea41 010c 	orrle.w	r1, r1, ip
   d67e2:	4090      	lslle	r0, r2
   d67e4:	1ae4      	subs	r4, r4, r3
   d67e6:	bfa2      	ittt	ge
   d67e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d67ec:	4329      	orrge	r1, r5
   d67ee:	bd30      	popge	{r4, r5, pc}
   d67f0:	ea6f 0404 	mvn.w	r4, r4
   d67f4:	3c1f      	subs	r4, #31
   d67f6:	da1c      	bge.n	d6832 <__adddf3+0x1d2>
   d67f8:	340c      	adds	r4, #12
   d67fa:	dc0e      	bgt.n	d681a <__adddf3+0x1ba>
   d67fc:	f104 0414 	add.w	r4, r4, #20
   d6800:	f1c4 0220 	rsb	r2, r4, #32
   d6804:	fa20 f004 	lsr.w	r0, r0, r4
   d6808:	fa01 f302 	lsl.w	r3, r1, r2
   d680c:	ea40 0003 	orr.w	r0, r0, r3
   d6810:	fa21 f304 	lsr.w	r3, r1, r4
   d6814:	ea45 0103 	orr.w	r1, r5, r3
   d6818:	bd30      	pop	{r4, r5, pc}
   d681a:	f1c4 040c 	rsb	r4, r4, #12
   d681e:	f1c4 0220 	rsb	r2, r4, #32
   d6822:	fa20 f002 	lsr.w	r0, r0, r2
   d6826:	fa01 f304 	lsl.w	r3, r1, r4
   d682a:	ea40 0003 	orr.w	r0, r0, r3
   d682e:	4629      	mov	r1, r5
   d6830:	bd30      	pop	{r4, r5, pc}
   d6832:	fa21 f004 	lsr.w	r0, r1, r4
   d6836:	4629      	mov	r1, r5
   d6838:	bd30      	pop	{r4, r5, pc}
   d683a:	f094 0f00 	teq	r4, #0
   d683e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6842:	bf06      	itte	eq
   d6844:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6848:	3401      	addeq	r4, #1
   d684a:	3d01      	subne	r5, #1
   d684c:	e74e      	b.n	d66ec <__adddf3+0x8c>
   d684e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6852:	bf18      	it	ne
   d6854:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6858:	d029      	beq.n	d68ae <__adddf3+0x24e>
   d685a:	ea94 0f05 	teq	r4, r5
   d685e:	bf08      	it	eq
   d6860:	ea90 0f02 	teqeq	r0, r2
   d6864:	d005      	beq.n	d6872 <__adddf3+0x212>
   d6866:	ea54 0c00 	orrs.w	ip, r4, r0
   d686a:	bf04      	itt	eq
   d686c:	4619      	moveq	r1, r3
   d686e:	4610      	moveq	r0, r2
   d6870:	bd30      	pop	{r4, r5, pc}
   d6872:	ea91 0f03 	teq	r1, r3
   d6876:	bf1e      	ittt	ne
   d6878:	2100      	movne	r1, #0
   d687a:	2000      	movne	r0, #0
   d687c:	bd30      	popne	{r4, r5, pc}
   d687e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6882:	d105      	bne.n	d6890 <__adddf3+0x230>
   d6884:	0040      	lsls	r0, r0, #1
   d6886:	4149      	adcs	r1, r1
   d6888:	bf28      	it	cs
   d688a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d688e:	bd30      	pop	{r4, r5, pc}
   d6890:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6894:	bf3c      	itt	cc
   d6896:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d689a:	bd30      	popcc	{r4, r5, pc}
   d689c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d68a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d68a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d68a8:	f04f 0000 	mov.w	r0, #0
   d68ac:	bd30      	pop	{r4, r5, pc}
   d68ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d68b2:	bf1a      	itte	ne
   d68b4:	4619      	movne	r1, r3
   d68b6:	4610      	movne	r0, r2
   d68b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d68bc:	bf1c      	itt	ne
   d68be:	460b      	movne	r3, r1
   d68c0:	4602      	movne	r2, r0
   d68c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d68c6:	bf06      	itte	eq
   d68c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d68cc:	ea91 0f03 	teqeq	r1, r3
   d68d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d68d4:	bd30      	pop	{r4, r5, pc}
   d68d6:	bf00      	nop

000d68d8 <__aeabi_ui2d>:
   d68d8:	f090 0f00 	teq	r0, #0
   d68dc:	bf04      	itt	eq
   d68de:	2100      	moveq	r1, #0
   d68e0:	4770      	bxeq	lr
   d68e2:	b530      	push	{r4, r5, lr}
   d68e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d68e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d68ec:	f04f 0500 	mov.w	r5, #0
   d68f0:	f04f 0100 	mov.w	r1, #0
   d68f4:	e750      	b.n	d6798 <__adddf3+0x138>
   d68f6:	bf00      	nop

000d68f8 <__aeabi_i2d>:
   d68f8:	f090 0f00 	teq	r0, #0
   d68fc:	bf04      	itt	eq
   d68fe:	2100      	moveq	r1, #0
   d6900:	4770      	bxeq	lr
   d6902:	b530      	push	{r4, r5, lr}
   d6904:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6908:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d690c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6910:	bf48      	it	mi
   d6912:	4240      	negmi	r0, r0
   d6914:	f04f 0100 	mov.w	r1, #0
   d6918:	e73e      	b.n	d6798 <__adddf3+0x138>
   d691a:	bf00      	nop

000d691c <__aeabi_f2d>:
   d691c:	0042      	lsls	r2, r0, #1
   d691e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6922:	ea4f 0131 	mov.w	r1, r1, rrx
   d6926:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d692a:	bf1f      	itttt	ne
   d692c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6930:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6934:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6938:	4770      	bxne	lr
   d693a:	f092 0f00 	teq	r2, #0
   d693e:	bf14      	ite	ne
   d6940:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6944:	4770      	bxeq	lr
   d6946:	b530      	push	{r4, r5, lr}
   d6948:	f44f 7460 	mov.w	r4, #896	; 0x380
   d694c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6950:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6954:	e720      	b.n	d6798 <__adddf3+0x138>
   d6956:	bf00      	nop

000d6958 <__aeabi_ul2d>:
   d6958:	ea50 0201 	orrs.w	r2, r0, r1
   d695c:	bf08      	it	eq
   d695e:	4770      	bxeq	lr
   d6960:	b530      	push	{r4, r5, lr}
   d6962:	f04f 0500 	mov.w	r5, #0
   d6966:	e00a      	b.n	d697e <__aeabi_l2d+0x16>

000d6968 <__aeabi_l2d>:
   d6968:	ea50 0201 	orrs.w	r2, r0, r1
   d696c:	bf08      	it	eq
   d696e:	4770      	bxeq	lr
   d6970:	b530      	push	{r4, r5, lr}
   d6972:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6976:	d502      	bpl.n	d697e <__aeabi_l2d+0x16>
   d6978:	4240      	negs	r0, r0
   d697a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d697e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6982:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6986:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d698a:	f43f aedc 	beq.w	d6746 <__adddf3+0xe6>
   d698e:	f04f 0203 	mov.w	r2, #3
   d6992:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6996:	bf18      	it	ne
   d6998:	3203      	addne	r2, #3
   d699a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d699e:	bf18      	it	ne
   d69a0:	3203      	addne	r2, #3
   d69a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d69a6:	f1c2 0320 	rsb	r3, r2, #32
   d69aa:	fa00 fc03 	lsl.w	ip, r0, r3
   d69ae:	fa20 f002 	lsr.w	r0, r0, r2
   d69b2:	fa01 fe03 	lsl.w	lr, r1, r3
   d69b6:	ea40 000e 	orr.w	r0, r0, lr
   d69ba:	fa21 f102 	lsr.w	r1, r1, r2
   d69be:	4414      	add	r4, r2
   d69c0:	e6c1      	b.n	d6746 <__adddf3+0xe6>
   d69c2:	bf00      	nop

000d69c4 <__aeabi_dmul>:
   d69c4:	b570      	push	{r4, r5, r6, lr}
   d69c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d69ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d69ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d69d2:	bf1d      	ittte	ne
   d69d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d69d8:	ea94 0f0c 	teqne	r4, ip
   d69dc:	ea95 0f0c 	teqne	r5, ip
   d69e0:	f000 f8de 	bleq	d6ba0 <__aeabi_dmul+0x1dc>
   d69e4:	442c      	add	r4, r5
   d69e6:	ea81 0603 	eor.w	r6, r1, r3
   d69ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d69ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d69f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d69f6:	bf18      	it	ne
   d69f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d69fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6a04:	d038      	beq.n	d6a78 <__aeabi_dmul+0xb4>
   d6a06:	fba0 ce02 	umull	ip, lr, r0, r2
   d6a0a:	f04f 0500 	mov.w	r5, #0
   d6a0e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6a12:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6a16:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6a1a:	f04f 0600 	mov.w	r6, #0
   d6a1e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6a22:	f09c 0f00 	teq	ip, #0
   d6a26:	bf18      	it	ne
   d6a28:	f04e 0e01 	orrne.w	lr, lr, #1
   d6a2c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6a30:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6a34:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6a38:	d204      	bcs.n	d6a44 <__aeabi_dmul+0x80>
   d6a3a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6a3e:	416d      	adcs	r5, r5
   d6a40:	eb46 0606 	adc.w	r6, r6, r6
   d6a44:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6a48:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6a4c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6a50:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6a54:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6a58:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6a5c:	bf88      	it	hi
   d6a5e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6a62:	d81e      	bhi.n	d6aa2 <__aeabi_dmul+0xde>
   d6a64:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6a68:	bf08      	it	eq
   d6a6a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6a6e:	f150 0000 	adcs.w	r0, r0, #0
   d6a72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6a76:	bd70      	pop	{r4, r5, r6, pc}
   d6a78:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6a7c:	ea46 0101 	orr.w	r1, r6, r1
   d6a80:	ea40 0002 	orr.w	r0, r0, r2
   d6a84:	ea81 0103 	eor.w	r1, r1, r3
   d6a88:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6a8c:	bfc2      	ittt	gt
   d6a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6a96:	bd70      	popgt	{r4, r5, r6, pc}
   d6a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a9c:	f04f 0e00 	mov.w	lr, #0
   d6aa0:	3c01      	subs	r4, #1
   d6aa2:	f300 80ab 	bgt.w	d6bfc <__aeabi_dmul+0x238>
   d6aa6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6aaa:	bfde      	ittt	le
   d6aac:	2000      	movle	r0, #0
   d6aae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6ab2:	bd70      	pople	{r4, r5, r6, pc}
   d6ab4:	f1c4 0400 	rsb	r4, r4, #0
   d6ab8:	3c20      	subs	r4, #32
   d6aba:	da35      	bge.n	d6b28 <__aeabi_dmul+0x164>
   d6abc:	340c      	adds	r4, #12
   d6abe:	dc1b      	bgt.n	d6af8 <__aeabi_dmul+0x134>
   d6ac0:	f104 0414 	add.w	r4, r4, #20
   d6ac4:	f1c4 0520 	rsb	r5, r4, #32
   d6ac8:	fa00 f305 	lsl.w	r3, r0, r5
   d6acc:	fa20 f004 	lsr.w	r0, r0, r4
   d6ad0:	fa01 f205 	lsl.w	r2, r1, r5
   d6ad4:	ea40 0002 	orr.w	r0, r0, r2
   d6ad8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6adc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6ae0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6ae4:	fa21 f604 	lsr.w	r6, r1, r4
   d6ae8:	eb42 0106 	adc.w	r1, r2, r6
   d6aec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6af0:	bf08      	it	eq
   d6af2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6af6:	bd70      	pop	{r4, r5, r6, pc}
   d6af8:	f1c4 040c 	rsb	r4, r4, #12
   d6afc:	f1c4 0520 	rsb	r5, r4, #32
   d6b00:	fa00 f304 	lsl.w	r3, r0, r4
   d6b04:	fa20 f005 	lsr.w	r0, r0, r5
   d6b08:	fa01 f204 	lsl.w	r2, r1, r4
   d6b0c:	ea40 0002 	orr.w	r0, r0, r2
   d6b10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6b18:	f141 0100 	adc.w	r1, r1, #0
   d6b1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6b20:	bf08      	it	eq
   d6b22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b26:	bd70      	pop	{r4, r5, r6, pc}
   d6b28:	f1c4 0520 	rsb	r5, r4, #32
   d6b2c:	fa00 f205 	lsl.w	r2, r0, r5
   d6b30:	ea4e 0e02 	orr.w	lr, lr, r2
   d6b34:	fa20 f304 	lsr.w	r3, r0, r4
   d6b38:	fa01 f205 	lsl.w	r2, r1, r5
   d6b3c:	ea43 0302 	orr.w	r3, r3, r2
   d6b40:	fa21 f004 	lsr.w	r0, r1, r4
   d6b44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6b48:	fa21 f204 	lsr.w	r2, r1, r4
   d6b4c:	ea20 0002 	bic.w	r0, r0, r2
   d6b50:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6b54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6b58:	bf08      	it	eq
   d6b5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6b5e:	bd70      	pop	{r4, r5, r6, pc}
   d6b60:	f094 0f00 	teq	r4, #0
   d6b64:	d10f      	bne.n	d6b86 <__aeabi_dmul+0x1c2>
   d6b66:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6b6a:	0040      	lsls	r0, r0, #1
   d6b6c:	eb41 0101 	adc.w	r1, r1, r1
   d6b70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6b74:	bf08      	it	eq
   d6b76:	3c01      	subeq	r4, #1
   d6b78:	d0f7      	beq.n	d6b6a <__aeabi_dmul+0x1a6>
   d6b7a:	ea41 0106 	orr.w	r1, r1, r6
   d6b7e:	f095 0f00 	teq	r5, #0
   d6b82:	bf18      	it	ne
   d6b84:	4770      	bxne	lr
   d6b86:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6b8a:	0052      	lsls	r2, r2, #1
   d6b8c:	eb43 0303 	adc.w	r3, r3, r3
   d6b90:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6b94:	bf08      	it	eq
   d6b96:	3d01      	subeq	r5, #1
   d6b98:	d0f7      	beq.n	d6b8a <__aeabi_dmul+0x1c6>
   d6b9a:	ea43 0306 	orr.w	r3, r3, r6
   d6b9e:	4770      	bx	lr
   d6ba0:	ea94 0f0c 	teq	r4, ip
   d6ba4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6ba8:	bf18      	it	ne
   d6baa:	ea95 0f0c 	teqne	r5, ip
   d6bae:	d00c      	beq.n	d6bca <__aeabi_dmul+0x206>
   d6bb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6bb4:	bf18      	it	ne
   d6bb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6bba:	d1d1      	bne.n	d6b60 <__aeabi_dmul+0x19c>
   d6bbc:	ea81 0103 	eor.w	r1, r1, r3
   d6bc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6bc4:	f04f 0000 	mov.w	r0, #0
   d6bc8:	bd70      	pop	{r4, r5, r6, pc}
   d6bca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6bce:	bf06      	itte	eq
   d6bd0:	4610      	moveq	r0, r2
   d6bd2:	4619      	moveq	r1, r3
   d6bd4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6bd8:	d019      	beq.n	d6c0e <__aeabi_dmul+0x24a>
   d6bda:	ea94 0f0c 	teq	r4, ip
   d6bde:	d102      	bne.n	d6be6 <__aeabi_dmul+0x222>
   d6be0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6be4:	d113      	bne.n	d6c0e <__aeabi_dmul+0x24a>
   d6be6:	ea95 0f0c 	teq	r5, ip
   d6bea:	d105      	bne.n	d6bf8 <__aeabi_dmul+0x234>
   d6bec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6bf0:	bf1c      	itt	ne
   d6bf2:	4610      	movne	r0, r2
   d6bf4:	4619      	movne	r1, r3
   d6bf6:	d10a      	bne.n	d6c0e <__aeabi_dmul+0x24a>
   d6bf8:	ea81 0103 	eor.w	r1, r1, r3
   d6bfc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6c00:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6c04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6c08:	f04f 0000 	mov.w	r0, #0
   d6c0c:	bd70      	pop	{r4, r5, r6, pc}
   d6c0e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6c12:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6c16:	bd70      	pop	{r4, r5, r6, pc}

000d6c18 <__aeabi_ddiv>:
   d6c18:	b570      	push	{r4, r5, r6, lr}
   d6c1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6c1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6c22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6c26:	bf1d      	ittte	ne
   d6c28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6c2c:	ea94 0f0c 	teqne	r4, ip
   d6c30:	ea95 0f0c 	teqne	r5, ip
   d6c34:	f000 f8a7 	bleq	d6d86 <__aeabi_ddiv+0x16e>
   d6c38:	eba4 0405 	sub.w	r4, r4, r5
   d6c3c:	ea81 0e03 	eor.w	lr, r1, r3
   d6c40:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6c44:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6c48:	f000 8088 	beq.w	d6d5c <__aeabi_ddiv+0x144>
   d6c4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6c50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6c54:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6c58:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6c5c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6c60:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6c64:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6c68:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6c6c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6c70:	429d      	cmp	r5, r3
   d6c72:	bf08      	it	eq
   d6c74:	4296      	cmpeq	r6, r2
   d6c76:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6c7a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6c7e:	d202      	bcs.n	d6c86 <__aeabi_ddiv+0x6e>
   d6c80:	085b      	lsrs	r3, r3, #1
   d6c82:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c86:	1ab6      	subs	r6, r6, r2
   d6c88:	eb65 0503 	sbc.w	r5, r5, r3
   d6c8c:	085b      	lsrs	r3, r3, #1
   d6c8e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6c92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d6c96:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6c9a:	ebb6 0e02 	subs.w	lr, r6, r2
   d6c9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6ca2:	bf22      	ittt	cs
   d6ca4:	1ab6      	subcs	r6, r6, r2
   d6ca6:	4675      	movcs	r5, lr
   d6ca8:	ea40 000c 	orrcs.w	r0, r0, ip
   d6cac:	085b      	lsrs	r3, r3, #1
   d6cae:	ea4f 0232 	mov.w	r2, r2, rrx
   d6cb2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6cb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6cba:	bf22      	ittt	cs
   d6cbc:	1ab6      	subcs	r6, r6, r2
   d6cbe:	4675      	movcs	r5, lr
   d6cc0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6cc4:	085b      	lsrs	r3, r3, #1
   d6cc6:	ea4f 0232 	mov.w	r2, r2, rrx
   d6cca:	ebb6 0e02 	subs.w	lr, r6, r2
   d6cce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6cd2:	bf22      	ittt	cs
   d6cd4:	1ab6      	subcs	r6, r6, r2
   d6cd6:	4675      	movcs	r5, lr
   d6cd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6cdc:	085b      	lsrs	r3, r3, #1
   d6cde:	ea4f 0232 	mov.w	r2, r2, rrx
   d6ce2:	ebb6 0e02 	subs.w	lr, r6, r2
   d6ce6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6cea:	bf22      	ittt	cs
   d6cec:	1ab6      	subcs	r6, r6, r2
   d6cee:	4675      	movcs	r5, lr
   d6cf0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6cf4:	ea55 0e06 	orrs.w	lr, r5, r6
   d6cf8:	d018      	beq.n	d6d2c <__aeabi_ddiv+0x114>
   d6cfa:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6cfe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6d02:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6d06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6d0a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6d0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6d12:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6d16:	d1c0      	bne.n	d6c9a <__aeabi_ddiv+0x82>
   d6d18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d1c:	d10b      	bne.n	d6d36 <__aeabi_ddiv+0x11e>
   d6d1e:	ea41 0100 	orr.w	r1, r1, r0
   d6d22:	f04f 0000 	mov.w	r0, #0
   d6d26:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6d2a:	e7b6      	b.n	d6c9a <__aeabi_ddiv+0x82>
   d6d2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d30:	bf04      	itt	eq
   d6d32:	4301      	orreq	r1, r0
   d6d34:	2000      	moveq	r0, #0
   d6d36:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6d3a:	bf88      	it	hi
   d6d3c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6d40:	f63f aeaf 	bhi.w	d6aa2 <__aeabi_dmul+0xde>
   d6d44:	ebb5 0c03 	subs.w	ip, r5, r3
   d6d48:	bf04      	itt	eq
   d6d4a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6d4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6d52:	f150 0000 	adcs.w	r0, r0, #0
   d6d56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6d5a:	bd70      	pop	{r4, r5, r6, pc}
   d6d5c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6d60:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6d64:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6d68:	bfc2      	ittt	gt
   d6d6a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6d6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6d72:	bd70      	popgt	{r4, r5, r6, pc}
   d6d74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6d78:	f04f 0e00 	mov.w	lr, #0
   d6d7c:	3c01      	subs	r4, #1
   d6d7e:	e690      	b.n	d6aa2 <__aeabi_dmul+0xde>
   d6d80:	ea45 0e06 	orr.w	lr, r5, r6
   d6d84:	e68d      	b.n	d6aa2 <__aeabi_dmul+0xde>
   d6d86:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6d8a:	ea94 0f0c 	teq	r4, ip
   d6d8e:	bf08      	it	eq
   d6d90:	ea95 0f0c 	teqeq	r5, ip
   d6d94:	f43f af3b 	beq.w	d6c0e <__aeabi_dmul+0x24a>
   d6d98:	ea94 0f0c 	teq	r4, ip
   d6d9c:	d10a      	bne.n	d6db4 <__aeabi_ddiv+0x19c>
   d6d9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6da2:	f47f af34 	bne.w	d6c0e <__aeabi_dmul+0x24a>
   d6da6:	ea95 0f0c 	teq	r5, ip
   d6daa:	f47f af25 	bne.w	d6bf8 <__aeabi_dmul+0x234>
   d6dae:	4610      	mov	r0, r2
   d6db0:	4619      	mov	r1, r3
   d6db2:	e72c      	b.n	d6c0e <__aeabi_dmul+0x24a>
   d6db4:	ea95 0f0c 	teq	r5, ip
   d6db8:	d106      	bne.n	d6dc8 <__aeabi_ddiv+0x1b0>
   d6dba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6dbe:	f43f aefd 	beq.w	d6bbc <__aeabi_dmul+0x1f8>
   d6dc2:	4610      	mov	r0, r2
   d6dc4:	4619      	mov	r1, r3
   d6dc6:	e722      	b.n	d6c0e <__aeabi_dmul+0x24a>
   d6dc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6dcc:	bf18      	it	ne
   d6dce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6dd2:	f47f aec5 	bne.w	d6b60 <__aeabi_dmul+0x19c>
   d6dd6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6dda:	f47f af0d 	bne.w	d6bf8 <__aeabi_dmul+0x234>
   d6dde:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6de2:	f47f aeeb 	bne.w	d6bbc <__aeabi_dmul+0x1f8>
   d6de6:	e712      	b.n	d6c0e <__aeabi_dmul+0x24a>

000d6de8 <__gedf2>:
   d6de8:	f04f 3cff 	mov.w	ip, #4294967295
   d6dec:	e006      	b.n	d6dfc <__cmpdf2+0x4>
   d6dee:	bf00      	nop

000d6df0 <__ledf2>:
   d6df0:	f04f 0c01 	mov.w	ip, #1
   d6df4:	e002      	b.n	d6dfc <__cmpdf2+0x4>
   d6df6:	bf00      	nop

000d6df8 <__cmpdf2>:
   d6df8:	f04f 0c01 	mov.w	ip, #1
   d6dfc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6e00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6e04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6e0c:	bf18      	it	ne
   d6e0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6e12:	d01b      	beq.n	d6e4c <__cmpdf2+0x54>
   d6e14:	b001      	add	sp, #4
   d6e16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6e1a:	bf0c      	ite	eq
   d6e1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6e20:	ea91 0f03 	teqne	r1, r3
   d6e24:	bf02      	ittt	eq
   d6e26:	ea90 0f02 	teqeq	r0, r2
   d6e2a:	2000      	moveq	r0, #0
   d6e2c:	4770      	bxeq	lr
   d6e2e:	f110 0f00 	cmn.w	r0, #0
   d6e32:	ea91 0f03 	teq	r1, r3
   d6e36:	bf58      	it	pl
   d6e38:	4299      	cmppl	r1, r3
   d6e3a:	bf08      	it	eq
   d6e3c:	4290      	cmpeq	r0, r2
   d6e3e:	bf2c      	ite	cs
   d6e40:	17d8      	asrcs	r0, r3, #31
   d6e42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6e46:	f040 0001 	orr.w	r0, r0, #1
   d6e4a:	4770      	bx	lr
   d6e4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6e50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e54:	d102      	bne.n	d6e5c <__cmpdf2+0x64>
   d6e56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6e5a:	d107      	bne.n	d6e6c <__cmpdf2+0x74>
   d6e5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6e60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6e64:	d1d6      	bne.n	d6e14 <__cmpdf2+0x1c>
   d6e66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6e6a:	d0d3      	beq.n	d6e14 <__cmpdf2+0x1c>
   d6e6c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6e70:	4770      	bx	lr
   d6e72:	bf00      	nop

000d6e74 <__aeabi_cdrcmple>:
   d6e74:	4684      	mov	ip, r0
   d6e76:	4610      	mov	r0, r2
   d6e78:	4662      	mov	r2, ip
   d6e7a:	468c      	mov	ip, r1
   d6e7c:	4619      	mov	r1, r3
   d6e7e:	4663      	mov	r3, ip
   d6e80:	e000      	b.n	d6e84 <__aeabi_cdcmpeq>
   d6e82:	bf00      	nop

000d6e84 <__aeabi_cdcmpeq>:
   d6e84:	b501      	push	{r0, lr}
   d6e86:	f7ff ffb7 	bl	d6df8 <__cmpdf2>
   d6e8a:	2800      	cmp	r0, #0
   d6e8c:	bf48      	it	mi
   d6e8e:	f110 0f00 	cmnmi.w	r0, #0
   d6e92:	bd01      	pop	{r0, pc}

000d6e94 <__aeabi_dcmpeq>:
   d6e94:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6e98:	f7ff fff4 	bl	d6e84 <__aeabi_cdcmpeq>
   d6e9c:	bf0c      	ite	eq
   d6e9e:	2001      	moveq	r0, #1
   d6ea0:	2000      	movne	r0, #0
   d6ea2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ea6:	bf00      	nop

000d6ea8 <__aeabi_dcmplt>:
   d6ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6eac:	f7ff ffea 	bl	d6e84 <__aeabi_cdcmpeq>
   d6eb0:	bf34      	ite	cc
   d6eb2:	2001      	movcc	r0, #1
   d6eb4:	2000      	movcs	r0, #0
   d6eb6:	f85d fb08 	ldr.w	pc, [sp], #8
   d6eba:	bf00      	nop

000d6ebc <__aeabi_dcmple>:
   d6ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ec0:	f7ff ffe0 	bl	d6e84 <__aeabi_cdcmpeq>
   d6ec4:	bf94      	ite	ls
   d6ec6:	2001      	movls	r0, #1
   d6ec8:	2000      	movhi	r0, #0
   d6eca:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ece:	bf00      	nop

000d6ed0 <__aeabi_dcmpge>:
   d6ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ed4:	f7ff ffce 	bl	d6e74 <__aeabi_cdrcmple>
   d6ed8:	bf94      	ite	ls
   d6eda:	2001      	movls	r0, #1
   d6edc:	2000      	movhi	r0, #0
   d6ede:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ee2:	bf00      	nop

000d6ee4 <__aeabi_dcmpgt>:
   d6ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6ee8:	f7ff ffc4 	bl	d6e74 <__aeabi_cdrcmple>
   d6eec:	bf34      	ite	cc
   d6eee:	2001      	movcc	r0, #1
   d6ef0:	2000      	movcs	r0, #0
   d6ef2:	f85d fb08 	ldr.w	pc, [sp], #8
   d6ef6:	bf00      	nop

000d6ef8 <__aeabi_dcmpun>:
   d6ef8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6efc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f00:	d102      	bne.n	d6f08 <__aeabi_dcmpun+0x10>
   d6f02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6f06:	d10a      	bne.n	d6f1e <__aeabi_dcmpun+0x26>
   d6f08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6f0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6f10:	d102      	bne.n	d6f18 <__aeabi_dcmpun+0x20>
   d6f12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6f16:	d102      	bne.n	d6f1e <__aeabi_dcmpun+0x26>
   d6f18:	f04f 0000 	mov.w	r0, #0
   d6f1c:	4770      	bx	lr
   d6f1e:	f04f 0001 	mov.w	r0, #1
   d6f22:	4770      	bx	lr

000d6f24 <__aeabi_d2iz>:
   d6f24:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6f28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6f2c:	d215      	bcs.n	d6f5a <__aeabi_d2iz+0x36>
   d6f2e:	d511      	bpl.n	d6f54 <__aeabi_d2iz+0x30>
   d6f30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6f34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6f38:	d912      	bls.n	d6f60 <__aeabi_d2iz+0x3c>
   d6f3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6f3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6f42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6f46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6f4a:	fa23 f002 	lsr.w	r0, r3, r2
   d6f4e:	bf18      	it	ne
   d6f50:	4240      	negne	r0, r0
   d6f52:	4770      	bx	lr
   d6f54:	f04f 0000 	mov.w	r0, #0
   d6f58:	4770      	bx	lr
   d6f5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6f5e:	d105      	bne.n	d6f6c <__aeabi_d2iz+0x48>
   d6f60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d6f64:	bf08      	it	eq
   d6f66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6f6a:	4770      	bx	lr
   d6f6c:	f04f 0000 	mov.w	r0, #0
   d6f70:	4770      	bx	lr
   d6f72:	bf00      	nop

000d6f74 <__aeabi_d2uiz>:
   d6f74:	004a      	lsls	r2, r1, #1
   d6f76:	d211      	bcs.n	d6f9c <__aeabi_d2uiz+0x28>
   d6f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6f7c:	d211      	bcs.n	d6fa2 <__aeabi_d2uiz+0x2e>
   d6f7e:	d50d      	bpl.n	d6f9c <__aeabi_d2uiz+0x28>
   d6f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6f88:	d40e      	bmi.n	d6fa8 <__aeabi_d2uiz+0x34>
   d6f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6f96:	fa23 f002 	lsr.w	r0, r3, r2
   d6f9a:	4770      	bx	lr
   d6f9c:	f04f 0000 	mov.w	r0, #0
   d6fa0:	4770      	bx	lr
   d6fa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6fa6:	d102      	bne.n	d6fae <__aeabi_d2uiz+0x3a>
   d6fa8:	f04f 30ff 	mov.w	r0, #4294967295
   d6fac:	4770      	bx	lr
   d6fae:	f04f 0000 	mov.w	r0, #0
   d6fb2:	4770      	bx	lr

000d6fb4 <__aeabi_d2f>:
   d6fb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6fb8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6fbc:	bf24      	itt	cs
   d6fbe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6fc2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6fc6:	d90d      	bls.n	d6fe4 <__aeabi_d2f+0x30>
   d6fc8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6fcc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6fd0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6fd4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6fd8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6fdc:	bf08      	it	eq
   d6fde:	f020 0001 	biceq.w	r0, r0, #1
   d6fe2:	4770      	bx	lr
   d6fe4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6fe8:	d121      	bne.n	d702e <__aeabi_d2f+0x7a>
   d6fea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6fee:	bfbc      	itt	lt
   d6ff0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6ff4:	4770      	bxlt	lr
   d6ff6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6ffa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6ffe:	f1c2 0218 	rsb	r2, r2, #24
   d7002:	f1c2 0c20 	rsb	ip, r2, #32
   d7006:	fa10 f30c 	lsls.w	r3, r0, ip
   d700a:	fa20 f002 	lsr.w	r0, r0, r2
   d700e:	bf18      	it	ne
   d7010:	f040 0001 	orrne.w	r0, r0, #1
   d7014:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7018:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d701c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7020:	ea40 000c 	orr.w	r0, r0, ip
   d7024:	fa23 f302 	lsr.w	r3, r3, r2
   d7028:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d702c:	e7cc      	b.n	d6fc8 <__aeabi_d2f+0x14>
   d702e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7032:	d107      	bne.n	d7044 <__aeabi_d2f+0x90>
   d7034:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7038:	bf1e      	ittt	ne
   d703a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d703e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7042:	4770      	bxne	lr
   d7044:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7048:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d704c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7050:	4770      	bx	lr
   d7052:	bf00      	nop

000d7054 <__cxa_atexit>:
   d7054:	b510      	push	{r4, lr}
   d7056:	4c05      	ldr	r4, [pc, #20]	; (d706c <__cxa_atexit+0x18>)
   d7058:	4613      	mov	r3, r2
   d705a:	b12c      	cbz	r4, d7068 <__cxa_atexit+0x14>
   d705c:	460a      	mov	r2, r1
   d705e:	4601      	mov	r1, r0
   d7060:	2002      	movs	r0, #2
   d7062:	f3af 8000 	nop.w
   d7066:	bd10      	pop	{r4, pc}
   d7068:	4620      	mov	r0, r4
   d706a:	bd10      	pop	{r4, pc}
   d706c:	00000000 	.word	0x00000000

000d7070 <memcpy>:
   d7070:	b510      	push	{r4, lr}
   d7072:	1e43      	subs	r3, r0, #1
   d7074:	440a      	add	r2, r1
   d7076:	4291      	cmp	r1, r2
   d7078:	d004      	beq.n	d7084 <memcpy+0x14>
   d707a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d707e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7082:	e7f8      	b.n	d7076 <memcpy+0x6>
   d7084:	bd10      	pop	{r4, pc}

000d7086 <memset>:
   d7086:	4402      	add	r2, r0
   d7088:	4603      	mov	r3, r0
   d708a:	4293      	cmp	r3, r2
   d708c:	d002      	beq.n	d7094 <memset+0xe>
   d708e:	f803 1b01 	strb.w	r1, [r3], #1
   d7092:	e7fa      	b.n	d708a <memset+0x4>
   d7094:	4770      	bx	lr
	...

000d7098 <srand>:
   d7098:	b538      	push	{r3, r4, r5, lr}
   d709a:	4b12      	ldr	r3, [pc, #72]	; (d70e4 <srand+0x4c>)
   d709c:	681c      	ldr	r4, [r3, #0]
   d709e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d70a0:	4605      	mov	r5, r0
   d70a2:	b9d3      	cbnz	r3, d70da <srand+0x42>
   d70a4:	2018      	movs	r0, #24
   d70a6:	f7fe fab1 	bl	d560c <malloc>
   d70aa:	f243 330e 	movw	r3, #13070	; 0x330e
   d70ae:	63a0      	str	r0, [r4, #56]	; 0x38
   d70b0:	8003      	strh	r3, [r0, #0]
   d70b2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d70b6:	8043      	strh	r3, [r0, #2]
   d70b8:	f241 2334 	movw	r3, #4660	; 0x1234
   d70bc:	8083      	strh	r3, [r0, #4]
   d70be:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d70c2:	80c3      	strh	r3, [r0, #6]
   d70c4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d70c8:	8103      	strh	r3, [r0, #8]
   d70ca:	2305      	movs	r3, #5
   d70cc:	8143      	strh	r3, [r0, #10]
   d70ce:	230b      	movs	r3, #11
   d70d0:	8183      	strh	r3, [r0, #12]
   d70d2:	2201      	movs	r2, #1
   d70d4:	2300      	movs	r3, #0
   d70d6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d70da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d70dc:	2200      	movs	r2, #0
   d70de:	611d      	str	r5, [r3, #16]
   d70e0:	615a      	str	r2, [r3, #20]
   d70e2:	bd38      	pop	{r3, r4, r5, pc}
   d70e4:	2003e388 	.word	0x2003e388

000d70e8 <strlen>:
   d70e8:	4603      	mov	r3, r0
   d70ea:	f813 2b01 	ldrb.w	r2, [r3], #1
   d70ee:	2a00      	cmp	r2, #0
   d70f0:	d1fb      	bne.n	d70ea <strlen+0x2>
   d70f2:	1a18      	subs	r0, r3, r0
   d70f4:	3801      	subs	r0, #1
   d70f6:	4770      	bx	lr

000d70f8 <dynalib_user>:
   d70f8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7108:	0000 0000                                   ....

000d710c <_ZTV12Adafruit_GFX>:
	...
   d711c:	47fd 000d 57dd 000d 40a5 000d 430b 000d     .G...W...@...C..
   d712c:	42c1 000d 42f3 000d 42cf 000d 42e1 000d     .B...B...B...B..
   d713c:	4201 000d 430b 000d 44eb 000d 44e9 000d     .B...C...D...D..
   d714c:	430d 000d 434b 000d 4385 000d 43cb 000d     .C..KC...C...C..
   d715c:	43e7 000d 4469 000d                         .C..iD..

000d7164 <_ZL4font>:
   d7164:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d7174:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d7184:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d7194:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d71a4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d71b4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d71c4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d71d4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d71e4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d71f4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d7204:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d7214:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d7224:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d7234:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d7244:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d7254:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d7264:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d7274:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d7284:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d7294:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d72a4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d72b4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d72c4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d72d4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d72e4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d72f4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d7304:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d7314:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d7324:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d7334:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d7344:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d7354:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d7364:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d7374:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d7384:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d7394:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d73a4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d73b4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d73c4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d73d4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d73e4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d73f4:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d7404:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d7414:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d7424:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d7434:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d7444:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d7454:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d7464:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d7474:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d7484:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d7494:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d74a4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d74b4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d74c4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d74d4:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d74e4:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d74f4:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d7504:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d7514:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d7524:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d7534:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d7544:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d7554:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d7564:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d7574:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d7584:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d7594:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d75a4:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d75b4:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d75c4:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d75d4:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d75e4:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d75f4:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d7604:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d7614:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d7624:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d7634:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d7644:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d7654:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000d7664 <_ZTV16Adafruit_SSD1306>:
	...
   d766c:	40c9 000d 41a9 000d 47fd 000d 57dd 000d     .@...A...G...W..
   d767c:	4ced 000d 430b 000d 42c1 000d 42f3 000d     .L...C...B...B..
   d768c:	42cf 000d 42e1 000d 4201 000d 430b 000d     .B...B...B...C..
   d769c:	44eb 000d 44e9 000d 4afd 000d 490d 000d     .D...D...J...I..
   d76ac:	4385 000d 43cb 000d 43e7 000d 4469 000d     .C...C...C..iD..

000d76bc <_ZTVN5spark13EthernetClassE>:
	...
   d76c4:	568b 000d 5681 000d 5677 000d 566d 000d     .V...V..wV..mV..
   d76d4:	5661 000d 5655 000d 5649 000d 5641 000d     aV..UV..IV..AV..
   d76e4:	5637 000d 562d 000d 6185 000d               7V..-V...a..

000d76f0 <_ZTV8SPIClass>:
	...
   d76f8:	56a9 000d 56ab 000d                         .V...V..

000d7700 <_ZL14clock_divisors>:
   d7700:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   d7710:	002e 6e69 0066 6e6c 6600 006e 6f63 6564     ..inf.ln.fn.code
   d7720:	6400 7465 6961 006c 0a0d 2500 3130 7530     .detail....%010u
   d7730:	0020 205d 2500 0064 202c 2800 3a29 0020      .] .%d., .(): .
   d7740:	5b20 6300 646f 2065 203d 2500 0069 6564      [.code = .%i.de
   d7750:	6174 6c69 2073 203d 6200 7561 0064 6553     tails = .baud.Se
   d7760:	6972 6c61 5300 7265 6169 316c 7400 7079     rial.Serial1.typ
   d7770:	0065 6170 6172 006d 6d63 0064 6469 6800     e.param.cmd.id.h
   d7780:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   d7790:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   d77a0:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   d77b0:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   d77c0:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   d77d0:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d77e0:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d77f0:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   d7800:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   d7810:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d7820 <_ZTV9IPAddress>:
	...
   d7828:	5bad 000d 5b9d 000d 5b9f 000d               .[...[...[..

000d7834 <_ZTV9USBSerial>:
	...
   d783c:	5c85 000d 5cd5 000d 5ce3 000d 57dd 000d     .\...\...\...W..
   d784c:	5cc1 000d 5c87 000d 5c9d 000d 5ccf 000d     .\...\...\...\..
   d785c:	5cb3 000d 5c81 000d                         .\...\..

000d7864 <_ZTV11USARTSerial>:
	...
   d786c:	5d91 000d 5de1 000d 5def 000d 57dd 000d     .]...]...]...W..
   d787c:	5da5 000d 5dc7 000d 5db3 000d 5ddb 000d     .]...]...]...]..
   d788c:	5d93 000d 5d97 000d                         .]...]..

000d7894 <_ZTV7TwoWire>:
	...
   d789c:	5e95 000d 5edf 000d 5eb7 000d 5e97 000d     .^...^...^...^..
   d78ac:	5ebf 000d 5ec7 000d 5ecf 000d 5ed7 000d     .^...^...^...^..

000d78bc <_ZTVN5spark9MeshClassE>:
	...
   d78c4:	5f9f 000d 5f95 000d 5f8b 000d 5f81 000d     ._..._..._..._..
   d78d4:	5f75 000d 5f69 000d 5f5d 000d 5f55 000d     u_..i_..]_..U_..
   d78e4:	5f4b 000d 5f41 000d 6185 000d               K_..A_...a..

000d78f0 <_ZTVN5spark9WiFiClassE>:
	...
   d78f8:	60ff 000d 60f5 000d 60eb 000d 60a1 000d     .`...`...`...`..
   d7908:	60df 000d 60d3 000d 60c7 000d 60bf 000d     .`...`...`...`..
   d7918:	60b5 000d 60ab 000d 6185 000d               .`...`...a..

000d7924 <_ZTVN5spark12NetworkClassE>:
	...
   d792c:	611d 000d 6127 000d 6131 000d 613b 000d     .a..'a..1a..;a..
   d793c:	6145 000d 6151 000d 615d 000d 6169 000d     Ea..Qa..]a..ia..
   d794c:	6171 000d 617b 000d 6185 000d               qa..{a...a..

000d7958 <__sf_fake_stdin>:
	...

000d7978 <__sf_fake_stdout>:
	...

000d7998 <__sf_fake_stderr>:
	...
   d79b8:	0043                                        C.

000d79ba <link_const_variable_data_end>:
	...

000d79bc <link_constructors_location>:
   d79bc:	000d41b9 	.word	0x000d41b9
   d79c0:	000d4909 	.word	0x000d4909
   d79c4:	000d51ff 	.word	0x000d51ff
   d79c8:	000d5695 	.word	0x000d5695
   d79cc:	000d57b5 	.word	0x000d57b5
   d79d0:	000d57cd 	.word	0x000d57cd
   d79d4:	000d5a65 	.word	0x000d5a65
   d79d8:	000d5a75 	.word	0x000d5a75
   d79dc:	000d5aad 	.word	0x000d5aad
   d79e0:	000d6055 	.word	0x000d6055
   d79e4:	000d6109 	.word	0x000d6109
   d79e8:	000d6251 	.word	0x000d6251
   d79ec:	000d6331 	.word	0x000d6331
   d79f0:	000d63c5 	.word	0x000d63c5
   d79f4:	000d6449 	.word	0x000d6449
   d79f8:	000d650d 	.word	0x000d650d
   d79fc:	000d65d1 	.word	0x000d65d1
